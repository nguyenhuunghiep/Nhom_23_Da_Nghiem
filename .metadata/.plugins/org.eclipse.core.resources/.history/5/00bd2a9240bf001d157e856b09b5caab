/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "i2c-lcd.h"
#include "stdio.h"
#include "DHT.h"
#include "string.h"
#include "stdlib.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;

I2C_HandleTypeDef hi2c1;

TIM_HandleTypeDef htim2;

UART_HandleTypeDef huart1;

osThreadId Task_ConTrolHandle;
osThreadId Task_GetDataHandle;
osMessageQId queue_exitHandle;
osSemaphoreId semaphore_uartHandle;
/* USER CODE BEGIN PV */

char t[20], data_storage[20];
DHT_DataTypedef data;
int dientro;
volatile uint32_t currentTime, lastTime=0;
volatile int current_Time, last_Time=0;
volatile uint8_t mode=2, para=1;
volatile uint8_t cycle=2, flag=1;
extern __IO uint32_t uwTick;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_TIM2_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_ADC1_Init(void);
void Task_control(void const * argument);
void Task_getdata(void const * argument);

/* USER CODE BEGIN PFP */
void display_mode_1(DHT_DataTypedef data, int dientro);  // Hàm hiển thị dữ liệu ở chế độ 1
void display_mode_2(DHT_DataTypedef data);  // Hàm hiển thị dữ liệu ở chế độ 2
void display_cycle();                       // Hàm hiển thị chu kì ở chế độ 1
void get_data(char *p);                     // Hàm xử lí dữ liệu thì máy tính gửi xuống
void transmit_data_from_computer();         // Hàm truy�?n dữ liệu lên máy tính
void getdata_DT(int *value);
int get_adc_channel(uint32_t channel);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C1_Init();
  MX_TIM2_Init();
  MX_USART1_UART_Init();
  MX_ADC1_Init();
  /* USER CODE BEGIN 2 */
   lcd_init();
   HAL_UART_Receive_IT(&huart1, (uint8_t*) &t[2], 18);
  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of semaphore_uart */
  osSemaphoreDef(semaphore_uart);
  semaphore_uartHandle = osSemaphoreCreate(osSemaphore(semaphore_uart), 1);

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of queue_exit */
  osMessageQDef(queue_exit, 3, uint16_t);
  queue_exitHandle = osMessageCreate(osMessageQ(queue_exit), NULL);

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task_ConTrol */
  osThreadDef(Task_ConTrol, Task_control, osPriorityNormal, 0, 512);
  Task_ConTrolHandle = osThreadCreate(osThread(Task_ConTrol), NULL);

  /* definition and creation of Task_GetData */
  osThreadDef(Task_GetData, Task_getdata, osPriorityAboveNormal, 0, 512);
  Task_GetDataHandle = osThreadCreate(osThread(Task_GetData), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 71;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 65535;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);

}

/* USER CODE BEGIN 4 */
/*Hàm này sẽ được g�?i khi có dữ liệu từ máy tính gửi xuống
 * */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	HAL_UART_Receive_IT(&huart1, (uint8_t*) &t[2], 18);// �?ăng kí nơi lưu dữ liệu từ máy tính gửi xuống
	strncpy(data_storage,"",20);						// xóa nơi lưu trữ để nhận dữ liệu mới
	strncpy(data_storage,&t[2],strlen(&t[2])-2);		// xóa nơi lưu trữ để nhận dữ liệu mới
	strncpy(t,"",20);									// xóa nơi lưu trữ ban đầu để chuẩn bị nhận dữ liệu tiếp theo
	osSemaphoreRelease (semaphore_uartHandle);// giải phóng semaphore
}
/*Hàm này sẽ được g�?i khi có ngắt ngoài xảy ra */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if(GPIO_Pin==GPIO_PIN_3)				//Nếu là ngắt ngoài 3 thì ta sẽ đổi mode
	{
		current_Time=HAL_GetTick();
		if(current_Time-last_Time>300)		// �?ảm bảo giữa 2 lần ngắt là 300ms nhằm chống dội phím
		{
			if(mode==1)
			{
				mode=2;
				flag=1;
			}
			else
				mode=1;
		}
		last_Time=current_Time;
	}
	if(GPIO_Pin==GPIO_PIN_2)			// Nếu là ngắt ngoài 2 thì ta sẽ tăng chu kì lên 1
	{
		current_Time=HAL_GetTick();
		if((current_Time-last_Time>300)&&(mode==1))  // ch�? 300ms để chống nhiễu và phải ở chế độ 1
		{
			cycle=cycle+1;
		}
		last_Time=current_Time;
	}
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);  /// xóa c�? báo ngắt
}
void display_mode_1(DHT_DataTypedef data, int dientro) // Hàm hiển thị dữ liệu ở chế độ 1, tham số truy�?n vào là 1 struct có chứa nhiệt đ�?, độ ẩm
{
	char row_1[18], row_2[16];

	lcd_put_cur(0,0);
	strcpy(row_1,"Mode:1");
	strcpy(&row_1[6]," T");  // copy chuỗi vào mảng
	sprintf(&row_1[8],"%d",cycle);  // hàm chuyển đổi số sang chuỗi
	strcpy(&row_1[9]," DT");
	sprintf(&row_1[12],"%d",dientro);
	lcd_send_string(row_1);      // hàm hiển thị ra LCD

	lcd_put_cur(1,0);
	strcpy(row_2,"ND:");
	sprintf(&row_2[3],"%d",data.Temperature);
	strcpy(&row_2[5]," DA:");
	sprintf(&row_2[9],"%d",data.Humidity);
	lcd_send_string(row_2);
}
void display_mode_2(DHT_DataTypedef data)// // Hàm hiển thị dữ liệu ở chế độ 2, tham số truy�?n vào là 1 struct có chứa nhiệt đ�?, độ ẩm
{
	char row_2[9];
	lcd_clear();
	lcd_put_cur(0,0);
	lcd_send_string("Mode:2");
	if(para==1)// nếu yêu cầu nhiệt độ sẽ hiển thị nhiệt độ
	{
		lcd_put_cur(1,0);
		strcpy(row_2,"ND:");
		sprintf(&row_2[3],"%d",data.Temperature);
		lcd_send_string(row_2);
	}
	if(para==2)// nếu yêu cầu độ ẩm sẽ hiển thị độ ẩm
	{
		lcd_put_cur(1,0);
		strcpy(row_2,"DA:");
		sprintf(&row_2[3],"%d",data.Humidity);
		lcd_send_string(row_2);
	}
	if(para==3)// nếu yêu cầu điện trở
	{
		lcd_put_cur(1,0);
		strcpy(row_2,"DT:");
		sprintf(&row_2[3],"%d",dientro);
		lcd_send_string(row_2);
		}
}
void display_cycle() // Hàm hiển thị chu kì
{
	if(mode==1)
	{
		if((cycle>9)||(cycle<2))// giới hạn chu kì từ 2-9 s
		{
			cycle=2;
		}
		lcd_put_cur(0,0);
		lcd_send_string("Mode:1");
		char row_1[10];
		lcd_put_cur(0,6);
		strcpy(row_1," T");
		sprintf(&row_1[2],"%d",cycle);
		lcd_send_string(row_1);
	}
}
void get_data(char *p)// hàm xử lí dữ liệu từ máy tính truy�?n xuống, tham số truy�?n vào là địa chỉ của mảng lưu trữ dữ liệu
{
	uint8_t cycle_1, m, n, k;
	if(mode == 1)  // nếu là mode 1 thì dữ liệu sẽ là chu kì và sẽ chuyển đổi từ kí tự sang số
	{
		cycle_1=atoi(p);
		if(cycle_1>0)
		{
			cycle=cycle_1;
		}
	}
	if(mode == 2) // Nếu lầ mode 2 thì dữ liệu là thông số nhiệt độ hoặc độ ẩm
	{
		m=strcmp(p,"nhiet do ");// so sánh chuỗi nhận được
		n=strcmp(p,"do am ");
		k=strcmp(p,"dien tro ");
		if((m==0)&&(n!=0)&&(k!=0))
		{
			para=1;             // nếu là nhiệt độ para=1
			strncpy(p,"",20);
		}
		if((m!=0)&&(n==0)&&(k!=0))
		{
			para=2;				 // nếu là độ ẩm para=2
			strncpy(p,"",20);
		}
		if((m!=0)&&(n!=0)&&(k==0))
		{
			para=3;				// nếu là độ ẩm para=3
			strncpy(p,"",20);
		}
		flag=1;  // bật c�? báo là hiển thị dữ liệu yêu cầu từ máy tính gửi xuống
	}
}
void transmit_data_from_computer()// HÀm truy�?n dữ liệu lên máy tính
{
	if(mode==1)// nếu là mode 1 sẽ truy�?n đầy đủ
	{
		char row_2[37];
		strcpy(row_2,"Nhiet do:");
		sprintf(&row_2[9],"%d",data.Temperature);
		strcpy(&row_2[11]," Do am:");
		sprintf(&row_2[18],"%d",data.Humidity);
		strcpy(&row_2[20]," Dien tro:");
		sprintf(&row_2[30],"%d",dientro);
		strcpy(&row_2[34],"\n");
		HAL_UART_Transmit(&huart1,(uint8_t*)row_2,35,200);
	}
	if(mode==2)  // nếu là mode 2 sẽ truy�?n theo yêu cầu
	{
		if(para==1)
		{
			char row_2[13];
			strcpy(row_2,"Nhiet do:");
			sprintf(&row_2[9],"%d",data.Temperature);
			strcpy(&row_2[11],"\n");
			HAL_UART_Transmit(&huart1,(uint8_t*)row_2,12,100);
		}
		if(para==2)
		{
			char row_2[10];
			strcpy(row_2,"Do am:");
			sprintf(&row_2[6],"%d",data.Humidity);
			strcpy(&row_2[8],"\n");
			HAL_UART_Transmit(&huart1,(uint8_t*)row_2,9,100);
		}
		if(para==3)
		{
			char row_2[16];
			strcpy(row_2,"Dien tro:");
			sprintf(&row_2[9],"%d",dientro);
			strcpy(&row_2[13],"\n");
			HAL_UART_Transmit(&huart1,(uint8_t*)row_2,14,100);
		}
	}
}
void getdata_DT(int *value)
{
	int data;
	float adc;
	data=get_adc_channel(ADC_CHANNEL_0);// lấy dữ liệu từ ADC
	adc=(float)(data/4096.0)*5000;
	*(value)=(int)adc;
}
int get_adc_channel(uint32_t channel)// cấu hình adc
{
	int adc;
	ADC_ChannelConfTypeDef sConfig = {0};
	sConfig.Channel = channel;
	sConfig.Rank = ADC_REGULAR_RANK_1;
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
	{
	    Error_Handler();
	}
	HAL_ADC_Start(&hadc1);
	HAL_ADC_PollForConversion(&hadc1,1000);
	adc = HAL_ADC_GetValue(&hadc1);
	HAL_ADC_Stop(&hadc1);
	return adc;
}
/* USER CODE END 4 */

/* USER CODE BEGIN Header_Task_control */
/**
  * @brief  Function implementing the Task_ConTrol thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task_control */
void Task_control(void const * argument)
{
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	if(mode==1)
	{
		display_cycle(); // hiển thị chu kì nếu có cập nhật nhằm đảm bảo tính th�?i gian thực
		currentTime=uwTick;
		if(currentTime-lastTime>cycle*1000)// đúng chu kì như đã đặt thì sẽ hiển thị nhưng thông số cần thiết
		{
			DHT_GetData(&data);
			getdata_DT(&dientro);
			display_mode_1(data, dientro);
			lastTime=currentTime;
			transmit_data_from_computer();
		}
	}
	if((mode==2)&&(flag==1))// nếu là mode 2 và có yêu cầu truy�?n và hiển thị thông số thì sẽ hiển thị thông số yêu cầu,
	{
		DHT_GetData(&data);
		getdata_DT(&dientro);
		display_mode_2(data);
		transmit_data_from_computer();
		flag=0;// xóa c�? báo gửi thông số yêu cầu
	}
    osDelay(1);
  }
  /* USER CODE END 5 */
}

/* USER CODE BEGIN Header_Task_getdata */
/**
* @brief Function implementing the Task_GetData thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_getdata */
void Task_getdata(void const * argument)
{
  /* USER CODE BEGIN Task_getdata */
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreWait(semaphore_uartHandle,osWaitForever);// đợi semaphore từ ngắt uart
	get_data(data_storage);                           // xử lí dữ liệu
  }
  /* USER CODE END Task_getdata */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
 // __disable_irq();

  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

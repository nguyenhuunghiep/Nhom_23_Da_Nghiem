
test_freertos_dht11_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000859c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002bc  080086ac  080086ac  000186ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008968  08008968  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08008968  08008968  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008968  08008968  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008968  08008968  00018968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800896c  0800896c  0001896c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008970  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000199c  20000078  080089e8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a14  080089e8  00021a14  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018318  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003889  00000000  00000000  000383b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001670  00000000  00000000  0003bc48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001530  00000000  00000000  0003d2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ad93  00000000  00000000  0003e7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bfda  00000000  00000000  0005957b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ace8  00000000  00000000  00075555  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011023d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065ac  00000000  00000000  00110290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08008694 	.word	0x08008694

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08008694 	.word	0x08008694

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_fmul>:
 8000174:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000178:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800017c:	bf1e      	ittt	ne
 800017e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000182:	ea92 0f0c 	teqne	r2, ip
 8000186:	ea93 0f0c 	teqne	r3, ip
 800018a:	d06f      	beq.n	800026c <__aeabi_fmul+0xf8>
 800018c:	441a      	add	r2, r3
 800018e:	ea80 0c01 	eor.w	ip, r0, r1
 8000192:	0240      	lsls	r0, r0, #9
 8000194:	bf18      	it	ne
 8000196:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800019a:	d01e      	beq.n	80001da <__aeabi_fmul+0x66>
 800019c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80001a0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001a4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001a8:	fba0 3101 	umull	r3, r1, r0, r1
 80001ac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80001b0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001b4:	bf3e      	ittt	cc
 80001b6:	0049      	lslcc	r1, r1, #1
 80001b8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001bc:	005b      	lslcc	r3, r3, #1
 80001be:	ea40 0001 	orr.w	r0, r0, r1
 80001c2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001c6:	2afd      	cmp	r2, #253	; 0xfd
 80001c8:	d81d      	bhi.n	8000206 <__aeabi_fmul+0x92>
 80001ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001d2:	bf08      	it	eq
 80001d4:	f020 0001 	biceq.w	r0, r0, #1
 80001d8:	4770      	bx	lr
 80001da:	f090 0f00 	teq	r0, #0
 80001de:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001e2:	bf08      	it	eq
 80001e4:	0249      	lsleq	r1, r1, #9
 80001e6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001ea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ee:	3a7f      	subs	r2, #127	; 0x7f
 80001f0:	bfc2      	ittt	gt
 80001f2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001f6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001fa:	4770      	bxgt	lr
 80001fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000200:	f04f 0300 	mov.w	r3, #0
 8000204:	3a01      	subs	r2, #1
 8000206:	dc5d      	bgt.n	80002c4 <__aeabi_fmul+0x150>
 8000208:	f112 0f19 	cmn.w	r2, #25
 800020c:	bfdc      	itt	le
 800020e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000212:	4770      	bxle	lr
 8000214:	f1c2 0200 	rsb	r2, r2, #0
 8000218:	0041      	lsls	r1, r0, #1
 800021a:	fa21 f102 	lsr.w	r1, r1, r2
 800021e:	f1c2 0220 	rsb	r2, r2, #32
 8000222:	fa00 fc02 	lsl.w	ip, r0, r2
 8000226:	ea5f 0031 	movs.w	r0, r1, rrx
 800022a:	f140 0000 	adc.w	r0, r0, #0
 800022e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000232:	bf08      	it	eq
 8000234:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000238:	4770      	bx	lr
 800023a:	f092 0f00 	teq	r2, #0
 800023e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000242:	bf02      	ittt	eq
 8000244:	0040      	lsleq	r0, r0, #1
 8000246:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800024a:	3a01      	subeq	r2, #1
 800024c:	d0f9      	beq.n	8000242 <__aeabi_fmul+0xce>
 800024e:	ea40 000c 	orr.w	r0, r0, ip
 8000252:	f093 0f00 	teq	r3, #0
 8000256:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800025a:	bf02      	ittt	eq
 800025c:	0049      	lsleq	r1, r1, #1
 800025e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000262:	3b01      	subeq	r3, #1
 8000264:	d0f9      	beq.n	800025a <__aeabi_fmul+0xe6>
 8000266:	ea41 010c 	orr.w	r1, r1, ip
 800026a:	e78f      	b.n	800018c <__aeabi_fmul+0x18>
 800026c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000270:	ea92 0f0c 	teq	r2, ip
 8000274:	bf18      	it	ne
 8000276:	ea93 0f0c 	teqne	r3, ip
 800027a:	d00a      	beq.n	8000292 <__aeabi_fmul+0x11e>
 800027c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000280:	bf18      	it	ne
 8000282:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000286:	d1d8      	bne.n	800023a <__aeabi_fmul+0xc6>
 8000288:	ea80 0001 	eor.w	r0, r0, r1
 800028c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000290:	4770      	bx	lr
 8000292:	f090 0f00 	teq	r0, #0
 8000296:	bf17      	itett	ne
 8000298:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800029c:	4608      	moveq	r0, r1
 800029e:	f091 0f00 	teqne	r1, #0
 80002a2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80002a6:	d014      	beq.n	80002d2 <__aeabi_fmul+0x15e>
 80002a8:	ea92 0f0c 	teq	r2, ip
 80002ac:	d101      	bne.n	80002b2 <__aeabi_fmul+0x13e>
 80002ae:	0242      	lsls	r2, r0, #9
 80002b0:	d10f      	bne.n	80002d2 <__aeabi_fmul+0x15e>
 80002b2:	ea93 0f0c 	teq	r3, ip
 80002b6:	d103      	bne.n	80002c0 <__aeabi_fmul+0x14c>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	bf18      	it	ne
 80002bc:	4608      	movne	r0, r1
 80002be:	d108      	bne.n	80002d2 <__aeabi_fmul+0x15e>
 80002c0:	ea80 0001 	eor.w	r0, r0, r1
 80002c4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002c8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002d0:	4770      	bx	lr
 80002d2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002d6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002da:	4770      	bx	lr

080002dc <__aeabi_drsub>:
 80002dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e0:	e002      	b.n	80002e8 <__adddf3>
 80002e2:	bf00      	nop

080002e4 <__aeabi_dsub>:
 80002e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002e8 <__adddf3>:
 80002e8:	b530      	push	{r4, r5, lr}
 80002ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f2:	ea94 0f05 	teq	r4, r5
 80002f6:	bf08      	it	eq
 80002f8:	ea90 0f02 	teqeq	r0, r2
 80002fc:	bf1f      	itttt	ne
 80002fe:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000302:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000306:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800030e:	f000 80e2 	beq.w	80004d6 <__adddf3+0x1ee>
 8000312:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000316:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031a:	bfb8      	it	lt
 800031c:	426d      	neglt	r5, r5
 800031e:	dd0c      	ble.n	800033a <__adddf3+0x52>
 8000320:	442c      	add	r4, r5
 8000322:	ea80 0202 	eor.w	r2, r0, r2
 8000326:	ea81 0303 	eor.w	r3, r1, r3
 800032a:	ea82 0000 	eor.w	r0, r2, r0
 800032e:	ea83 0101 	eor.w	r1, r3, r1
 8000332:	ea80 0202 	eor.w	r2, r0, r2
 8000336:	ea81 0303 	eor.w	r3, r1, r3
 800033a:	2d36      	cmp	r5, #54	; 0x36
 800033c:	bf88      	it	hi
 800033e:	bd30      	pophi	{r4, r5, pc}
 8000340:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000344:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000348:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800034c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x70>
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800035c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000360:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x84>
 8000366:	4252      	negs	r2, r2
 8000368:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800036c:	ea94 0f05 	teq	r4, r5
 8000370:	f000 80a7 	beq.w	80004c2 <__adddf3+0x1da>
 8000374:	f1a4 0401 	sub.w	r4, r4, #1
 8000378:	f1d5 0e20 	rsbs	lr, r5, #32
 800037c:	db0d      	blt.n	800039a <__adddf3+0xb2>
 800037e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000382:	fa22 f205 	lsr.w	r2, r2, r5
 8000386:	1880      	adds	r0, r0, r2
 8000388:	f141 0100 	adc.w	r1, r1, #0
 800038c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000390:	1880      	adds	r0, r0, r2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	4159      	adcs	r1, r3
 8000398:	e00e      	b.n	80003b8 <__adddf3+0xd0>
 800039a:	f1a5 0520 	sub.w	r5, r5, #32
 800039e:	f10e 0e20 	add.w	lr, lr, #32
 80003a2:	2a01      	cmp	r2, #1
 80003a4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003a8:	bf28      	it	cs
 80003aa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003ae:	fa43 f305 	asr.w	r3, r3, r5
 80003b2:	18c0      	adds	r0, r0, r3
 80003b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	d507      	bpl.n	80003ce <__adddf3+0xe6>
 80003be:	f04f 0e00 	mov.w	lr, #0
 80003c2:	f1dc 0c00 	rsbs	ip, ip, #0
 80003c6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ca:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d2:	d31b      	bcc.n	800040c <__adddf3+0x124>
 80003d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003d8:	d30c      	bcc.n	80003f4 <__adddf3+0x10c>
 80003da:	0849      	lsrs	r1, r1, #1
 80003dc:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e4:	f104 0401 	add.w	r4, r4, #1
 80003e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f0:	f080 809a 	bcs.w	8000528 <__adddf3+0x240>
 80003f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003f8:	bf08      	it	eq
 80003fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003fe:	f150 0000 	adcs.w	r0, r0, #0
 8000402:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000406:	ea41 0105 	orr.w	r1, r1, r5
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000410:	4140      	adcs	r0, r0
 8000412:	eb41 0101 	adc.w	r1, r1, r1
 8000416:	3c01      	subs	r4, #1
 8000418:	bf28      	it	cs
 800041a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800041e:	d2e9      	bcs.n	80003f4 <__adddf3+0x10c>
 8000420:	f091 0f00 	teq	r1, #0
 8000424:	bf04      	itt	eq
 8000426:	4601      	moveq	r1, r0
 8000428:	2000      	moveq	r0, #0
 800042a:	fab1 f381 	clz	r3, r1
 800042e:	bf08      	it	eq
 8000430:	3320      	addeq	r3, #32
 8000432:	f1a3 030b 	sub.w	r3, r3, #11
 8000436:	f1b3 0220 	subs.w	r2, r3, #32
 800043a:	da0c      	bge.n	8000456 <__adddf3+0x16e>
 800043c:	320c      	adds	r2, #12
 800043e:	dd08      	ble.n	8000452 <__adddf3+0x16a>
 8000440:	f102 0c14 	add.w	ip, r2, #20
 8000444:	f1c2 020c 	rsb	r2, r2, #12
 8000448:	fa01 f00c 	lsl.w	r0, r1, ip
 800044c:	fa21 f102 	lsr.w	r1, r1, r2
 8000450:	e00c      	b.n	800046c <__adddf3+0x184>
 8000452:	f102 0214 	add.w	r2, r2, #20
 8000456:	bfd8      	it	le
 8000458:	f1c2 0c20 	rsble	ip, r2, #32
 800045c:	fa01 f102 	lsl.w	r1, r1, r2
 8000460:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000464:	bfdc      	itt	le
 8000466:	ea41 010c 	orrle.w	r1, r1, ip
 800046a:	4090      	lslle	r0, r2
 800046c:	1ae4      	subs	r4, r4, r3
 800046e:	bfa2      	ittt	ge
 8000470:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000474:	4329      	orrge	r1, r5
 8000476:	bd30      	popge	{r4, r5, pc}
 8000478:	ea6f 0404 	mvn.w	r4, r4
 800047c:	3c1f      	subs	r4, #31
 800047e:	da1c      	bge.n	80004ba <__adddf3+0x1d2>
 8000480:	340c      	adds	r4, #12
 8000482:	dc0e      	bgt.n	80004a2 <__adddf3+0x1ba>
 8000484:	f104 0414 	add.w	r4, r4, #20
 8000488:	f1c4 0220 	rsb	r2, r4, #32
 800048c:	fa20 f004 	lsr.w	r0, r0, r4
 8000490:	fa01 f302 	lsl.w	r3, r1, r2
 8000494:	ea40 0003 	orr.w	r0, r0, r3
 8000498:	fa21 f304 	lsr.w	r3, r1, r4
 800049c:	ea45 0103 	orr.w	r1, r5, r3
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	f1c4 040c 	rsb	r4, r4, #12
 80004a6:	f1c4 0220 	rsb	r2, r4, #32
 80004aa:	fa20 f002 	lsr.w	r0, r0, r2
 80004ae:	fa01 f304 	lsl.w	r3, r1, r4
 80004b2:	ea40 0003 	orr.w	r0, r0, r3
 80004b6:	4629      	mov	r1, r5
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	fa21 f004 	lsr.w	r0, r1, r4
 80004be:	4629      	mov	r1, r5
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	f094 0f00 	teq	r4, #0
 80004c6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ca:	bf06      	itte	eq
 80004cc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d0:	3401      	addeq	r4, #1
 80004d2:	3d01      	subne	r5, #1
 80004d4:	e74e      	b.n	8000374 <__adddf3+0x8c>
 80004d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004da:	bf18      	it	ne
 80004dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e0:	d029      	beq.n	8000536 <__adddf3+0x24e>
 80004e2:	ea94 0f05 	teq	r4, r5
 80004e6:	bf08      	it	eq
 80004e8:	ea90 0f02 	teqeq	r0, r2
 80004ec:	d005      	beq.n	80004fa <__adddf3+0x212>
 80004ee:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f2:	bf04      	itt	eq
 80004f4:	4619      	moveq	r1, r3
 80004f6:	4610      	moveq	r0, r2
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea91 0f03 	teq	r1, r3
 80004fe:	bf1e      	ittt	ne
 8000500:	2100      	movne	r1, #0
 8000502:	2000      	movne	r0, #0
 8000504:	bd30      	popne	{r4, r5, pc}
 8000506:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050a:	d105      	bne.n	8000518 <__adddf3+0x230>
 800050c:	0040      	lsls	r0, r0, #1
 800050e:	4149      	adcs	r1, r1
 8000510:	bf28      	it	cs
 8000512:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000516:	bd30      	pop	{r4, r5, pc}
 8000518:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800051c:	bf3c      	itt	cc
 800051e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000522:	bd30      	popcc	{r4, r5, pc}
 8000524:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000528:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800052c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000530:	f04f 0000 	mov.w	r0, #0
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053a:	bf1a      	itte	ne
 800053c:	4619      	movne	r1, r3
 800053e:	4610      	movne	r0, r2
 8000540:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000544:	bf1c      	itt	ne
 8000546:	460b      	movne	r3, r1
 8000548:	4602      	movne	r2, r0
 800054a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800054e:	bf06      	itte	eq
 8000550:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000554:	ea91 0f03 	teqeq	r1, r3
 8000558:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	bf00      	nop

08000560 <__aeabi_ui2d>:
 8000560:	f090 0f00 	teq	r0, #0
 8000564:	bf04      	itt	eq
 8000566:	2100      	moveq	r1, #0
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000570:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000574:	f04f 0500 	mov.w	r5, #0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e750      	b.n	8000420 <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_i2d>:
 8000580:	f090 0f00 	teq	r0, #0
 8000584:	bf04      	itt	eq
 8000586:	2100      	moveq	r1, #0
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000590:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000594:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000598:	bf48      	it	mi
 800059a:	4240      	negmi	r0, r0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e73e      	b.n	8000420 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_f2d>:
 80005a4:	0042      	lsls	r2, r0, #1
 80005a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005aa:	ea4f 0131 	mov.w	r1, r1, rrx
 80005ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b2:	bf1f      	itttt	ne
 80005b4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005bc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c0:	4770      	bxne	lr
 80005c2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005c6:	bf08      	it	eq
 80005c8:	4770      	bxeq	lr
 80005ca:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ce:	bf04      	itt	eq
 80005d0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d4:	4770      	bxeq	lr
 80005d6:	b530      	push	{r4, r5, lr}
 80005d8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	e71c      	b.n	8000420 <__adddf3+0x138>
 80005e6:	bf00      	nop

080005e8 <__aeabi_ul2d>:
 80005e8:	ea50 0201 	orrs.w	r2, r0, r1
 80005ec:	bf08      	it	eq
 80005ee:	4770      	bxeq	lr
 80005f0:	b530      	push	{r4, r5, lr}
 80005f2:	f04f 0500 	mov.w	r5, #0
 80005f6:	e00a      	b.n	800060e <__aeabi_l2d+0x16>

080005f8 <__aeabi_l2d>:
 80005f8:	ea50 0201 	orrs.w	r2, r0, r1
 80005fc:	bf08      	it	eq
 80005fe:	4770      	bxeq	lr
 8000600:	b530      	push	{r4, r5, lr}
 8000602:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000606:	d502      	bpl.n	800060e <__aeabi_l2d+0x16>
 8000608:	4240      	negs	r0, r0
 800060a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800060e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000612:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000616:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061a:	f43f aed8 	beq.w	80003ce <__adddf3+0xe6>
 800061e:	f04f 0203 	mov.w	r2, #3
 8000622:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000626:	bf18      	it	ne
 8000628:	3203      	addne	r2, #3
 800062a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062e:	bf18      	it	ne
 8000630:	3203      	addne	r2, #3
 8000632:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000636:	f1c2 0320 	rsb	r3, r2, #32
 800063a:	fa00 fc03 	lsl.w	ip, r0, r3
 800063e:	fa20 f002 	lsr.w	r0, r0, r2
 8000642:	fa01 fe03 	lsl.w	lr, r1, r3
 8000646:	ea40 000e 	orr.w	r0, r0, lr
 800064a:	fa21 f102 	lsr.w	r1, r1, r2
 800064e:	4414      	add	r4, r2
 8000650:	e6bd      	b.n	80003ce <__adddf3+0xe6>
 8000652:	bf00      	nop

08000654 <__aeabi_dmul>:
 8000654:	b570      	push	{r4, r5, r6, lr}
 8000656:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800065e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000662:	bf1d      	ittte	ne
 8000664:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000668:	ea94 0f0c 	teqne	r4, ip
 800066c:	ea95 0f0c 	teqne	r5, ip
 8000670:	f000 f8de 	bleq	8000830 <__aeabi_dmul+0x1dc>
 8000674:	442c      	add	r4, r5
 8000676:	ea81 0603 	eor.w	r6, r1, r3
 800067a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800067e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000682:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000686:	bf18      	it	ne
 8000688:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000690:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000694:	d038      	beq.n	8000708 <__aeabi_dmul+0xb4>
 8000696:	fba0 ce02 	umull	ip, lr, r0, r2
 800069a:	f04f 0500 	mov.w	r5, #0
 800069e:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006a6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006aa:	f04f 0600 	mov.w	r6, #0
 80006ae:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b2:	f09c 0f00 	teq	ip, #0
 80006b6:	bf18      	it	ne
 80006b8:	f04e 0e01 	orrne.w	lr, lr, #1
 80006bc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006c8:	d204      	bcs.n	80006d4 <__aeabi_dmul+0x80>
 80006ca:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ce:	416d      	adcs	r5, r5
 80006d0:	eb46 0606 	adc.w	r6, r6, r6
 80006d4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006d8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006dc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006e8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006ec:	bf88      	it	hi
 80006ee:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f2:	d81e      	bhi.n	8000732 <__aeabi_dmul+0xde>
 80006f4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006f8:	bf08      	it	eq
 80006fa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006fe:	f150 0000 	adcs.w	r0, r0, #0
 8000702:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000706:	bd70      	pop	{r4, r5, r6, pc}
 8000708:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800070c:	ea46 0101 	orr.w	r1, r6, r1
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	ea81 0103 	eor.w	r1, r1, r3
 8000718:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800071c:	bfc2      	ittt	gt
 800071e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000722:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000726:	bd70      	popgt	{r4, r5, r6, pc}
 8000728:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800072c:	f04f 0e00 	mov.w	lr, #0
 8000730:	3c01      	subs	r4, #1
 8000732:	f300 80ab 	bgt.w	800088c <__aeabi_dmul+0x238>
 8000736:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073a:	bfde      	ittt	le
 800073c:	2000      	movle	r0, #0
 800073e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000742:	bd70      	pople	{r4, r5, r6, pc}
 8000744:	f1c4 0400 	rsb	r4, r4, #0
 8000748:	3c20      	subs	r4, #32
 800074a:	da35      	bge.n	80007b8 <__aeabi_dmul+0x164>
 800074c:	340c      	adds	r4, #12
 800074e:	dc1b      	bgt.n	8000788 <__aeabi_dmul+0x134>
 8000750:	f104 0414 	add.w	r4, r4, #20
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f305 	lsl.w	r3, r0, r5
 800075c:	fa20 f004 	lsr.w	r0, r0, r4
 8000760:	fa01 f205 	lsl.w	r2, r1, r5
 8000764:	ea40 0002 	orr.w	r0, r0, r2
 8000768:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800076c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000774:	fa21 f604 	lsr.w	r6, r1, r4
 8000778:	eb42 0106 	adc.w	r1, r2, r6
 800077c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000780:	bf08      	it	eq
 8000782:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000786:	bd70      	pop	{r4, r5, r6, pc}
 8000788:	f1c4 040c 	rsb	r4, r4, #12
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f304 	lsl.w	r3, r0, r4
 8000794:	fa20 f005 	lsr.w	r0, r0, r5
 8000798:	fa01 f204 	lsl.w	r2, r1, r4
 800079c:	ea40 0002 	orr.w	r0, r0, r2
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a8:	f141 0100 	adc.w	r1, r1, #0
 80007ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b0:	bf08      	it	eq
 80007b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b6:	bd70      	pop	{r4, r5, r6, pc}
 80007b8:	f1c4 0520 	rsb	r5, r4, #32
 80007bc:	fa00 f205 	lsl.w	r2, r0, r5
 80007c0:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c4:	fa20 f304 	lsr.w	r3, r0, r4
 80007c8:	fa01 f205 	lsl.w	r2, r1, r5
 80007cc:	ea43 0302 	orr.w	r3, r3, r2
 80007d0:	fa21 f004 	lsr.w	r0, r1, r4
 80007d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d8:	fa21 f204 	lsr.w	r2, r1, r4
 80007dc:	ea20 0002 	bic.w	r0, r0, r2
 80007e0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e8:	bf08      	it	eq
 80007ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ee:	bd70      	pop	{r4, r5, r6, pc}
 80007f0:	f094 0f00 	teq	r4, #0
 80007f4:	d10f      	bne.n	8000816 <__aeabi_dmul+0x1c2>
 80007f6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fa:	0040      	lsls	r0, r0, #1
 80007fc:	eb41 0101 	adc.w	r1, r1, r1
 8000800:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000804:	bf08      	it	eq
 8000806:	3c01      	subeq	r4, #1
 8000808:	d0f7      	beq.n	80007fa <__aeabi_dmul+0x1a6>
 800080a:	ea41 0106 	orr.w	r1, r1, r6
 800080e:	f095 0f00 	teq	r5, #0
 8000812:	bf18      	it	ne
 8000814:	4770      	bxne	lr
 8000816:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081a:	0052      	lsls	r2, r2, #1
 800081c:	eb43 0303 	adc.w	r3, r3, r3
 8000820:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000824:	bf08      	it	eq
 8000826:	3d01      	subeq	r5, #1
 8000828:	d0f7      	beq.n	800081a <__aeabi_dmul+0x1c6>
 800082a:	ea43 0306 	orr.w	r3, r3, r6
 800082e:	4770      	bx	lr
 8000830:	ea94 0f0c 	teq	r4, ip
 8000834:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000838:	bf18      	it	ne
 800083a:	ea95 0f0c 	teqne	r5, ip
 800083e:	d00c      	beq.n	800085a <__aeabi_dmul+0x206>
 8000840:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000844:	bf18      	it	ne
 8000846:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084a:	d1d1      	bne.n	80007f0 <__aeabi_dmul+0x19c>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f04f 0000 	mov.w	r0, #0
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800085e:	bf06      	itte	eq
 8000860:	4610      	moveq	r0, r2
 8000862:	4619      	moveq	r1, r3
 8000864:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000868:	d019      	beq.n	800089e <__aeabi_dmul+0x24a>
 800086a:	ea94 0f0c 	teq	r4, ip
 800086e:	d102      	bne.n	8000876 <__aeabi_dmul+0x222>
 8000870:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000874:	d113      	bne.n	800089e <__aeabi_dmul+0x24a>
 8000876:	ea95 0f0c 	teq	r5, ip
 800087a:	d105      	bne.n	8000888 <__aeabi_dmul+0x234>
 800087c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000880:	bf1c      	itt	ne
 8000882:	4610      	movne	r0, r2
 8000884:	4619      	movne	r1, r3
 8000886:	d10a      	bne.n	800089e <__aeabi_dmul+0x24a>
 8000888:	ea81 0103 	eor.w	r1, r1, r3
 800088c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000890:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000894:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000898:	f04f 0000 	mov.w	r0, #0
 800089c:	bd70      	pop	{r4, r5, r6, pc}
 800089e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008a6:	bd70      	pop	{r4, r5, r6, pc}

080008a8 <__aeabi_ddiv>:
 80008a8:	b570      	push	{r4, r5, r6, lr}
 80008aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008b6:	bf1d      	ittte	ne
 80008b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008bc:	ea94 0f0c 	teqne	r4, ip
 80008c0:	ea95 0f0c 	teqne	r5, ip
 80008c4:	f000 f8a7 	bleq	8000a16 <__aeabi_ddiv+0x16e>
 80008c8:	eba4 0405 	sub.w	r4, r4, r5
 80008cc:	ea81 0e03 	eor.w	lr, r1, r3
 80008d0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008d8:	f000 8088 	beq.w	80009ec <__aeabi_ddiv+0x144>
 80008dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008e8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008ec:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008f8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008fc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000900:	429d      	cmp	r5, r3
 8000902:	bf08      	it	eq
 8000904:	4296      	cmpeq	r6, r2
 8000906:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800090e:	d202      	bcs.n	8000916 <__aeabi_ddiv+0x6e>
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	1ab6      	subs	r6, r6, r2
 8000918:	eb65 0503 	sbc.w	r5, r5, r3
 800091c:	085b      	lsrs	r3, r3, #1
 800091e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000922:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000926:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 000c 	orrcs.w	r0, r0, ip
 800093c:	085b      	lsrs	r3, r3, #1
 800093e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000942:	ebb6 0e02 	subs.w	lr, r6, r2
 8000946:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094a:	bf22      	ittt	cs
 800094c:	1ab6      	subcs	r6, r6, r2
 800094e:	4675      	movcs	r5, lr
 8000950:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000954:	085b      	lsrs	r3, r3, #1
 8000956:	ea4f 0232 	mov.w	r2, r2, rrx
 800095a:	ebb6 0e02 	subs.w	lr, r6, r2
 800095e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000962:	bf22      	ittt	cs
 8000964:	1ab6      	subcs	r6, r6, r2
 8000966:	4675      	movcs	r5, lr
 8000968:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800096c:	085b      	lsrs	r3, r3, #1
 800096e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000972:	ebb6 0e02 	subs.w	lr, r6, r2
 8000976:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097a:	bf22      	ittt	cs
 800097c:	1ab6      	subcs	r6, r6, r2
 800097e:	4675      	movcs	r5, lr
 8000980:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000984:	ea55 0e06 	orrs.w	lr, r5, r6
 8000988:	d018      	beq.n	80009bc <__aeabi_ddiv+0x114>
 800098a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800098e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000992:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000996:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800099e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009a6:	d1c0      	bne.n	800092a <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	d10b      	bne.n	80009c6 <__aeabi_ddiv+0x11e>
 80009ae:	ea41 0100 	orr.w	r1, r1, r0
 80009b2:	f04f 0000 	mov.w	r0, #0
 80009b6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ba:	e7b6      	b.n	800092a <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	bf04      	itt	eq
 80009c2:	4301      	orreq	r1, r0
 80009c4:	2000      	moveq	r0, #0
 80009c6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ca:	bf88      	it	hi
 80009cc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d0:	f63f aeaf 	bhi.w	8000732 <__aeabi_dmul+0xde>
 80009d4:	ebb5 0c03 	subs.w	ip, r5, r3
 80009d8:	bf04      	itt	eq
 80009da:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e2:	f150 0000 	adcs.w	r0, r0, #0
 80009e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ea:	bd70      	pop	{r4, r5, r6, pc}
 80009ec:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009f8:	bfc2      	ittt	gt
 80009fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a02:	bd70      	popgt	{r4, r5, r6, pc}
 8000a04:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a08:	f04f 0e00 	mov.w	lr, #0
 8000a0c:	3c01      	subs	r4, #1
 8000a0e:	e690      	b.n	8000732 <__aeabi_dmul+0xde>
 8000a10:	ea45 0e06 	orr.w	lr, r5, r6
 8000a14:	e68d      	b.n	8000732 <__aeabi_dmul+0xde>
 8000a16:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1a:	ea94 0f0c 	teq	r4, ip
 8000a1e:	bf08      	it	eq
 8000a20:	ea95 0f0c 	teqeq	r5, ip
 8000a24:	f43f af3b 	beq.w	800089e <__aeabi_dmul+0x24a>
 8000a28:	ea94 0f0c 	teq	r4, ip
 8000a2c:	d10a      	bne.n	8000a44 <__aeabi_ddiv+0x19c>
 8000a2e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a32:	f47f af34 	bne.w	800089e <__aeabi_dmul+0x24a>
 8000a36:	ea95 0f0c 	teq	r5, ip
 8000a3a:	f47f af25 	bne.w	8000888 <__aeabi_dmul+0x234>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e72c      	b.n	800089e <__aeabi_dmul+0x24a>
 8000a44:	ea95 0f0c 	teq	r5, ip
 8000a48:	d106      	bne.n	8000a58 <__aeabi_ddiv+0x1b0>
 8000a4a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a4e:	f43f aefd 	beq.w	800084c <__aeabi_dmul+0x1f8>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e722      	b.n	800089e <__aeabi_dmul+0x24a>
 8000a58:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a5c:	bf18      	it	ne
 8000a5e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a62:	f47f aec5 	bne.w	80007f0 <__aeabi_dmul+0x19c>
 8000a66:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6a:	f47f af0d 	bne.w	8000888 <__aeabi_dmul+0x234>
 8000a6e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a72:	f47f aeeb 	bne.w	800084c <__aeabi_dmul+0x1f8>
 8000a76:	e712      	b.n	800089e <__aeabi_dmul+0x24a>

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_f2iz>:
 8000b18:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b1c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b20:	d30f      	bcc.n	8000b42 <__aeabi_f2iz+0x2a>
 8000b22:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b26:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b2a:	d90d      	bls.n	8000b48 <__aeabi_f2iz+0x30>
 8000b2c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b34:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b38:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3c:	bf18      	it	ne
 8000b3e:	4240      	negne	r0, r0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0000 	mov.w	r0, #0
 8000b46:	4770      	bx	lr
 8000b48:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b4c:	d101      	bne.n	8000b52 <__aeabi_f2iz+0x3a>
 8000b4e:	0242      	lsls	r2, r0, #9
 8000b50:	d105      	bne.n	8000b5e <__aeabi_f2iz+0x46>
 8000b52:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000b56:	bf08      	it	eq
 8000b58:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b5c:	4770      	bx	lr
 8000b5e:	f04f 0000 	mov.w	r0, #0
 8000b62:	4770      	bx	lr

08000b64 <delay>:
extern TIM_HandleTypeDef htim2;
#include "DHT.h"


 void delay(volatile uint32_t delay)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]

		__HAL_TIM_SetCounter(&htim2,0);
 8000b6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <delay+0x44>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2200      	movs	r2, #0
 8000b72:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SetAutoreload(&htim2,65535);
 8000b74:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <delay+0x44>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b7c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <delay+0x44>)
 8000b80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b84:	60da      	str	r2, [r3, #12]
		HAL_TIM_Base_Start(&htim2);
 8000b86:	4808      	ldr	r0, [pc, #32]	; (8000ba8 <delay+0x44>)
 8000b88:	f003 fc72 	bl	8004470 <HAL_TIM_Base_Start>
		while(__HAL_TIM_GetCounter(&htim2)<delay);
 8000b8c:	bf00      	nop
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <delay+0x44>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	429a      	cmp	r2, r3
 8000b98:	d3f9      	bcc.n	8000b8e <delay+0x2a>
		HAL_TIM_Base_Stop(&htim2);
 8000b9a:	4803      	ldr	r0, [pc, #12]	; (8000ba8 <delay+0x44>)
 8000b9c:	f003 fcb2 	bl	8004504 <HAL_TIM_Base_Stop>

}
 8000ba0:	bf00      	nop
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	200003d4 	.word	0x200003d4

08000bac <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	460b      	mov	r3, r1
 8000bb6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 0308 	add.w	r3, r7, #8
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000bc6:	887b      	ldrh	r3, [r7, #2]
 8000bc8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000bd2:	f107 0308 	add.w	r3, r7, #8
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f002 f853 	bl	8002c84 <HAL_GPIO_Init>
}
 8000bde:	bf00      	nop
 8000be0:	3718      	adds	r7, #24
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b086      	sub	sp, #24
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
 8000bee:	460b      	mov	r3, r1
 8000bf0:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf2:	f107 0308 	add.w	r3, r7, #8
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
 8000bfe:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000c00:	887b      	ldrh	r3, [r7, #2]
 8000c02:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c04:	2300      	movs	r3, #0
 8000c06:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000c0c:	f107 0308 	add.w	r3, r7, #8
 8000c10:	4619      	mov	r1, r3
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	f002 f836 	bl	8002c84 <HAL_GPIO_Init>
}
 8000c18:	bf00      	nop
 8000c1a:	3718      	adds	r7, #24
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <DHT_Start>:


void DHT_Start (void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0

	Set_Pin_Output (DHT_PORT, DHT_PIN); // set the pin as output
 8000c24:	2102      	movs	r1, #2
 8000c26:	4811      	ldr	r0, [pc, #68]	; (8000c6c <DHT_Start+0x4c>)
 8000c28:	f7ff ffc0 	bl	8000bac <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	2102      	movs	r1, #2
 8000c30:	480e      	ldr	r0, [pc, #56]	; (8000c6c <DHT_Start+0x4c>)
 8000c32:	f002 f9c2 	bl	8002fba <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000c36:	200a      	movs	r0, #10
 8000c38:	f001 f9ea 	bl	8002010 <HAL_Delay>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2102      	movs	r1, #2
 8000c40:	480a      	ldr	r0, [pc, #40]	; (8000c6c <DHT_Start+0x4c>)
 8000c42:	f002 f9ba 	bl	8002fba <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 8000c46:	f244 6050 	movw	r0, #18000	; 0x4650
 8000c4a:	f7ff ff8b 	bl	8000b64 <delay>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 8000c4e:	2201      	movs	r2, #1
 8000c50:	2102      	movs	r1, #2
 8000c52:	4806      	ldr	r0, [pc, #24]	; (8000c6c <DHT_Start+0x4c>)
 8000c54:	f002 f9b1 	bl	8002fba <HAL_GPIO_WritePin>
    delay (30);   // wait for 30us
 8000c58:	201e      	movs	r0, #30
 8000c5a:	f7ff ff83 	bl	8000b64 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 8000c5e:	2102      	movs	r1, #2
 8000c60:	4802      	ldr	r0, [pc, #8]	; (8000c6c <DHT_Start+0x4c>)
 8000c62:	f7ff ffc0 	bl	8000be6 <Set_Pin_Input>
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40010800 	.word	0x40010800

08000c70 <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	71fb      	strb	r3, [r7, #7]
	delay (40);
 8000c7a:	2028      	movs	r0, #40	; 0x28
 8000c7c:	f7ff ff72 	bl	8000b64 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8000c80:	2102      	movs	r1, #2
 8000c82:	4811      	ldr	r0, [pc, #68]	; (8000cc8 <DHT_Check_Response+0x58>)
 8000c84:	f002 f982 	bl	8002f8c <HAL_GPIO_ReadPin>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d10e      	bne.n	8000cac <DHT_Check_Response+0x3c>
	{
		delay (80);
 8000c8e:	2050      	movs	r0, #80	; 0x50
 8000c90:	f7ff ff68 	bl	8000b64 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 8000c94:	2102      	movs	r1, #2
 8000c96:	480c      	ldr	r0, [pc, #48]	; (8000cc8 <DHT_Check_Response+0x58>)
 8000c98:	f002 f978 	bl	8002f8c <HAL_GPIO_ReadPin>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d002      	beq.n	8000ca8 <DHT_Check_Response+0x38>
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	71fb      	strb	r3, [r7, #7]
 8000ca6:	e001      	b.n	8000cac <DHT_Check_Response+0x3c>
		else Response = -1;
 8000ca8:	23ff      	movs	r3, #255	; 0xff
 8000caa:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 8000cac:	bf00      	nop
 8000cae:	2102      	movs	r1, #2
 8000cb0:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <DHT_Check_Response+0x58>)
 8000cb2:	f002 f96b 	bl	8002f8c <HAL_GPIO_ReadPin>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d1f8      	bne.n	8000cae <DHT_Check_Response+0x3e>

	return Response;
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40010800 	.word	0x40010800

08000ccc <DHT_Read>:

uint8_t DHT_Read (void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	71bb      	strb	r3, [r7, #6]
 8000cd6:	e037      	b.n	8000d48 <DHT_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8000cd8:	bf00      	nop
 8000cda:	2102      	movs	r1, #2
 8000cdc:	481e      	ldr	r0, [pc, #120]	; (8000d58 <DHT_Read+0x8c>)
 8000cde:	f002 f955 	bl	8002f8c <HAL_GPIO_ReadPin>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d0f8      	beq.n	8000cda <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 8000ce8:	2028      	movs	r0, #40	; 0x28
 8000cea:	f7ff ff3b 	bl	8000b64 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 8000cee:	2102      	movs	r1, #2
 8000cf0:	4819      	ldr	r0, [pc, #100]	; (8000d58 <DHT_Read+0x8c>)
 8000cf2:	f002 f94b 	bl	8002f8c <HAL_GPIO_ReadPin>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d10e      	bne.n	8000d1a <DHT_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8000cfc:	79bb      	ldrb	r3, [r7, #6]
 8000cfe:	f1c3 0307 	rsb	r3, r3, #7
 8000d02:	2201      	movs	r2, #1
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	b25b      	sxtb	r3, r3
 8000d0a:	43db      	mvns	r3, r3
 8000d0c:	b25a      	sxtb	r2, r3
 8000d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d12:	4013      	ands	r3, r2
 8000d14:	b25b      	sxtb	r3, r3
 8000d16:	71fb      	strb	r3, [r7, #7]
 8000d18:	e00b      	b.n	8000d32 <DHT_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000d1a:	79bb      	ldrb	r3, [r7, #6]
 8000d1c:	f1c3 0307 	rsb	r3, r3, #7
 8000d20:	2201      	movs	r2, #1
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	b25a      	sxtb	r2, r3
 8000d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	b25b      	sxtb	r3, r3
 8000d30:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 8000d32:	bf00      	nop
 8000d34:	2102      	movs	r1, #2
 8000d36:	4808      	ldr	r0, [pc, #32]	; (8000d58 <DHT_Read+0x8c>)
 8000d38:	f002 f928 	bl	8002f8c <HAL_GPIO_ReadPin>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d1f8      	bne.n	8000d34 <DHT_Read+0x68>
	for (j=0;j<8;j++)
 8000d42:	79bb      	ldrb	r3, [r7, #6]
 8000d44:	3301      	adds	r3, #1
 8000d46:	71bb      	strb	r3, [r7, #6]
 8000d48:	79bb      	ldrb	r3, [r7, #6]
 8000d4a:	2b07      	cmp	r3, #7
 8000d4c:	d9c4      	bls.n	8000cd8 <DHT_Read+0xc>
	}
	return i;
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40010800 	.word	0x40010800

08000d5c <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 8000d64:	f7ff ff5c 	bl	8000c20 <DHT_Start>
	Presence = DHT_Check_Response ();
 8000d68:	f7ff ff82 	bl	8000c70 <DHT_Check_Response>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	461a      	mov	r2, r3
 8000d70:	4b1e      	ldr	r3, [pc, #120]	; (8000dec <DHT_GetData+0x90>)
 8000d72:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 8000d74:	f7ff ffaa 	bl	8000ccc <DHT_Read>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	4b1c      	ldr	r3, [pc, #112]	; (8000df0 <DHT_GetData+0x94>)
 8000d7e:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 8000d80:	f7ff ffa4 	bl	8000ccc <DHT_Read>
 8000d84:	4603      	mov	r3, r0
 8000d86:	461a      	mov	r2, r3
 8000d88:	4b1a      	ldr	r3, [pc, #104]	; (8000df4 <DHT_GetData+0x98>)
 8000d8a:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 8000d8c:	f7ff ff9e 	bl	8000ccc <DHT_Read>
 8000d90:	4603      	mov	r3, r0
 8000d92:	461a      	mov	r2, r3
 8000d94:	4b18      	ldr	r3, [pc, #96]	; (8000df8 <DHT_GetData+0x9c>)
 8000d96:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8000d98:	f7ff ff98 	bl	8000ccc <DHT_Read>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	461a      	mov	r2, r3
 8000da0:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <DHT_GetData+0xa0>)
 8000da2:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 8000da4:	f7ff ff92 	bl	8000ccc <DHT_Read>
 8000da8:	4603      	mov	r3, r0
 8000daa:	b29a      	uxth	r2, r3
 8000dac:	4b14      	ldr	r3, [pc, #80]	; (8000e00 <DHT_GetData+0xa4>)
 8000dae:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 8000db0:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <DHT_GetData+0xa4>)
 8000db2:	881b      	ldrh	r3, [r3, #0]
 8000db4:	4619      	mov	r1, r3
 8000db6:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <DHT_GetData+0x94>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	461a      	mov	r2, r3
 8000dbc:	4b0d      	ldr	r3, [pc, #52]	; (8000df4 <DHT_GetData+0x98>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	4a0d      	ldr	r2, [pc, #52]	; (8000df8 <DHT_GetData+0x9c>)
 8000dc4:	7812      	ldrb	r2, [r2, #0]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	4a0c      	ldr	r2, [pc, #48]	; (8000dfc <DHT_GetData+0xa0>)
 8000dca:	7812      	ldrb	r2, [r2, #0]
 8000dcc:	4413      	add	r3, r2
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	d107      	bne.n	8000de2 <DHT_GetData+0x86>
	{
		#if defined(TYPE_DHT11)
			DHT_Data->Temperature = Temp_byte1;
 8000dd2:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <DHT_GetData+0x9c>)
 8000dd4:	781a      	ldrb	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	701a      	strb	r2, [r3, #0]
			DHT_Data->Humidity = Rh_byte1;
 8000dda:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <DHT_GetData+0x94>)
 8000ddc:	781a      	ldrb	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	705a      	strb	r2, [r3, #1]
		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	2000009a 	.word	0x2000009a
 8000df0:	20000094 	.word	0x20000094
 8000df4:	20000095 	.word	0x20000095
 8000df8:	20000096 	.word	0x20000096
 8000dfc:	20000097 	.word	0x20000097
 8000e00:	20000098 	.word	0x20000098

08000e04 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4a06      	ldr	r2, [pc, #24]	; (8000e2c <vApplicationGetIdleTaskMemory+0x28>)
 8000e14:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	4a05      	ldr	r2, [pc, #20]	; (8000e30 <vApplicationGetIdleTaskMemory+0x2c>)
 8000e1a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2280      	movs	r2, #128	; 0x80
 8000e20:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000e22:	bf00      	nop
 8000e24:	3714      	adds	r7, #20
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc80      	pop	{r7}
 8000e2a:	4770      	bx	lr
 8000e2c:	2000009c 	.word	0x2000009c
 8000e30:	20000150 	.word	0x20000150

08000e34 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af02      	add	r7, sp, #8
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	f023 030f 	bic.w	r3, r3, #15
 8000e44:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	011b      	lsls	r3, r3, #4
 8000e4a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
 8000e4e:	f043 030c 	orr.w	r3, r3, #12
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
 8000e58:	f043 0308 	orr.w	r3, r3, #8
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000e60:	7bbb      	ldrb	r3, [r7, #14]
 8000e62:	f043 030c 	orr.w	r3, r3, #12
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000e6a:	7bbb      	ldrb	r3, [r7, #14]
 8000e6c:	f043 0308 	orr.w	r3, r3, #8
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000e74:	f107 0208 	add.w	r2, r7, #8
 8000e78:	2364      	movs	r3, #100	; 0x64
 8000e7a:	9300      	str	r3, [sp, #0]
 8000e7c:	2304      	movs	r3, #4
 8000e7e:	214e      	movs	r1, #78	; 0x4e
 8000e80:	4803      	ldr	r0, [pc, #12]	; (8000e90 <lcd_send_cmd+0x5c>)
 8000e82:	f002 fa0f 	bl	80032a4 <HAL_I2C_Master_Transmit>
}
 8000e86:	bf00      	nop
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000380 	.word	0x20000380

08000e94 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af02      	add	r7, sp, #8
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	f023 030f 	bic.w	r3, r3, #15
 8000ea4:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	011b      	lsls	r3, r3, #4
 8000eaa:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000eac:	7bfb      	ldrb	r3, [r7, #15]
 8000eae:	f043 030d 	orr.w	r3, r3, #13
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000eb6:	7bfb      	ldrb	r3, [r7, #15]
 8000eb8:	f043 0309 	orr.w	r3, r3, #9
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000ec0:	7bbb      	ldrb	r3, [r7, #14]
 8000ec2:	f043 030d 	orr.w	r3, r3, #13
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000eca:	7bbb      	ldrb	r3, [r7, #14]
 8000ecc:	f043 0309 	orr.w	r3, r3, #9
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000ed4:	f107 0208 	add.w	r2, r7, #8
 8000ed8:	2364      	movs	r3, #100	; 0x64
 8000eda:	9300      	str	r3, [sp, #0]
 8000edc:	2304      	movs	r3, #4
 8000ede:	214e      	movs	r1, #78	; 0x4e
 8000ee0:	4803      	ldr	r0, [pc, #12]	; (8000ef0 <lcd_send_data+0x5c>)
 8000ee2:	f002 f9df 	bl	80032a4 <HAL_I2C_Master_Transmit>
}
 8000ee6:	bf00      	nop
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000380 	.word	0x20000380

08000ef4 <lcd_clear>:

void lcd_clear (void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000efa:	2080      	movs	r0, #128	; 0x80
 8000efc:	f7ff ff9a 	bl	8000e34 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000f00:	2300      	movs	r3, #0
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	e005      	b.n	8000f12 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000f06:	2020      	movs	r0, #32
 8000f08:	f7ff ffc4 	bl	8000e94 <lcd_send_data>
	for (int i=0; i<70; i++)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	607b      	str	r3, [r7, #4]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2b45      	cmp	r3, #69	; 0x45
 8000f16:	ddf6      	ble.n	8000f06 <lcd_clear+0x12>
	}
}
 8000f18:	bf00      	nop
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
 8000f2a:	6039      	str	r1, [r7, #0]
    switch (row)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d003      	beq.n	8000f3a <lcd_put_cur+0x18>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d005      	beq.n	8000f44 <lcd_put_cur+0x22>
 8000f38:	e009      	b.n	8000f4e <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f40:	603b      	str	r3, [r7, #0]
            break;
 8000f42:	e004      	b.n	8000f4e <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000f4a:	603b      	str	r3, [r7, #0]
            break;
 8000f4c:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff ff6e 	bl	8000e34 <lcd_send_cmd>
}
 8000f58:	bf00      	nop
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <lcd_init>:


void lcd_init (void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000f64:	2032      	movs	r0, #50	; 0x32
 8000f66:	f001 f853 	bl	8002010 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000f6a:	2030      	movs	r0, #48	; 0x30
 8000f6c:	f7ff ff62 	bl	8000e34 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000f70:	2005      	movs	r0, #5
 8000f72:	f001 f84d 	bl	8002010 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000f76:	2030      	movs	r0, #48	; 0x30
 8000f78:	f7ff ff5c 	bl	8000e34 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	f001 f847 	bl	8002010 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000f82:	2030      	movs	r0, #48	; 0x30
 8000f84:	f7ff ff56 	bl	8000e34 <lcd_send_cmd>
	HAL_Delay(10);
 8000f88:	200a      	movs	r0, #10
 8000f8a:	f001 f841 	bl	8002010 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000f8e:	2020      	movs	r0, #32
 8000f90:	f7ff ff50 	bl	8000e34 <lcd_send_cmd>
	HAL_Delay(10);
 8000f94:	200a      	movs	r0, #10
 8000f96:	f001 f83b 	bl	8002010 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000f9a:	2028      	movs	r0, #40	; 0x28
 8000f9c:	f7ff ff4a 	bl	8000e34 <lcd_send_cmd>
	HAL_Delay(1);
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	f001 f835 	bl	8002010 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000fa6:	2008      	movs	r0, #8
 8000fa8:	f7ff ff44 	bl	8000e34 <lcd_send_cmd>
	HAL_Delay(1);
 8000fac:	2001      	movs	r0, #1
 8000fae:	f001 f82f 	bl	8002010 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	f7ff ff3e 	bl	8000e34 <lcd_send_cmd>
	HAL_Delay(1);
 8000fb8:	2001      	movs	r0, #1
 8000fba:	f001 f829 	bl	8002010 <HAL_Delay>
	HAL_Delay(1);
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	f001 f826 	bl	8002010 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000fc4:	2006      	movs	r0, #6
 8000fc6:	f7ff ff35 	bl	8000e34 <lcd_send_cmd>
	HAL_Delay(1);
 8000fca:	2001      	movs	r0, #1
 8000fcc:	f001 f820 	bl	8002010 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000fd0:	200c      	movs	r0, #12
 8000fd2:	f7ff ff2f 	bl	8000e34 <lcd_send_cmd>
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b082      	sub	sp, #8
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000fe2:	e006      	b.n	8000ff2 <lcd_send_string+0x18>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	1c5a      	adds	r2, r3, #1
 8000fe8:	607a      	str	r2, [r7, #4]
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff51 	bl	8000e94 <lcd_send_data>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d1f4      	bne.n	8000fe4 <lcd_send_string+0xa>
}
 8000ffa:	bf00      	nop
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001004:	b5b0      	push	{r4, r5, r7, lr}
 8001006:	b094      	sub	sp, #80	; 0x50
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800100a:	f000 ff9f 	bl	8001f4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800100e:	f000 f867 	bl	80010e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001012:	f000 f9a1 	bl	8001358 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001016:	f000 f8fb 	bl	8001210 <MX_I2C1_Init>
  MX_TIM2_Init();
 800101a:	f000 f927 	bl	800126c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800101e:	f000 f971 	bl	8001304 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001022:	f000 f8b7 	bl	8001194 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
   lcd_init();
 8001026:	f7ff ff9b 	bl	8000f60 <lcd_init>
   HAL_UART_Receive_IT(&huart1, (uint8_t*) &t[2], 18);
 800102a:	2212      	movs	r2, #18
 800102c:	4923      	ldr	r1, [pc, #140]	; (80010bc <main+0xb8>)
 800102e:	4824      	ldr	r0, [pc, #144]	; (80010c0 <main+0xbc>)
 8001030:	f003 fd87 	bl	8004b42 <HAL_UART_Receive_IT>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of semaphore_uart */
  osSemaphoreDef(semaphore_uart);
 8001034:	2300      	movs	r3, #0
 8001036:	64bb      	str	r3, [r7, #72]	; 0x48
 8001038:	2300      	movs	r3, #0
 800103a:	64fb      	str	r3, [r7, #76]	; 0x4c
  semaphore_uartHandle = osSemaphoreCreate(osSemaphore(semaphore_uart), 1);
 800103c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001040:	2101      	movs	r1, #1
 8001042:	4618      	mov	r0, r3
 8001044:	f004 fa67 	bl	8005516 <osSemaphoreCreate>
 8001048:	4603      	mov	r3, r0
 800104a:	4a1e      	ldr	r2, [pc, #120]	; (80010c4 <main+0xc0>)
 800104c:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of queue_exit */
  osMessageQDef(queue_exit, 3, uint16_t);
 800104e:	4b1e      	ldr	r3, [pc, #120]	; (80010c8 <main+0xc4>)
 8001050:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001054:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001056:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  queue_exitHandle = osMessageCreate(osMessageQ(queue_exit), NULL);
 800105a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800105e:	2100      	movs	r1, #0
 8001060:	4618      	mov	r0, r3
 8001062:	f004 fb0f 	bl	8005684 <osMessageCreate>
 8001066:	4603      	mov	r3, r0
 8001068:	4a18      	ldr	r2, [pc, #96]	; (80010cc <main+0xc8>)
 800106a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task_ConTrol */
  osThreadDef(Task_ConTrol, Task_control, osPriorityNormal, 0, 512);
 800106c:	4b18      	ldr	r3, [pc, #96]	; (80010d0 <main+0xcc>)
 800106e:	f107 041c 	add.w	r4, r7, #28
 8001072:	461d      	mov	r5, r3
 8001074:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001076:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001078:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800107c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_ConTrolHandle = osThreadCreate(osThread(Task_ConTrol), NULL);
 8001080:	f107 031c 	add.w	r3, r7, #28
 8001084:	2100      	movs	r1, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f004 f9e5 	bl	8005456 <osThreadCreate>
 800108c:	4603      	mov	r3, r0
 800108e:	4a11      	ldr	r2, [pc, #68]	; (80010d4 <main+0xd0>)
 8001090:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_GetData */
  osThreadDef(Task_GetData, Task_getdata, osPriorityAboveNormal, 0, 512);
 8001092:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <main+0xd4>)
 8001094:	463c      	mov	r4, r7
 8001096:	461d      	mov	r5, r3
 8001098:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800109a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800109c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_GetDataHandle = osThreadCreate(osThread(Task_GetData), NULL);
 80010a4:	463b      	mov	r3, r7
 80010a6:	2100      	movs	r1, #0
 80010a8:	4618      	mov	r0, r3
 80010aa:	f004 f9d4 	bl	8005456 <osThreadCreate>
 80010ae:	4603      	mov	r3, r0
 80010b0:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <main+0xd8>)
 80010b2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80010b4:	f004 f9c8 	bl	8005448 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010b8:	e7fe      	b.n	80010b8 <main+0xb4>
 80010ba:	bf00      	nop
 80010bc:	20000472 	.word	0x20000472
 80010c0:	2000041c 	.word	0x2000041c
 80010c4:	2000046c 	.word	0x2000046c
 80010c8:	080086cc 	.word	0x080086cc
 80010cc:	20000468 	.word	0x20000468
 80010d0:	080086dc 	.word	0x080086dc
 80010d4:	20000460 	.word	0x20000460
 80010d8:	080086f8 	.word	0x080086f8
 80010dc:	20000464 	.word	0x20000464

080010e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b094      	sub	sp, #80	; 0x50
 80010e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010ea:	2228      	movs	r2, #40	; 0x28
 80010ec:	2100      	movs	r1, #0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f006 fd5a 	bl	8007ba8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001110:	2301      	movs	r3, #1
 8001112:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001114:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001118:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800111a:	2300      	movs	r3, #0
 800111c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800111e:	2301      	movs	r3, #1
 8001120:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001122:	2302      	movs	r3, #2
 8001124:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001126:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800112a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800112c:	2300      	movs	r3, #0
 800112e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001130:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001134:	4618      	mov	r0, r3
 8001136:	f002 fbbb 	bl	80038b0 <HAL_RCC_OscConfig>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001140:	f000 fd42 	bl	8001bc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001144:	230f      	movs	r3, #15
 8001146:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001148:	2302      	movs	r3, #2
 800114a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800114c:	2300      	movs	r3, #0
 800114e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001150:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001154:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001156:	2300      	movs	r3, #0
 8001158:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800115a:	f107 0314 	add.w	r3, r7, #20
 800115e:	2100      	movs	r1, #0
 8001160:	4618      	mov	r0, r3
 8001162:	f002 fe27 	bl	8003db4 <HAL_RCC_ClockConfig>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800116c:	f000 fd2c 	bl	8001bc8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001170:	2302      	movs	r3, #2
 8001172:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001174:	2300      	movs	r3, #0
 8001176:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	4618      	mov	r0, r3
 800117c:	f002 ffb2 	bl	80040e4 <HAL_RCCEx_PeriphCLKConfig>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001186:	f000 fd1f 	bl	8001bc8 <Error_Handler>
  }
}
 800118a:	bf00      	nop
 800118c:	3750      	adds	r7, #80	; 0x50
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011a4:	4b18      	ldr	r3, [pc, #96]	; (8001208 <MX_ADC1_Init+0x74>)
 80011a6:	4a19      	ldr	r2, [pc, #100]	; (800120c <MX_ADC1_Init+0x78>)
 80011a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011aa:	4b17      	ldr	r3, [pc, #92]	; (8001208 <MX_ADC1_Init+0x74>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011b0:	4b15      	ldr	r3, [pc, #84]	; (8001208 <MX_ADC1_Init+0x74>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011b6:	4b14      	ldr	r3, [pc, #80]	; (8001208 <MX_ADC1_Init+0x74>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <MX_ADC1_Init+0x74>)
 80011be:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80011c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011c4:	4b10      	ldr	r3, [pc, #64]	; (8001208 <MX_ADC1_Init+0x74>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80011ca:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <MX_ADC1_Init+0x74>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011d0:	480d      	ldr	r0, [pc, #52]	; (8001208 <MX_ADC1_Init+0x74>)
 80011d2:	f000 ff41 	bl	8002058 <HAL_ADC_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80011dc:	f000 fcf4 	bl	8001bc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011e4:	2301      	movs	r3, #1
 80011e6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	4619      	mov	r1, r3
 80011f0:	4805      	ldr	r0, [pc, #20]	; (8001208 <MX_ADC1_Init+0x74>)
 80011f2:	f001 f9f5 	bl	80025e0 <HAL_ADC_ConfigChannel>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80011fc:	f000 fce4 	bl	8001bc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001200:	bf00      	nop
 8001202:	3710      	adds	r7, #16
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000350 	.word	0x20000350
 800120c:	40012400 	.word	0x40012400

08001210 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001214:	4b12      	ldr	r3, [pc, #72]	; (8001260 <MX_I2C1_Init+0x50>)
 8001216:	4a13      	ldr	r2, [pc, #76]	; (8001264 <MX_I2C1_Init+0x54>)
 8001218:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800121a:	4b11      	ldr	r3, [pc, #68]	; (8001260 <MX_I2C1_Init+0x50>)
 800121c:	4a12      	ldr	r2, [pc, #72]	; (8001268 <MX_I2C1_Init+0x58>)
 800121e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001220:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <MX_I2C1_Init+0x50>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001226:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <MX_I2C1_Init+0x50>)
 8001228:	2200      	movs	r2, #0
 800122a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <MX_I2C1_Init+0x50>)
 800122e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001232:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001234:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <MX_I2C1_Init+0x50>)
 8001236:	2200      	movs	r2, #0
 8001238:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800123a:	4b09      	ldr	r3, [pc, #36]	; (8001260 <MX_I2C1_Init+0x50>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001240:	4b07      	ldr	r3, [pc, #28]	; (8001260 <MX_I2C1_Init+0x50>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001246:	4b06      	ldr	r3, [pc, #24]	; (8001260 <MX_I2C1_Init+0x50>)
 8001248:	2200      	movs	r2, #0
 800124a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800124c:	4804      	ldr	r0, [pc, #16]	; (8001260 <MX_I2C1_Init+0x50>)
 800124e:	f001 fee5 	bl	800301c <HAL_I2C_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001258:	f000 fcb6 	bl	8001bc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000380 	.word	0x20000380
 8001264:	40005400 	.word	0x40005400
 8001268:	000186a0 	.word	0x000186a0

0800126c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001272:	f107 0308 	add.w	r3, r7, #8
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001280:	463b      	mov	r3, r7
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001288:	4b1d      	ldr	r3, [pc, #116]	; (8001300 <MX_TIM2_Init+0x94>)
 800128a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800128e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8001290:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <MX_TIM2_Init+0x94>)
 8001292:	220f      	movs	r2, #15
 8001294:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001296:	4b1a      	ldr	r3, [pc, #104]	; (8001300 <MX_TIM2_Init+0x94>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800129c:	4b18      	ldr	r3, [pc, #96]	; (8001300 <MX_TIM2_Init+0x94>)
 800129e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a4:	4b16      	ldr	r3, [pc, #88]	; (8001300 <MX_TIM2_Init+0x94>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012aa:	4b15      	ldr	r3, [pc, #84]	; (8001300 <MX_TIM2_Init+0x94>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012b0:	4813      	ldr	r0, [pc, #76]	; (8001300 <MX_TIM2_Init+0x94>)
 80012b2:	f003 f88d 	bl	80043d0 <HAL_TIM_Base_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80012bc:	f000 fc84 	bl	8001bc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012c6:	f107 0308 	add.w	r3, r7, #8
 80012ca:	4619      	mov	r1, r3
 80012cc:	480c      	ldr	r0, [pc, #48]	; (8001300 <MX_TIM2_Init+0x94>)
 80012ce:	f003 f93f 	bl	8004550 <HAL_TIM_ConfigClockSource>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80012d8:	f000 fc76 	bl	8001bc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012dc:	2300      	movs	r3, #0
 80012de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e0:	2300      	movs	r3, #0
 80012e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012e4:	463b      	mov	r3, r7
 80012e6:	4619      	mov	r1, r3
 80012e8:	4805      	ldr	r0, [pc, #20]	; (8001300 <MX_TIM2_Init+0x94>)
 80012ea:	f003 faed 	bl	80048c8 <HAL_TIMEx_MasterConfigSynchronization>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80012f4:	f000 fc68 	bl	8001bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012f8:	bf00      	nop
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	200003d4 	.word	0x200003d4

08001304 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001308:	4b11      	ldr	r3, [pc, #68]	; (8001350 <MX_USART1_UART_Init+0x4c>)
 800130a:	4a12      	ldr	r2, [pc, #72]	; (8001354 <MX_USART1_UART_Init+0x50>)
 800130c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800130e:	4b10      	ldr	r3, [pc, #64]	; (8001350 <MX_USART1_UART_Init+0x4c>)
 8001310:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001314:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <MX_USART1_UART_Init+0x4c>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <MX_USART1_UART_Init+0x4c>)
 800131e:	2200      	movs	r2, #0
 8001320:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001322:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <MX_USART1_UART_Init+0x4c>)
 8001324:	2200      	movs	r2, #0
 8001326:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001328:	4b09      	ldr	r3, [pc, #36]	; (8001350 <MX_USART1_UART_Init+0x4c>)
 800132a:	220c      	movs	r2, #12
 800132c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132e:	4b08      	ldr	r3, [pc, #32]	; (8001350 <MX_USART1_UART_Init+0x4c>)
 8001330:	2200      	movs	r2, #0
 8001332:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001334:	4b06      	ldr	r3, [pc, #24]	; (8001350 <MX_USART1_UART_Init+0x4c>)
 8001336:	2200      	movs	r2, #0
 8001338:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800133a:	4805      	ldr	r0, [pc, #20]	; (8001350 <MX_USART1_UART_Init+0x4c>)
 800133c:	f003 fb22 	bl	8004984 <HAL_UART_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001346:	f000 fc3f 	bl	8001bc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	2000041c 	.word	0x2000041c
 8001354:	40013800 	.word	0x40013800

08001358 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b088      	sub	sp, #32
 800135c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135e:	f107 0310 	add.w	r3, r7, #16
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800136c:	4b2b      	ldr	r3, [pc, #172]	; (800141c <MX_GPIO_Init+0xc4>)
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	4a2a      	ldr	r2, [pc, #168]	; (800141c <MX_GPIO_Init+0xc4>)
 8001372:	f043 0320 	orr.w	r3, r3, #32
 8001376:	6193      	str	r3, [r2, #24]
 8001378:	4b28      	ldr	r3, [pc, #160]	; (800141c <MX_GPIO_Init+0xc4>)
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	f003 0320 	and.w	r3, r3, #32
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001384:	4b25      	ldr	r3, [pc, #148]	; (800141c <MX_GPIO_Init+0xc4>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	4a24      	ldr	r2, [pc, #144]	; (800141c <MX_GPIO_Init+0xc4>)
 800138a:	f043 0304 	orr.w	r3, r3, #4
 800138e:	6193      	str	r3, [r2, #24]
 8001390:	4b22      	ldr	r3, [pc, #136]	; (800141c <MX_GPIO_Init+0xc4>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	f003 0304 	and.w	r3, r3, #4
 8001398:	60bb      	str	r3, [r7, #8]
 800139a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800139c:	4b1f      	ldr	r3, [pc, #124]	; (800141c <MX_GPIO_Init+0xc4>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	4a1e      	ldr	r2, [pc, #120]	; (800141c <MX_GPIO_Init+0xc4>)
 80013a2:	f043 0308 	orr.w	r3, r3, #8
 80013a6:	6193      	str	r3, [r2, #24]
 80013a8:	4b1c      	ldr	r3, [pc, #112]	; (800141c <MX_GPIO_Init+0xc4>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	f003 0308 	and.w	r3, r3, #8
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80013b4:	2201      	movs	r2, #1
 80013b6:	2102      	movs	r1, #2
 80013b8:	4819      	ldr	r0, [pc, #100]	; (8001420 <MX_GPIO_Init+0xc8>)
 80013ba:	f001 fdfe 	bl	8002fba <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013be:	2302      	movs	r3, #2
 80013c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c2:	2301      	movs	r3, #1
 80013c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ca:	2302      	movs	r3, #2
 80013cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ce:	f107 0310 	add.w	r3, r7, #16
 80013d2:	4619      	mov	r1, r3
 80013d4:	4812      	ldr	r0, [pc, #72]	; (8001420 <MX_GPIO_Init+0xc8>)
 80013d6:	f001 fc55 	bl	8002c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013da:	230c      	movs	r3, #12
 80013dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013de:	4b11      	ldr	r3, [pc, #68]	; (8001424 <MX_GPIO_Init+0xcc>)
 80013e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013e2:	2301      	movs	r3, #1
 80013e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e6:	f107 0310 	add.w	r3, r7, #16
 80013ea:	4619      	mov	r1, r3
 80013ec:	480c      	ldr	r0, [pc, #48]	; (8001420 <MX_GPIO_Init+0xc8>)
 80013ee:	f001 fc49 	bl	8002c84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2105      	movs	r1, #5
 80013f6:	2008      	movs	r0, #8
 80013f8:	f001 fb5d 	bl	8002ab6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80013fc:	2008      	movs	r0, #8
 80013fe:	f001 fb76 	bl	8002aee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8001402:	2200      	movs	r2, #0
 8001404:	2105      	movs	r1, #5
 8001406:	2009      	movs	r0, #9
 8001408:	f001 fb55 	bl	8002ab6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800140c:	2009      	movs	r0, #9
 800140e:	f001 fb6e 	bl	8002aee <HAL_NVIC_EnableIRQ>

}
 8001412:	bf00      	nop
 8001414:	3720      	adds	r7, #32
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40021000 	.word	0x40021000
 8001420:	40010800 	.word	0x40010800
 8001424:	10210000 	.word	0x10210000

08001428 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
/*Hàm này sẽ được g�?i khi có dữ liệu từ máy tính gửi xuống
 * */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, (uint8_t*) &t[2], 18);// �?ăng kí nơi lưu dữ liệu từ máy tính gửi xuống
 8001430:	2212      	movs	r2, #18
 8001432:	4910      	ldr	r1, [pc, #64]	; (8001474 <HAL_UART_RxCpltCallback+0x4c>)
 8001434:	4810      	ldr	r0, [pc, #64]	; (8001478 <HAL_UART_RxCpltCallback+0x50>)
 8001436:	f003 fb84 	bl	8004b42 <HAL_UART_Receive_IT>
	strncpy(data_storage,"",20);						// xóa nơi lưu trữ để nhận dữ liệu mới
 800143a:	2214      	movs	r2, #20
 800143c:	490f      	ldr	r1, [pc, #60]	; (800147c <HAL_UART_RxCpltCallback+0x54>)
 800143e:	4810      	ldr	r0, [pc, #64]	; (8001480 <HAL_UART_RxCpltCallback+0x58>)
 8001440:	f006 fce8 	bl	8007e14 <strncpy>
	strncpy(data_storage,&t[2],strlen(&t[2])-2);		// xóa nơi lưu trữ để nhận dữ liệu mới
 8001444:	480b      	ldr	r0, [pc, #44]	; (8001474 <HAL_UART_RxCpltCallback+0x4c>)
 8001446:	f7fe fe8d 	bl	8000164 <strlen>
 800144a:	4603      	mov	r3, r0
 800144c:	3b02      	subs	r3, #2
 800144e:	461a      	mov	r2, r3
 8001450:	4908      	ldr	r1, [pc, #32]	; (8001474 <HAL_UART_RxCpltCallback+0x4c>)
 8001452:	480b      	ldr	r0, [pc, #44]	; (8001480 <HAL_UART_RxCpltCallback+0x58>)
 8001454:	f006 fcde 	bl	8007e14 <strncpy>
	strncpy(t,"",20);									// xóa nơi lưu trữ ban đầu để chuẩn bị nhận dữ liệu tiếp theo
 8001458:	2214      	movs	r2, #20
 800145a:	4908      	ldr	r1, [pc, #32]	; (800147c <HAL_UART_RxCpltCallback+0x54>)
 800145c:	4809      	ldr	r0, [pc, #36]	; (8001484 <HAL_UART_RxCpltCallback+0x5c>)
 800145e:	f006 fcd9 	bl	8007e14 <strncpy>
	osSemaphoreRelease (semaphore_uartHandle);// giải phóng semaphore
 8001462:	4b09      	ldr	r3, [pc, #36]	; (8001488 <HAL_UART_RxCpltCallback+0x60>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4618      	mov	r0, r3
 8001468:	f004 f8d6 	bl	8005618 <osSemaphoreRelease>
}
 800146c:	bf00      	nop
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000472 	.word	0x20000472
 8001478:	2000041c 	.word	0x2000041c
 800147c:	08008714 	.word	0x08008714
 8001480:	20000484 	.word	0x20000484
 8001484:	20000470 	.word	0x20000470
 8001488:	2000046c 	.word	0x2000046c

0800148c <HAL_GPIO_EXTI_Callback>:
/*Hàm này sẽ được g�?i khi có ngắt ngoài xảy ra */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_3)				//Nếu là ngắt ngoài 3 thì ta sẽ đổi mode
 8001496:	88fb      	ldrh	r3, [r7, #6]
 8001498:	2b08      	cmp	r3, #8
 800149a:	d120      	bne.n	80014de <HAL_GPIO_EXTI_Callback+0x52>
	{
		current_Time=HAL_GetTick();
 800149c:	f000 fdae 	bl	8001ffc <HAL_GetTick>
 80014a0:	4603      	mov	r3, r0
 80014a2:	461a      	mov	r2, r3
 80014a4:	4b22      	ldr	r3, [pc, #136]	; (8001530 <HAL_GPIO_EXTI_Callback+0xa4>)
 80014a6:	601a      	str	r2, [r3, #0]
		if(current_Time-last_Time>300)		// �?ảm bảo giữa 2 lần ngắt là 300ms nhằm chống dội phím
 80014a8:	4b21      	ldr	r3, [pc, #132]	; (8001530 <HAL_GPIO_EXTI_Callback+0xa4>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	4b21      	ldr	r3, [pc, #132]	; (8001534 <HAL_GPIO_EXTI_Callback+0xa8>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80014b6:	dd0e      	ble.n	80014d6 <HAL_GPIO_EXTI_Callback+0x4a>
		{
			if(mode==1)
 80014b8:	4b1f      	ldr	r3, [pc, #124]	; (8001538 <HAL_GPIO_EXTI_Callback+0xac>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d106      	bne.n	80014d0 <HAL_GPIO_EXTI_Callback+0x44>
			{
				mode=2;
 80014c2:	4b1d      	ldr	r3, [pc, #116]	; (8001538 <HAL_GPIO_EXTI_Callback+0xac>)
 80014c4:	2202      	movs	r2, #2
 80014c6:	701a      	strb	r2, [r3, #0]
				flag=1;
 80014c8:	4b1c      	ldr	r3, [pc, #112]	; (800153c <HAL_GPIO_EXTI_Callback+0xb0>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	701a      	strb	r2, [r3, #0]
 80014ce:	e002      	b.n	80014d6 <HAL_GPIO_EXTI_Callback+0x4a>
			}
			else
				mode=1;
 80014d0:	4b19      	ldr	r3, [pc, #100]	; (8001538 <HAL_GPIO_EXTI_Callback+0xac>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	701a      	strb	r2, [r3, #0]
		}
		last_Time=current_Time;
 80014d6:	4b16      	ldr	r3, [pc, #88]	; (8001530 <HAL_GPIO_EXTI_Callback+0xa4>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a16      	ldr	r2, [pc, #88]	; (8001534 <HAL_GPIO_EXTI_Callback+0xa8>)
 80014dc:	6013      	str	r3, [r2, #0]
	}
	if(GPIO_Pin==GPIO_PIN_2)			// Nếu là ngắt ngoài 2 thì ta sẽ tăng chu kì lên 1
 80014de:	88fb      	ldrh	r3, [r7, #6]
 80014e0:	2b04      	cmp	r3, #4
 80014e2:	d11d      	bne.n	8001520 <HAL_GPIO_EXTI_Callback+0x94>
	{
		current_Time=HAL_GetTick();
 80014e4:	f000 fd8a 	bl	8001ffc <HAL_GetTick>
 80014e8:	4603      	mov	r3, r0
 80014ea:	461a      	mov	r2, r3
 80014ec:	4b10      	ldr	r3, [pc, #64]	; (8001530 <HAL_GPIO_EXTI_Callback+0xa4>)
 80014ee:	601a      	str	r2, [r3, #0]
		if((current_Time-last_Time>300)&&(mode==1))  // ch�? 300ms để chống nhiễu và phải ở chế độ 1
 80014f0:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <HAL_GPIO_EXTI_Callback+0xa4>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <HAL_GPIO_EXTI_Callback+0xa8>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80014fe:	dd0b      	ble.n	8001518 <HAL_GPIO_EXTI_Callback+0x8c>
 8001500:	4b0d      	ldr	r3, [pc, #52]	; (8001538 <HAL_GPIO_EXTI_Callback+0xac>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b01      	cmp	r3, #1
 8001508:	d106      	bne.n	8001518 <HAL_GPIO_EXTI_Callback+0x8c>
		{
			cycle=cycle+1;
 800150a:	4b0d      	ldr	r3, [pc, #52]	; (8001540 <HAL_GPIO_EXTI_Callback+0xb4>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	b2db      	uxtb	r3, r3
 8001510:	3301      	adds	r3, #1
 8001512:	b2da      	uxtb	r2, r3
 8001514:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <HAL_GPIO_EXTI_Callback+0xb4>)
 8001516:	701a      	strb	r2, [r3, #0]
		}
		last_Time=current_Time;
 8001518:	4b05      	ldr	r3, [pc, #20]	; (8001530 <HAL_GPIO_EXTI_Callback+0xa4>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a05      	ldr	r2, [pc, #20]	; (8001534 <HAL_GPIO_EXTI_Callback+0xa8>)
 800151e:	6013      	str	r3, [r2, #0]
	}
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);  /// xóa c�? báo ngắt
 8001520:	4a08      	ldr	r2, [pc, #32]	; (8001544 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001522:	88fb      	ldrh	r3, [r7, #6]
 8001524:	6153      	str	r3, [r2, #20]
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	200004a8 	.word	0x200004a8
 8001534:	200004ac 	.word	0x200004ac
 8001538:	20000000 	.word	0x20000000
 800153c:	20000003 	.word	0x20000003
 8001540:	20000002 	.word	0x20000002
 8001544:	40010400 	.word	0x40010400

08001548 <display_mode_1>:
void display_mode_1(DHT_DataTypedef data, int dientro) // Hàm hiển thị dữ liệu ở chế độ 1, tham số truy�?n vào là 1 struct có chứa nhiệt đ�?, độ ẩm
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08c      	sub	sp, #48	; 0x30
 800154c:	af00      	add	r7, sp, #0
 800154e:	80b8      	strh	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
	char row_1[18], row_2[16];

	lcd_put_cur(0,0);
 8001552:	2100      	movs	r1, #0
 8001554:	2000      	movs	r0, #0
 8001556:	f7ff fce4 	bl	8000f22 <lcd_put_cur>
	strcpy(row_1,"Mode:1");
 800155a:	f107 031c 	add.w	r3, r7, #28
 800155e:	4a2d      	ldr	r2, [pc, #180]	; (8001614 <display_mode_1+0xcc>)
 8001560:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001564:	6018      	str	r0, [r3, #0]
 8001566:	3304      	adds	r3, #4
 8001568:	8019      	strh	r1, [r3, #0]
 800156a:	3302      	adds	r3, #2
 800156c:	0c0a      	lsrs	r2, r1, #16
 800156e:	701a      	strb	r2, [r3, #0]
	strcpy(&row_1[6]," T");  // copy chuỗi vào mảng
 8001570:	f107 031c 	add.w	r3, r7, #28
 8001574:	3306      	adds	r3, #6
 8001576:	4a28      	ldr	r2, [pc, #160]	; (8001618 <display_mode_1+0xd0>)
 8001578:	8811      	ldrh	r1, [r2, #0]
 800157a:	7892      	ldrb	r2, [r2, #2]
 800157c:	8019      	strh	r1, [r3, #0]
 800157e:	709a      	strb	r2, [r3, #2]
	sprintf(&row_1[8],"%d",cycle);  // hàm chuyển đổi số sang chuỗi
 8001580:	4b26      	ldr	r3, [pc, #152]	; (800161c <display_mode_1+0xd4>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	b2db      	uxtb	r3, r3
 8001586:	461a      	mov	r2, r3
 8001588:	f107 031c 	add.w	r3, r7, #28
 800158c:	3308      	adds	r3, #8
 800158e:	4924      	ldr	r1, [pc, #144]	; (8001620 <display_mode_1+0xd8>)
 8001590:	4618      	mov	r0, r3
 8001592:	f006 fc1f 	bl	8007dd4 <siprintf>
	strcpy(&row_1[9]," DT");
 8001596:	f107 031c 	add.w	r3, r7, #28
 800159a:	3309      	adds	r3, #9
 800159c:	4a21      	ldr	r2, [pc, #132]	; (8001624 <display_mode_1+0xdc>)
 800159e:	6810      	ldr	r0, [r2, #0]
 80015a0:	6018      	str	r0, [r3, #0]
	sprintf(&row_1[12],"%d",dientro);
 80015a2:	f107 031c 	add.w	r3, r7, #28
 80015a6:	330c      	adds	r3, #12
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	491d      	ldr	r1, [pc, #116]	; (8001620 <display_mode_1+0xd8>)
 80015ac:	4618      	mov	r0, r3
 80015ae:	f006 fc11 	bl	8007dd4 <siprintf>
	lcd_send_string(row_1);      // hàm hiển thị ra LCD
 80015b2:	f107 031c 	add.w	r3, r7, #28
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff fd0f 	bl	8000fda <lcd_send_string>

	lcd_put_cur(1,0);
 80015bc:	2100      	movs	r1, #0
 80015be:	2001      	movs	r0, #1
 80015c0:	f7ff fcaf 	bl	8000f22 <lcd_put_cur>
	strcpy(row_2,"ND:");
 80015c4:	f107 030c 	add.w	r3, r7, #12
 80015c8:	4a17      	ldr	r2, [pc, #92]	; (8001628 <display_mode_1+0xe0>)
 80015ca:	601a      	str	r2, [r3, #0]
	sprintf(&row_2[3],"%d",data.Temperature);
 80015cc:	793b      	ldrb	r3, [r7, #4]
 80015ce:	461a      	mov	r2, r3
 80015d0:	f107 030c 	add.w	r3, r7, #12
 80015d4:	3303      	adds	r3, #3
 80015d6:	4912      	ldr	r1, [pc, #72]	; (8001620 <display_mode_1+0xd8>)
 80015d8:	4618      	mov	r0, r3
 80015da:	f006 fbfb 	bl	8007dd4 <siprintf>
	strcpy(&row_2[5]," DA:");
 80015de:	f107 030c 	add.w	r3, r7, #12
 80015e2:	3305      	adds	r3, #5
 80015e4:	4a11      	ldr	r2, [pc, #68]	; (800162c <display_mode_1+0xe4>)
 80015e6:	6810      	ldr	r0, [r2, #0]
 80015e8:	6018      	str	r0, [r3, #0]
 80015ea:	7912      	ldrb	r2, [r2, #4]
 80015ec:	711a      	strb	r2, [r3, #4]
	sprintf(&row_2[9],"%d",data.Humidity);
 80015ee:	797b      	ldrb	r3, [r7, #5]
 80015f0:	461a      	mov	r2, r3
 80015f2:	f107 030c 	add.w	r3, r7, #12
 80015f6:	3309      	adds	r3, #9
 80015f8:	4909      	ldr	r1, [pc, #36]	; (8001620 <display_mode_1+0xd8>)
 80015fa:	4618      	mov	r0, r3
 80015fc:	f006 fbea 	bl	8007dd4 <siprintf>
	lcd_send_string(row_2);
 8001600:	f107 030c 	add.w	r3, r7, #12
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff fce8 	bl	8000fda <lcd_send_string>
}
 800160a:	bf00      	nop
 800160c:	3730      	adds	r7, #48	; 0x30
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	08008718 	.word	0x08008718
 8001618:	08008720 	.word	0x08008720
 800161c:	20000002 	.word	0x20000002
 8001620:	08008724 	.word	0x08008724
 8001624:	08008728 	.word	0x08008728
 8001628:	003a444e 	.word	0x003a444e
 800162c:	0800872c 	.word	0x0800872c

08001630 <display_mode_2>:
void display_mode_2(DHT_DataTypedef data, int dientro)// // Hàm hiển thị dữ liệu ở chế độ 2, tham số truy�?n vào là 1 struct có chứa nhiệt đ�?, độ ẩm
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	80b8      	strh	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
	char row_2[9];
	lcd_clear();
 800163a:	f7ff fc5b 	bl	8000ef4 <lcd_clear>
	lcd_put_cur(0,0);
 800163e:	2100      	movs	r1, #0
 8001640:	2000      	movs	r0, #0
 8001642:	f7ff fc6e 	bl	8000f22 <lcd_put_cur>
	lcd_send_string("Mode:2");
 8001646:	482b      	ldr	r0, [pc, #172]	; (80016f4 <display_mode_2+0xc4>)
 8001648:	f7ff fcc7 	bl	8000fda <lcd_send_string>
	if(para==1)// nếu yêu cầu nhiệt độ sẽ hiển thị nhiệt độ
 800164c:	4b2a      	ldr	r3, [pc, #168]	; (80016f8 <display_mode_2+0xc8>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b01      	cmp	r3, #1
 8001654:	d115      	bne.n	8001682 <display_mode_2+0x52>
	{
		lcd_put_cur(1,0);
 8001656:	2100      	movs	r1, #0
 8001658:	2001      	movs	r0, #1
 800165a:	f7ff fc62 	bl	8000f22 <lcd_put_cur>
		strcpy(row_2,"ND:");
 800165e:	f107 030c 	add.w	r3, r7, #12
 8001662:	4a26      	ldr	r2, [pc, #152]	; (80016fc <display_mode_2+0xcc>)
 8001664:	601a      	str	r2, [r3, #0]
		sprintf(&row_2[3],"%d",data.Temperature);
 8001666:	793b      	ldrb	r3, [r7, #4]
 8001668:	461a      	mov	r2, r3
 800166a:	f107 030c 	add.w	r3, r7, #12
 800166e:	3303      	adds	r3, #3
 8001670:	4923      	ldr	r1, [pc, #140]	; (8001700 <display_mode_2+0xd0>)
 8001672:	4618      	mov	r0, r3
 8001674:	f006 fbae 	bl	8007dd4 <siprintf>
		lcd_send_string(row_2);
 8001678:	f107 030c 	add.w	r3, r7, #12
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff fcac 	bl	8000fda <lcd_send_string>
	}
	if(para==2)// nếu yêu cầu độ ẩm sẽ hiển thị độ ẩm
 8001682:	4b1d      	ldr	r3, [pc, #116]	; (80016f8 <display_mode_2+0xc8>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d115      	bne.n	80016b8 <display_mode_2+0x88>
	{
		lcd_put_cur(1,0);
 800168c:	2100      	movs	r1, #0
 800168e:	2001      	movs	r0, #1
 8001690:	f7ff fc47 	bl	8000f22 <lcd_put_cur>
		strcpy(row_2,"DA:");
 8001694:	f107 030c 	add.w	r3, r7, #12
 8001698:	4a1a      	ldr	r2, [pc, #104]	; (8001704 <display_mode_2+0xd4>)
 800169a:	601a      	str	r2, [r3, #0]
		sprintf(&row_2[3],"%d",data.Humidity);
 800169c:	797b      	ldrb	r3, [r7, #5]
 800169e:	461a      	mov	r2, r3
 80016a0:	f107 030c 	add.w	r3, r7, #12
 80016a4:	3303      	adds	r3, #3
 80016a6:	4916      	ldr	r1, [pc, #88]	; (8001700 <display_mode_2+0xd0>)
 80016a8:	4618      	mov	r0, r3
 80016aa:	f006 fb93 	bl	8007dd4 <siprintf>
		lcd_send_string(row_2);
 80016ae:	f107 030c 	add.w	r3, r7, #12
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff fc91 	bl	8000fda <lcd_send_string>
	}
	if(para==3)// nếu yêu cầu điện trở
 80016b8:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <display_mode_2+0xc8>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b03      	cmp	r3, #3
 80016c0:	d114      	bne.n	80016ec <display_mode_2+0xbc>
	{
		lcd_put_cur(1,0);
 80016c2:	2100      	movs	r1, #0
 80016c4:	2001      	movs	r0, #1
 80016c6:	f7ff fc2c 	bl	8000f22 <lcd_put_cur>
		strcpy(row_2,"DT:");
 80016ca:	f107 030c 	add.w	r3, r7, #12
 80016ce:	4a0e      	ldr	r2, [pc, #56]	; (8001708 <display_mode_2+0xd8>)
 80016d0:	601a      	str	r2, [r3, #0]
		sprintf(&row_2[3],"%d",dientro);
 80016d2:	f107 030c 	add.w	r3, r7, #12
 80016d6:	3303      	adds	r3, #3
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	4909      	ldr	r1, [pc, #36]	; (8001700 <display_mode_2+0xd0>)
 80016dc:	4618      	mov	r0, r3
 80016de:	f006 fb79 	bl	8007dd4 <siprintf>
		lcd_send_string(row_2);
 80016e2:	f107 030c 	add.w	r3, r7, #12
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff fc77 	bl	8000fda <lcd_send_string>
		}
}
 80016ec:	bf00      	nop
 80016ee:	3718      	adds	r7, #24
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	08008734 	.word	0x08008734
 80016f8:	20000001 	.word	0x20000001
 80016fc:	003a444e 	.word	0x003a444e
 8001700:	08008724 	.word	0x08008724
 8001704:	003a4144 	.word	0x003a4144
 8001708:	003a5444 	.word	0x003a5444

0800170c <display_cycle>:
void display_cycle() // Hàm hiển thị chu kì
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
	if(mode==1)
 8001712:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <display_cycle+0x74>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	b2db      	uxtb	r3, r3
 8001718:	2b01      	cmp	r3, #1
 800171a:	d12d      	bne.n	8001778 <display_cycle+0x6c>
	{
		if((cycle>9)||(cycle<2))// giới hạn chu kì từ 2-9 s
 800171c:	4b19      	ldr	r3, [pc, #100]	; (8001784 <display_cycle+0x78>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2b09      	cmp	r3, #9
 8001724:	d804      	bhi.n	8001730 <display_cycle+0x24>
 8001726:	4b17      	ldr	r3, [pc, #92]	; (8001784 <display_cycle+0x78>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	b2db      	uxtb	r3, r3
 800172c:	2b01      	cmp	r3, #1
 800172e:	d802      	bhi.n	8001736 <display_cycle+0x2a>
		{
			cycle=2;
 8001730:	4b14      	ldr	r3, [pc, #80]	; (8001784 <display_cycle+0x78>)
 8001732:	2202      	movs	r2, #2
 8001734:	701a      	strb	r2, [r3, #0]
		}
		lcd_put_cur(0,0);
 8001736:	2100      	movs	r1, #0
 8001738:	2000      	movs	r0, #0
 800173a:	f7ff fbf2 	bl	8000f22 <lcd_put_cur>
		lcd_send_string("Mode:1");
 800173e:	4812      	ldr	r0, [pc, #72]	; (8001788 <display_cycle+0x7c>)
 8001740:	f7ff fc4b 	bl	8000fda <lcd_send_string>
		char row_1[10];
		lcd_put_cur(0,6);
 8001744:	2106      	movs	r1, #6
 8001746:	2000      	movs	r0, #0
 8001748:	f7ff fbeb 	bl	8000f22 <lcd_put_cur>
		strcpy(row_1," T");
 800174c:	1d3b      	adds	r3, r7, #4
 800174e:	4a0f      	ldr	r2, [pc, #60]	; (800178c <display_cycle+0x80>)
 8001750:	6812      	ldr	r2, [r2, #0]
 8001752:	4611      	mov	r1, r2
 8001754:	8019      	strh	r1, [r3, #0]
 8001756:	3302      	adds	r3, #2
 8001758:	0c12      	lsrs	r2, r2, #16
 800175a:	701a      	strb	r2, [r3, #0]
		sprintf(&row_1[2],"%d",cycle);
 800175c:	4b09      	ldr	r3, [pc, #36]	; (8001784 <display_cycle+0x78>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	b2db      	uxtb	r3, r3
 8001762:	461a      	mov	r2, r3
 8001764:	1d3b      	adds	r3, r7, #4
 8001766:	3302      	adds	r3, #2
 8001768:	4909      	ldr	r1, [pc, #36]	; (8001790 <display_cycle+0x84>)
 800176a:	4618      	mov	r0, r3
 800176c:	f006 fb32 	bl	8007dd4 <siprintf>
		lcd_send_string(row_1);
 8001770:	1d3b      	adds	r3, r7, #4
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff fc31 	bl	8000fda <lcd_send_string>
	}
}
 8001778:	bf00      	nop
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20000000 	.word	0x20000000
 8001784:	20000002 	.word	0x20000002
 8001788:	08008718 	.word	0x08008718
 800178c:	08008720 	.word	0x08008720
 8001790:	08008724 	.word	0x08008724

08001794 <get_data>:
void get_data(char *p)// hàm xử lí dữ liệu từ máy tính truy�?n xuống, tham số truy�?n vào là địa chỉ của mảng lưu trữ dữ liệu
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
	uint8_t cycle_1, m, n, k;
	if(mode == 1)  // nếu là mode 1 thì dữ liệu sẽ là chu kì và sẽ chuyển đổi từ kí tự sang số
 800179c:	4b30      	ldr	r3, [pc, #192]	; (8001860 <get_data+0xcc>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d10a      	bne.n	80017bc <get_data+0x28>
	{
		cycle_1=atoi(p);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f006 f9c0 	bl	8007b2c <atoi>
 80017ac:	4603      	mov	r3, r0
 80017ae:	73fb      	strb	r3, [r7, #15]
		if(cycle_1>0)
 80017b0:	7bfb      	ldrb	r3, [r7, #15]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d002      	beq.n	80017bc <get_data+0x28>
		{
			cycle=cycle_1;
 80017b6:	4a2b      	ldr	r2, [pc, #172]	; (8001864 <get_data+0xd0>)
 80017b8:	7bfb      	ldrb	r3, [r7, #15]
 80017ba:	7013      	strb	r3, [r2, #0]
		}
	}
	if(mode == 2) // Nếu lầ mode 2 thì dữ liệu là thông số nhiệt độ hoặc độ ẩm
 80017bc:	4b28      	ldr	r3, [pc, #160]	; (8001860 <get_data+0xcc>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d147      	bne.n	8001856 <get_data+0xc2>
	{
		m=strcmp(p,"nhiet do ");// so sánh chuỗi nhận được
 80017c6:	4928      	ldr	r1, [pc, #160]	; (8001868 <get_data+0xd4>)
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7fe fcc1 	bl	8000150 <strcmp>
 80017ce:	4603      	mov	r3, r0
 80017d0:	73bb      	strb	r3, [r7, #14]
		n=strcmp(p,"do am ");
 80017d2:	4926      	ldr	r1, [pc, #152]	; (800186c <get_data+0xd8>)
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7fe fcbb 	bl	8000150 <strcmp>
 80017da:	4603      	mov	r3, r0
 80017dc:	737b      	strb	r3, [r7, #13]
		k=strcmp(p,"dien tro ");
 80017de:	4924      	ldr	r1, [pc, #144]	; (8001870 <get_data+0xdc>)
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7fe fcb5 	bl	8000150 <strcmp>
 80017e6:	4603      	mov	r3, r0
 80017e8:	733b      	strb	r3, [r7, #12]
		if((m==0)&&(n!=0)&&(k!=0))
 80017ea:	7bbb      	ldrb	r3, [r7, #14]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d10d      	bne.n	800180c <get_data+0x78>
 80017f0:	7b7b      	ldrb	r3, [r7, #13]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d00a      	beq.n	800180c <get_data+0x78>
 80017f6:	7b3b      	ldrb	r3, [r7, #12]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d007      	beq.n	800180c <get_data+0x78>
		{
			para=1;             // nếu là nhiệt độ para=1
 80017fc:	4b1d      	ldr	r3, [pc, #116]	; (8001874 <get_data+0xe0>)
 80017fe:	2201      	movs	r2, #1
 8001800:	701a      	strb	r2, [r3, #0]
			strncpy(p,"",20);
 8001802:	2214      	movs	r2, #20
 8001804:	491c      	ldr	r1, [pc, #112]	; (8001878 <get_data+0xe4>)
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f006 fb04 	bl	8007e14 <strncpy>
		}
		if((m!=0)&&(n==0)&&(k!=0))
 800180c:	7bbb      	ldrb	r3, [r7, #14]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d00d      	beq.n	800182e <get_data+0x9a>
 8001812:	7b7b      	ldrb	r3, [r7, #13]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d10a      	bne.n	800182e <get_data+0x9a>
 8001818:	7b3b      	ldrb	r3, [r7, #12]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d007      	beq.n	800182e <get_data+0x9a>
		{
			para=2;				 // nếu là độ ẩm para=2
 800181e:	4b15      	ldr	r3, [pc, #84]	; (8001874 <get_data+0xe0>)
 8001820:	2202      	movs	r2, #2
 8001822:	701a      	strb	r2, [r3, #0]
			strncpy(p,"",20);
 8001824:	2214      	movs	r2, #20
 8001826:	4914      	ldr	r1, [pc, #80]	; (8001878 <get_data+0xe4>)
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f006 faf3 	bl	8007e14 <strncpy>
		}
		if((m!=0)&&(n!=0)&&(k==0))
 800182e:	7bbb      	ldrb	r3, [r7, #14]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d00d      	beq.n	8001850 <get_data+0xbc>
 8001834:	7b7b      	ldrb	r3, [r7, #13]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d00a      	beq.n	8001850 <get_data+0xbc>
 800183a:	7b3b      	ldrb	r3, [r7, #12]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d107      	bne.n	8001850 <get_data+0xbc>
		{
			para=3;				// nếu là độ ẩm para=3
 8001840:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <get_data+0xe0>)
 8001842:	2203      	movs	r2, #3
 8001844:	701a      	strb	r2, [r3, #0]
			strncpy(p,"",20);
 8001846:	2214      	movs	r2, #20
 8001848:	490b      	ldr	r1, [pc, #44]	; (8001878 <get_data+0xe4>)
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f006 fae2 	bl	8007e14 <strncpy>
		}
		flag=1;  // bật c�? báo là hiển thị dữ liệu yêu cầu từ máy tính gửi xuống
 8001850:	4b0a      	ldr	r3, [pc, #40]	; (800187c <get_data+0xe8>)
 8001852:	2201      	movs	r2, #1
 8001854:	701a      	strb	r2, [r3, #0]
	}
}
 8001856:	bf00      	nop
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000000 	.word	0x20000000
 8001864:	20000002 	.word	0x20000002
 8001868:	0800873c 	.word	0x0800873c
 800186c:	08008748 	.word	0x08008748
 8001870:	08008750 	.word	0x08008750
 8001874:	20000001 	.word	0x20000001
 8001878:	08008714 	.word	0x08008714
 800187c:	20000003 	.word	0x20000003

08001880 <transmit_data_from_computer>:
void transmit_data_from_computer()// HÀm truy�?n dữ liệu lên máy tính
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b096      	sub	sp, #88	; 0x58
 8001884:	af00      	add	r7, sp, #0
	if(mode==1)// nếu là mode 1 sẽ truy�?n đầy đủ
 8001886:	4b5a      	ldr	r3, [pc, #360]	; (80019f0 <transmit_data_from_computer+0x170>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	b2db      	uxtb	r3, r3
 800188c:	2b01      	cmp	r3, #1
 800188e:	d139      	bne.n	8001904 <transmit_data_from_computer+0x84>
	{
		char row_2[37];
		strcpy(row_2,"Nhiet do:");
 8001890:	1d3b      	adds	r3, r7, #4
 8001892:	4a58      	ldr	r2, [pc, #352]	; (80019f4 <transmit_data_from_computer+0x174>)
 8001894:	ca07      	ldmia	r2, {r0, r1, r2}
 8001896:	c303      	stmia	r3!, {r0, r1}
 8001898:	801a      	strh	r2, [r3, #0]
		sprintf(&row_2[9],"%d",data.Temperature);
 800189a:	4b57      	ldr	r3, [pc, #348]	; (80019f8 <transmit_data_from_computer+0x178>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	461a      	mov	r2, r3
 80018a0:	1d3b      	adds	r3, r7, #4
 80018a2:	3309      	adds	r3, #9
 80018a4:	4955      	ldr	r1, [pc, #340]	; (80019fc <transmit_data_from_computer+0x17c>)
 80018a6:	4618      	mov	r0, r3
 80018a8:	f006 fa94 	bl	8007dd4 <siprintf>
		strcpy(&row_2[11]," Do am:");
 80018ac:	1d3b      	adds	r3, r7, #4
 80018ae:	330b      	adds	r3, #11
 80018b0:	4953      	ldr	r1, [pc, #332]	; (8001a00 <transmit_data_from_computer+0x180>)
 80018b2:	461a      	mov	r2, r3
 80018b4:	460b      	mov	r3, r1
 80018b6:	cb03      	ldmia	r3!, {r0, r1}
 80018b8:	6010      	str	r0, [r2, #0]
 80018ba:	6051      	str	r1, [r2, #4]
		sprintf(&row_2[18],"%d",data.Humidity);
 80018bc:	4b4e      	ldr	r3, [pc, #312]	; (80019f8 <transmit_data_from_computer+0x178>)
 80018be:	785b      	ldrb	r3, [r3, #1]
 80018c0:	461a      	mov	r2, r3
 80018c2:	1d3b      	adds	r3, r7, #4
 80018c4:	3312      	adds	r3, #18
 80018c6:	494d      	ldr	r1, [pc, #308]	; (80019fc <transmit_data_from_computer+0x17c>)
 80018c8:	4618      	mov	r0, r3
 80018ca:	f006 fa83 	bl	8007dd4 <siprintf>
		strcpy(&row_2[20]," Dien tro:");
 80018ce:	1d3b      	adds	r3, r7, #4
 80018d0:	3314      	adds	r3, #20
 80018d2:	4a4c      	ldr	r2, [pc, #304]	; (8001a04 <transmit_data_from_computer+0x184>)
 80018d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80018d6:	c303      	stmia	r3!, {r0, r1}
 80018d8:	801a      	strh	r2, [r3, #0]
 80018da:	3302      	adds	r3, #2
 80018dc:	0c12      	lsrs	r2, r2, #16
 80018de:	701a      	strb	r2, [r3, #0]
		sprintf(&row_2[30],"%d",dientro);
 80018e0:	4b49      	ldr	r3, [pc, #292]	; (8001a08 <transmit_data_from_computer+0x188>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	1d3b      	adds	r3, r7, #4
 80018e6:	331e      	adds	r3, #30
 80018e8:	4944      	ldr	r1, [pc, #272]	; (80019fc <transmit_data_from_computer+0x17c>)
 80018ea:	4618      	mov	r0, r3
 80018ec:	f006 fa72 	bl	8007dd4 <siprintf>
		strcpy(&row_2[34],"\n");
 80018f0:	1d3b      	adds	r3, r7, #4
 80018f2:	3322      	adds	r3, #34	; 0x22
 80018f4:	220a      	movs	r2, #10
 80018f6:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart1,(uint8_t*)row_2,35,200);
 80018f8:	1d39      	adds	r1, r7, #4
 80018fa:	23c8      	movs	r3, #200	; 0xc8
 80018fc:	2223      	movs	r2, #35	; 0x23
 80018fe:	4843      	ldr	r0, [pc, #268]	; (8001a0c <transmit_data_from_computer+0x18c>)
 8001900:	f003 f88d 	bl	8004a1e <HAL_UART_Transmit>
	}
	if(mode==2)  // nếu là mode 2 sẽ truy�?n theo yêu cầu
 8001904:	4b3a      	ldr	r3, [pc, #232]	; (80019f0 <transmit_data_from_computer+0x170>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d16c      	bne.n	80019e8 <transmit_data_from_computer+0x168>
	{
		if(para==1)
 800190e:	4b40      	ldr	r3, [pc, #256]	; (8001a10 <transmit_data_from_computer+0x190>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	b2db      	uxtb	r3, r3
 8001914:	2b01      	cmp	r3, #1
 8001916:	d11e      	bne.n	8001956 <transmit_data_from_computer+0xd6>
		{
			char row_2[13];
			strcpy(row_2,"Nhiet do:");
 8001918:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800191c:	4a35      	ldr	r2, [pc, #212]	; (80019f4 <transmit_data_from_computer+0x174>)
 800191e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001920:	c303      	stmia	r3!, {r0, r1}
 8001922:	801a      	strh	r2, [r3, #0]
			sprintf(&row_2[9],"%d",data.Temperature);
 8001924:	4b34      	ldr	r3, [pc, #208]	; (80019f8 <transmit_data_from_computer+0x178>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	461a      	mov	r2, r3
 800192a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800192e:	3309      	adds	r3, #9
 8001930:	4932      	ldr	r1, [pc, #200]	; (80019fc <transmit_data_from_computer+0x17c>)
 8001932:	4618      	mov	r0, r3
 8001934:	f006 fa4e 	bl	8007dd4 <siprintf>
			strcpy(&row_2[11],"\n");
 8001938:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800193c:	330b      	adds	r3, #11
 800193e:	4935      	ldr	r1, [pc, #212]	; (8001a14 <transmit_data_from_computer+0x194>)
 8001940:	461a      	mov	r2, r3
 8001942:	460b      	mov	r3, r1
 8001944:	881b      	ldrh	r3, [r3, #0]
 8001946:	8013      	strh	r3, [r2, #0]
			HAL_UART_Transmit(&huart1,(uint8_t*)row_2,12,100);
 8001948:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800194c:	2364      	movs	r3, #100	; 0x64
 800194e:	220c      	movs	r2, #12
 8001950:	482e      	ldr	r0, [pc, #184]	; (8001a0c <transmit_data_from_computer+0x18c>)
 8001952:	f003 f864 	bl	8004a1e <HAL_UART_Transmit>
		}
		if(para==2)
 8001956:	4b2e      	ldr	r3, [pc, #184]	; (8001a10 <transmit_data_from_computer+0x190>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	b2db      	uxtb	r3, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d120      	bne.n	80019a2 <transmit_data_from_computer+0x122>
		{
			char row_2[10];
			strcpy(row_2,"Do am:");
 8001960:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001964:	4a2c      	ldr	r2, [pc, #176]	; (8001a18 <transmit_data_from_computer+0x198>)
 8001966:	e892 0003 	ldmia.w	r2, {r0, r1}
 800196a:	6018      	str	r0, [r3, #0]
 800196c:	3304      	adds	r3, #4
 800196e:	8019      	strh	r1, [r3, #0]
 8001970:	3302      	adds	r3, #2
 8001972:	0c0a      	lsrs	r2, r1, #16
 8001974:	701a      	strb	r2, [r3, #0]
			sprintf(&row_2[6],"%d",data.Humidity);
 8001976:	4b20      	ldr	r3, [pc, #128]	; (80019f8 <transmit_data_from_computer+0x178>)
 8001978:	785b      	ldrb	r3, [r3, #1]
 800197a:	461a      	mov	r2, r3
 800197c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001980:	3306      	adds	r3, #6
 8001982:	491e      	ldr	r1, [pc, #120]	; (80019fc <transmit_data_from_computer+0x17c>)
 8001984:	4618      	mov	r0, r3
 8001986:	f006 fa25 	bl	8007dd4 <siprintf>
			strcpy(&row_2[8],"\n");
 800198a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800198e:	3308      	adds	r3, #8
 8001990:	220a      	movs	r2, #10
 8001992:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart1,(uint8_t*)row_2,9,100);
 8001994:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001998:	2364      	movs	r3, #100	; 0x64
 800199a:	2209      	movs	r2, #9
 800199c:	481b      	ldr	r0, [pc, #108]	; (8001a0c <transmit_data_from_computer+0x18c>)
 800199e:	f003 f83e 	bl	8004a1e <HAL_UART_Transmit>
		}
		if(para==3)
 80019a2:	4b1b      	ldr	r3, [pc, #108]	; (8001a10 <transmit_data_from_computer+0x190>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	2b03      	cmp	r3, #3
 80019aa:	d11d      	bne.n	80019e8 <transmit_data_from_computer+0x168>
		{
			char row_2[16];
			strcpy(row_2,"Dien tro:");
 80019ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019b0:	4a1a      	ldr	r2, [pc, #104]	; (8001a1c <transmit_data_from_computer+0x19c>)
 80019b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80019b4:	c303      	stmia	r3!, {r0, r1}
 80019b6:	801a      	strh	r2, [r3, #0]
			sprintf(&row_2[9],"%d",dientro);
 80019b8:	4b13      	ldr	r3, [pc, #76]	; (8001a08 <transmit_data_from_computer+0x188>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019c0:	3309      	adds	r3, #9
 80019c2:	490e      	ldr	r1, [pc, #56]	; (80019fc <transmit_data_from_computer+0x17c>)
 80019c4:	4618      	mov	r0, r3
 80019c6:	f006 fa05 	bl	8007dd4 <siprintf>
			strcpy(&row_2[13],"\n");
 80019ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ce:	330d      	adds	r3, #13
 80019d0:	4910      	ldr	r1, [pc, #64]	; (8001a14 <transmit_data_from_computer+0x194>)
 80019d2:	461a      	mov	r2, r3
 80019d4:	460b      	mov	r3, r1
 80019d6:	881b      	ldrh	r3, [r3, #0]
 80019d8:	8013      	strh	r3, [r2, #0]
			HAL_UART_Transmit(&huart1,(uint8_t*)row_2,14,100);
 80019da:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80019de:	2364      	movs	r3, #100	; 0x64
 80019e0:	220e      	movs	r2, #14
 80019e2:	480a      	ldr	r0, [pc, #40]	; (8001a0c <transmit_data_from_computer+0x18c>)
 80019e4:	f003 f81b 	bl	8004a1e <HAL_UART_Transmit>
		}
	}
}
 80019e8:	bf00      	nop
 80019ea:	3758      	adds	r7, #88	; 0x58
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	20000000 	.word	0x20000000
 80019f4:	0800875c 	.word	0x0800875c
 80019f8:	20000498 	.word	0x20000498
 80019fc:	08008724 	.word	0x08008724
 8001a00:	08008768 	.word	0x08008768
 8001a04:	08008770 	.word	0x08008770
 8001a08:	2000049c 	.word	0x2000049c
 8001a0c:	2000041c 	.word	0x2000041c
 8001a10:	20000001 	.word	0x20000001
 8001a14:	0800877c 	.word	0x0800877c
 8001a18:	08008780 	.word	0x08008780
 8001a1c:	08008788 	.word	0x08008788

08001a20 <getdata_DT>:
void getdata_DT(int *value)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
	int data;
	float adc;
	data=get_adc_channel(ADC_CHANNEL_0);// lấy dữ liệu từ ADC
 8001a28:	2000      	movs	r0, #0
 8001a2a:	f000 f825 	bl	8001a78 <get_adc_channel>
 8001a2e:	60f8      	str	r0, [r7, #12]
	adc=(float)(data/4096.0)*5000;
 8001a30:	68f8      	ldr	r0, [r7, #12]
 8001a32:	f7fe fda5 	bl	8000580 <__aeabi_i2d>
 8001a36:	f04f 0200 	mov.w	r2, #0
 8001a3a:	4b0d      	ldr	r3, [pc, #52]	; (8001a70 <getdata_DT+0x50>)
 8001a3c:	f7fe ff34 	bl	80008a8 <__aeabi_ddiv>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	4610      	mov	r0, r2
 8001a46:	4619      	mov	r1, r3
 8001a48:	f7ff f816 	bl	8000a78 <__aeabi_d2f>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	4909      	ldr	r1, [pc, #36]	; (8001a74 <getdata_DT+0x54>)
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7fe fb8f 	bl	8000174 <__aeabi_fmul>
 8001a56:	4603      	mov	r3, r0
 8001a58:	60bb      	str	r3, [r7, #8]
	*(value)=(int)adc;
 8001a5a:	68b8      	ldr	r0, [r7, #8]
 8001a5c:	f7ff f85c 	bl	8000b18 <__aeabi_f2iz>
 8001a60:	4602      	mov	r2, r0
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	601a      	str	r2, [r3, #0]
}
 8001a66:	bf00      	nop
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40b00000 	.word	0x40b00000
 8001a74:	459c4000 	.word	0x459c4000

08001a78 <get_adc_channel>:
int get_adc_channel(uint32_t channel)// cấu hình adc
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
	int adc;
	ADC_ChannelConfTypeDef sConfig = {0};
 8001a80:	f107 0308 	add.w	r3, r7, #8
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
	sConfig.Channel = channel;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a90:	2301      	movs	r3, #1
 8001a92:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001a94:	2300      	movs	r3, #0
 8001a96:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a98:	f107 0308 	add.w	r3, r7, #8
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	480e      	ldr	r0, [pc, #56]	; (8001ad8 <get_adc_channel+0x60>)
 8001aa0:	f000 fd9e 	bl	80025e0 <HAL_ADC_ConfigChannel>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <get_adc_channel+0x36>
	{
	    Error_Handler();
 8001aaa:	f000 f88d 	bl	8001bc8 <Error_Handler>
	}
	HAL_ADC_Start(&hadc1);
 8001aae:	480a      	ldr	r0, [pc, #40]	; (8001ad8 <get_adc_channel+0x60>)
 8001ab0:	f000 fbaa 	bl	8002208 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,1000);
 8001ab4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ab8:	4807      	ldr	r0, [pc, #28]	; (8001ad8 <get_adc_channel+0x60>)
 8001aba:	f000 fc7f 	bl	80023bc <HAL_ADC_PollForConversion>
	adc = HAL_ADC_GetValue(&hadc1);
 8001abe:	4806      	ldr	r0, [pc, #24]	; (8001ad8 <get_adc_channel+0x60>)
 8001ac0:	f000 fd82 	bl	80025c8 <HAL_ADC_GetValue>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	617b      	str	r3, [r7, #20]
	HAL_ADC_Stop(&hadc1);
 8001ac8:	4803      	ldr	r0, [pc, #12]	; (8001ad8 <get_adc_channel+0x60>)
 8001aca:	f000 fc4b 	bl	8002364 <HAL_ADC_Stop>
	return adc;
 8001ace:	697b      	ldr	r3, [r7, #20]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3718      	adds	r7, #24
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20000350 	.word	0x20000350

08001adc <Task_control>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task_control */
void Task_control(void const * argument)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	if(mode==1)
 8001ae4:	4b26      	ldr	r3, [pc, #152]	; (8001b80 <Task_control+0xa4>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d127      	bne.n	8001b3e <Task_control+0x62>
	{
		display_cycle(); // hiển thị chu kì nếu có cập nhật nhằm đảm bảo tính th�?i gian thực
 8001aee:	f7ff fe0d 	bl	800170c <display_cycle>
		currentTime=uwTick;
 8001af2:	4b24      	ldr	r3, [pc, #144]	; (8001b84 <Task_control+0xa8>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a24      	ldr	r2, [pc, #144]	; (8001b88 <Task_control+0xac>)
 8001af8:	6013      	str	r3, [r2, #0]
		if(currentTime-lastTime>cycle*1000)// đúng chu kì như đã đặt thì sẽ hiển thị nhưng thông số cần thiết
 8001afa:	4b23      	ldr	r3, [pc, #140]	; (8001b88 <Task_control+0xac>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	4b23      	ldr	r3, [pc, #140]	; (8001b8c <Task_control+0xb0>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	4a22      	ldr	r2, [pc, #136]	; (8001b90 <Task_control+0xb4>)
 8001b06:	7812      	ldrb	r2, [r2, #0]
 8001b08:	b2d2      	uxtb	r2, r2
 8001b0a:	4611      	mov	r1, r2
 8001b0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b10:	fb01 f202 	mul.w	r2, r1, r2
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d912      	bls.n	8001b3e <Task_control+0x62>
		{
			DHT_GetData(&data);
 8001b18:	481e      	ldr	r0, [pc, #120]	; (8001b94 <Task_control+0xb8>)
 8001b1a:	f7ff f91f 	bl	8000d5c <DHT_GetData>
			getdata_DT(&dientro);
 8001b1e:	481e      	ldr	r0, [pc, #120]	; (8001b98 <Task_control+0xbc>)
 8001b20:	f7ff ff7e 	bl	8001a20 <getdata_DT>
			display_mode_1(data, dientro);
 8001b24:	4b1c      	ldr	r3, [pc, #112]	; (8001b98 <Task_control+0xbc>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a1a      	ldr	r2, [pc, #104]	; (8001b94 <Task_control+0xb8>)
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	6810      	ldr	r0, [r2, #0]
 8001b2e:	f7ff fd0b 	bl	8001548 <display_mode_1>
			lastTime=currentTime;
 8001b32:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <Task_control+0xac>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a15      	ldr	r2, [pc, #84]	; (8001b8c <Task_control+0xb0>)
 8001b38:	6013      	str	r3, [r2, #0]
			transmit_data_from_computer();
 8001b3a:	f7ff fea1 	bl	8001880 <transmit_data_from_computer>
		}
	}
	if((mode==2)&&(flag==1))// nếu là mode 2 và có yêu cầu truy�?n và hiển thị thông số thì sẽ hiển thị thông số yêu cầu,
 8001b3e:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <Task_control+0xa4>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d116      	bne.n	8001b76 <Task_control+0x9a>
 8001b48:	4b14      	ldr	r3, [pc, #80]	; (8001b9c <Task_control+0xc0>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d111      	bne.n	8001b76 <Task_control+0x9a>
	{
		DHT_GetData(&data);
 8001b52:	4810      	ldr	r0, [pc, #64]	; (8001b94 <Task_control+0xb8>)
 8001b54:	f7ff f902 	bl	8000d5c <DHT_GetData>
		getdata_DT(&dientro);
 8001b58:	480f      	ldr	r0, [pc, #60]	; (8001b98 <Task_control+0xbc>)
 8001b5a:	f7ff ff61 	bl	8001a20 <getdata_DT>
		display_mode_2(data, dientro);
 8001b5e:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <Task_control+0xbc>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a0c      	ldr	r2, [pc, #48]	; (8001b94 <Task_control+0xb8>)
 8001b64:	4619      	mov	r1, r3
 8001b66:	6810      	ldr	r0, [r2, #0]
 8001b68:	f7ff fd62 	bl	8001630 <display_mode_2>
		transmit_data_from_computer();
 8001b6c:	f7ff fe88 	bl	8001880 <transmit_data_from_computer>
		flag=0;// xóa c�? báo gửi thông số yêu cầu
 8001b70:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <Task_control+0xc0>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	701a      	strb	r2, [r3, #0]
	}
    osDelay(1);
 8001b76:	2001      	movs	r0, #1
 8001b78:	f003 fcb9 	bl	80054ee <osDelay>
	if(mode==1)
 8001b7c:	e7b2      	b.n	8001ae4 <Task_control+0x8>
 8001b7e:	bf00      	nop
 8001b80:	20000000 	.word	0x20000000
 8001b84:	200004b4 	.word	0x200004b4
 8001b88:	200004a0 	.word	0x200004a0
 8001b8c:	200004a4 	.word	0x200004a4
 8001b90:	20000002 	.word	0x20000002
 8001b94:	20000498 	.word	0x20000498
 8001b98:	2000049c 	.word	0x2000049c
 8001b9c:	20000003 	.word	0x20000003

08001ba0 <Task_getdata>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_getdata */
void Task_getdata(void const * argument)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_getdata */
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreWait(semaphore_uartHandle,osWaitForever);// đợi semaphore từ ngắt uart
 8001ba8:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <Task_getdata+0x20>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f04f 31ff 	mov.w	r1, #4294967295
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f003 fce3 	bl	800557c <osSemaphoreWait>
	get_data(data_storage);                           // xử lí dữ liệu
 8001bb6:	4803      	ldr	r0, [pc, #12]	; (8001bc4 <Task_getdata+0x24>)
 8001bb8:	f7ff fdec 	bl	8001794 <get_data>
	osSemaphoreWait(semaphore_uartHandle,osWaitForever);// đợi semaphore từ ngắt uart
 8001bbc:	e7f4      	b.n	8001ba8 <Task_getdata+0x8>
 8001bbe:	bf00      	nop
 8001bc0:	2000046c 	.word	0x2000046c
 8001bc4:	20000484 	.word	0x20000484

08001bc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
 // __disable_irq();

  while (1)
 8001bcc:	e7fe      	b.n	8001bcc <Error_Handler+0x4>
	...

08001bd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bd6:	4b18      	ldr	r3, [pc, #96]	; (8001c38 <HAL_MspInit+0x68>)
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	4a17      	ldr	r2, [pc, #92]	; (8001c38 <HAL_MspInit+0x68>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	6193      	str	r3, [r2, #24]
 8001be2:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <HAL_MspInit+0x68>)
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	60bb      	str	r3, [r7, #8]
 8001bec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bee:	4b12      	ldr	r3, [pc, #72]	; (8001c38 <HAL_MspInit+0x68>)
 8001bf0:	69db      	ldr	r3, [r3, #28]
 8001bf2:	4a11      	ldr	r2, [pc, #68]	; (8001c38 <HAL_MspInit+0x68>)
 8001bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf8:	61d3      	str	r3, [r2, #28]
 8001bfa:	4b0f      	ldr	r3, [pc, #60]	; (8001c38 <HAL_MspInit+0x68>)
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c02:	607b      	str	r3, [r7, #4]
 8001c04:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c06:	2200      	movs	r2, #0
 8001c08:	210f      	movs	r1, #15
 8001c0a:	f06f 0001 	mvn.w	r0, #1
 8001c0e:	f000 ff52 	bl	8002ab6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c12:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <HAL_MspInit+0x6c>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	4a04      	ldr	r2, [pc, #16]	; (8001c3c <HAL_MspInit+0x6c>)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	40010000 	.word	0x40010000

08001c40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b088      	sub	sp, #32
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c48:	f107 0310 	add.w	r3, r7, #16
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a14      	ldr	r2, [pc, #80]	; (8001cac <HAL_ADC_MspInit+0x6c>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d121      	bne.n	8001ca4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c60:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <HAL_ADC_MspInit+0x70>)
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	4a12      	ldr	r2, [pc, #72]	; (8001cb0 <HAL_ADC_MspInit+0x70>)
 8001c66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c6a:	6193      	str	r3, [r2, #24]
 8001c6c:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <HAL_ADC_MspInit+0x70>)
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c78:	4b0d      	ldr	r3, [pc, #52]	; (8001cb0 <HAL_ADC_MspInit+0x70>)
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	4a0c      	ldr	r2, [pc, #48]	; (8001cb0 <HAL_ADC_MspInit+0x70>)
 8001c7e:	f043 0304 	orr.w	r3, r3, #4
 8001c82:	6193      	str	r3, [r2, #24]
 8001c84:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <HAL_ADC_MspInit+0x70>)
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	60bb      	str	r3, [r7, #8]
 8001c8e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c90:	2301      	movs	r3, #1
 8001c92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c94:	2303      	movs	r3, #3
 8001c96:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c98:	f107 0310 	add.w	r3, r7, #16
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4805      	ldr	r0, [pc, #20]	; (8001cb4 <HAL_ADC_MspInit+0x74>)
 8001ca0:	f000 fff0 	bl	8002c84 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ca4:	bf00      	nop
 8001ca6:	3720      	adds	r7, #32
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40012400 	.word	0x40012400
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	40010800 	.word	0x40010800

08001cb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b088      	sub	sp, #32
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc0:	f107 0310 	add.w	r3, r7, #16
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a15      	ldr	r2, [pc, #84]	; (8001d28 <HAL_I2C_MspInit+0x70>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d123      	bne.n	8001d20 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd8:	4b14      	ldr	r3, [pc, #80]	; (8001d2c <HAL_I2C_MspInit+0x74>)
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	4a13      	ldr	r2, [pc, #76]	; (8001d2c <HAL_I2C_MspInit+0x74>)
 8001cde:	f043 0308 	orr.w	r3, r3, #8
 8001ce2:	6193      	str	r3, [r2, #24]
 8001ce4:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <HAL_I2C_MspInit+0x74>)
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	f003 0308 	and.w	r3, r3, #8
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cf0:	23c0      	movs	r3, #192	; 0xc0
 8001cf2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cf4:	2312      	movs	r3, #18
 8001cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cfc:	f107 0310 	add.w	r3, r7, #16
 8001d00:	4619      	mov	r1, r3
 8001d02:	480b      	ldr	r0, [pc, #44]	; (8001d30 <HAL_I2C_MspInit+0x78>)
 8001d04:	f000 ffbe 	bl	8002c84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d08:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <HAL_I2C_MspInit+0x74>)
 8001d0a:	69db      	ldr	r3, [r3, #28]
 8001d0c:	4a07      	ldr	r2, [pc, #28]	; (8001d2c <HAL_I2C_MspInit+0x74>)
 8001d0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d12:	61d3      	str	r3, [r2, #28]
 8001d14:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <HAL_I2C_MspInit+0x74>)
 8001d16:	69db      	ldr	r3, [r3, #28]
 8001d18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d20:	bf00      	nop
 8001d22:	3720      	adds	r7, #32
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40005400 	.word	0x40005400
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	40010c00 	.word	0x40010c00

08001d34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d44:	d10b      	bne.n	8001d5e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d46:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <HAL_TIM_Base_MspInit+0x34>)
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	4a07      	ldr	r2, [pc, #28]	; (8001d68 <HAL_TIM_Base_MspInit+0x34>)
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	61d3      	str	r3, [r2, #28]
 8001d52:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <HAL_TIM_Base_MspInit+0x34>)
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d5e:	bf00      	nop
 8001d60:	3714      	adds	r7, #20
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr
 8001d68:	40021000 	.word	0x40021000

08001d6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b088      	sub	sp, #32
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d74:	f107 0310 	add.w	r3, r7, #16
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a20      	ldr	r2, [pc, #128]	; (8001e08 <HAL_UART_MspInit+0x9c>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d139      	bne.n	8001e00 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d8c:	4b1f      	ldr	r3, [pc, #124]	; (8001e0c <HAL_UART_MspInit+0xa0>)
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	4a1e      	ldr	r2, [pc, #120]	; (8001e0c <HAL_UART_MspInit+0xa0>)
 8001d92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d96:	6193      	str	r3, [r2, #24]
 8001d98:	4b1c      	ldr	r3, [pc, #112]	; (8001e0c <HAL_UART_MspInit+0xa0>)
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da4:	4b19      	ldr	r3, [pc, #100]	; (8001e0c <HAL_UART_MspInit+0xa0>)
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	4a18      	ldr	r2, [pc, #96]	; (8001e0c <HAL_UART_MspInit+0xa0>)
 8001daa:	f043 0304 	orr.w	r3, r3, #4
 8001dae:	6193      	str	r3, [r2, #24]
 8001db0:	4b16      	ldr	r3, [pc, #88]	; (8001e0c <HAL_UART_MspInit+0xa0>)
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	f003 0304 	and.w	r3, r3, #4
 8001db8:	60bb      	str	r3, [r7, #8]
 8001dba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001dbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dc0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dca:	f107 0310 	add.w	r3, r7, #16
 8001dce:	4619      	mov	r1, r3
 8001dd0:	480f      	ldr	r0, [pc, #60]	; (8001e10 <HAL_UART_MspInit+0xa4>)
 8001dd2:	f000 ff57 	bl	8002c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001dd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de4:	f107 0310 	add.w	r3, r7, #16
 8001de8:	4619      	mov	r1, r3
 8001dea:	4809      	ldr	r0, [pc, #36]	; (8001e10 <HAL_UART_MspInit+0xa4>)
 8001dec:	f000 ff4a 	bl	8002c84 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001df0:	2200      	movs	r2, #0
 8001df2:	2105      	movs	r1, #5
 8001df4:	2025      	movs	r0, #37	; 0x25
 8001df6:	f000 fe5e 	bl	8002ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001dfa:	2025      	movs	r0, #37	; 0x25
 8001dfc:	f000 fe77 	bl	8002aee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e00:	bf00      	nop
 8001e02:	3720      	adds	r7, #32
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40013800 	.word	0x40013800
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	40010800 	.word	0x40010800

08001e14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e18:	e7fe      	b.n	8001e18 <NMI_Handler+0x4>

08001e1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e1e:	e7fe      	b.n	8001e1e <HardFault_Handler+0x4>

08001e20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e24:	e7fe      	b.n	8001e24 <MemManage_Handler+0x4>

08001e26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e26:	b480      	push	{r7}
 8001e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e2a:	e7fe      	b.n	8001e2a <BusFault_Handler+0x4>

08001e2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e30:	e7fe      	b.n	8001e30 <UsageFault_Handler+0x4>

08001e32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e32:	b480      	push	{r7}
 8001e34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bc80      	pop	{r7}
 8001e3c:	4770      	bx	lr

08001e3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e42:	f000 f8c9 	bl	8001fd8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001e46:	f005 f861 	bl	8006f0c <xTaskGetSchedulerState>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d001      	beq.n	8001e54 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001e50:	f005 fc12 	bl	8007678 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e54:	bf00      	nop
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001e5c:	2004      	movs	r0, #4
 8001e5e:	f001 f8c5 	bl	8002fec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001e6a:	2008      	movs	r0, #8
 8001e6c:	f001 f8be 	bl	8002fec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001e70:	bf00      	nop
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e78:	4802      	ldr	r0, [pc, #8]	; (8001e84 <USART1_IRQHandler+0x10>)
 8001e7a:	f002 fe93 	bl	8004ba4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	2000041c 	.word	0x2000041c

08001e88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e90:	4a14      	ldr	r2, [pc, #80]	; (8001ee4 <_sbrk+0x5c>)
 8001e92:	4b15      	ldr	r3, [pc, #84]	; (8001ee8 <_sbrk+0x60>)
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e9c:	4b13      	ldr	r3, [pc, #76]	; (8001eec <_sbrk+0x64>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d102      	bne.n	8001eaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ea4:	4b11      	ldr	r3, [pc, #68]	; (8001eec <_sbrk+0x64>)
 8001ea6:	4a12      	ldr	r2, [pc, #72]	; (8001ef0 <_sbrk+0x68>)
 8001ea8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eaa:	4b10      	ldr	r3, [pc, #64]	; (8001eec <_sbrk+0x64>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d207      	bcs.n	8001ec8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001eb8:	f005 fe3c 	bl	8007b34 <__errno>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	220c      	movs	r2, #12
 8001ec0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec6:	e009      	b.n	8001edc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ec8:	4b08      	ldr	r3, [pc, #32]	; (8001eec <_sbrk+0x64>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ece:	4b07      	ldr	r3, [pc, #28]	; (8001eec <_sbrk+0x64>)
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	4a05      	ldr	r2, [pc, #20]	; (8001eec <_sbrk+0x64>)
 8001ed8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eda:	68fb      	ldr	r3, [r7, #12]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20005000 	.word	0x20005000
 8001ee8:	00000400 	.word	0x00000400
 8001eec:	200004b0 	.word	0x200004b0
 8001ef0:	20001a18 	.word	0x20001a18

08001ef4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr

08001f00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f00:	480c      	ldr	r0, [pc, #48]	; (8001f34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f02:	490d      	ldr	r1, [pc, #52]	; (8001f38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f04:	4a0d      	ldr	r2, [pc, #52]	; (8001f3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f08:	e002      	b.n	8001f10 <LoopCopyDataInit>

08001f0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f0e:	3304      	adds	r3, #4

08001f10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f14:	d3f9      	bcc.n	8001f0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f16:	4a0a      	ldr	r2, [pc, #40]	; (8001f40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f18:	4c0a      	ldr	r4, [pc, #40]	; (8001f44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f1c:	e001      	b.n	8001f22 <LoopFillZerobss>

08001f1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f20:	3204      	adds	r2, #4

08001f22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f24:	d3fb      	bcc.n	8001f1e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f26:	f7ff ffe5 	bl	8001ef4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f2a:	f005 fe09 	bl	8007b40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f2e:	f7ff f869 	bl	8001004 <main>
  bx lr
 8001f32:	4770      	bx	lr
  ldr r0, =_sdata
 8001f34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f38:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001f3c:	08008970 	.word	0x08008970
  ldr r2, =_sbss
 8001f40:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001f44:	20001a14 	.word	0x20001a14

08001f48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f48:	e7fe      	b.n	8001f48 <ADC1_2_IRQHandler>
	...

08001f4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f50:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <HAL_Init+0x28>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a07      	ldr	r2, [pc, #28]	; (8001f74 <HAL_Init+0x28>)
 8001f56:	f043 0310 	orr.w	r3, r3, #16
 8001f5a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f5c:	2003      	movs	r0, #3
 8001f5e:	f000 fd9f 	bl	8002aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f62:	200f      	movs	r0, #15
 8001f64:	f000 f808 	bl	8001f78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f68:	f7ff fe32 	bl	8001bd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40022000 	.word	0x40022000

08001f78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f80:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <HAL_InitTick+0x54>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	4b12      	ldr	r3, [pc, #72]	; (8001fd0 <HAL_InitTick+0x58>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	4619      	mov	r1, r3
 8001f8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f96:	4618      	mov	r0, r3
 8001f98:	f000 fdb7 	bl	8002b0a <HAL_SYSTICK_Config>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e00e      	b.n	8001fc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2b0f      	cmp	r3, #15
 8001faa:	d80a      	bhi.n	8001fc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fac:	2200      	movs	r2, #0
 8001fae:	6879      	ldr	r1, [r7, #4]
 8001fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb4:	f000 fd7f 	bl	8002ab6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fb8:	4a06      	ldr	r2, [pc, #24]	; (8001fd4 <HAL_InitTick+0x5c>)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	e000      	b.n	8001fc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	20000004 	.word	0x20000004
 8001fd0:	2000000c 	.word	0x2000000c
 8001fd4:	20000008 	.word	0x20000008

08001fd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fdc:	4b05      	ldr	r3, [pc, #20]	; (8001ff4 <HAL_IncTick+0x1c>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <HAL_IncTick+0x20>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	4a03      	ldr	r2, [pc, #12]	; (8001ff8 <HAL_IncTick+0x20>)
 8001fea:	6013      	str	r3, [r2, #0]
}
 8001fec:	bf00      	nop
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc80      	pop	{r7}
 8001ff2:	4770      	bx	lr
 8001ff4:	2000000c 	.word	0x2000000c
 8001ff8:	200004b4 	.word	0x200004b4

08001ffc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  return uwTick;
 8002000:	4b02      	ldr	r3, [pc, #8]	; (800200c <HAL_GetTick+0x10>)
 8002002:	681b      	ldr	r3, [r3, #0]
}
 8002004:	4618      	mov	r0, r3
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr
 800200c:	200004b4 	.word	0x200004b4

08002010 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002018:	f7ff fff0 	bl	8001ffc <HAL_GetTick>
 800201c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002028:	d005      	beq.n	8002036 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800202a:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <HAL_Delay+0x44>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	461a      	mov	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	4413      	add	r3, r2
 8002034:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002036:	bf00      	nop
 8002038:	f7ff ffe0 	bl	8001ffc <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	429a      	cmp	r2, r3
 8002046:	d8f7      	bhi.n	8002038 <HAL_Delay+0x28>
  {
  }
}
 8002048:	bf00      	nop
 800204a:	bf00      	nop
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	2000000c 	.word	0x2000000c

08002058 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002060:	2300      	movs	r3, #0
 8002062:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002064:	2300      	movs	r3, #0
 8002066:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002068:	2300      	movs	r3, #0
 800206a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800206c:	2300      	movs	r3, #0
 800206e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e0be      	b.n	80021f8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002084:	2b00      	cmp	r3, #0
 8002086:	d109      	bne.n	800209c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7ff fdd2 	bl	8001c40 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 fbf1 	bl	8002884 <ADC_ConversionStop_Disable>
 80020a2:	4603      	mov	r3, r0
 80020a4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020aa:	f003 0310 	and.w	r3, r3, #16
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f040 8099 	bne.w	80021e6 <HAL_ADC_Init+0x18e>
 80020b4:	7dfb      	ldrb	r3, [r7, #23]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f040 8095 	bne.w	80021e6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020c4:	f023 0302 	bic.w	r3, r3, #2
 80020c8:	f043 0202 	orr.w	r2, r3, #2
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020d8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	7b1b      	ldrb	r3, [r3, #12]
 80020de:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80020e0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80020e2:	68ba      	ldr	r2, [r7, #8]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020f0:	d003      	beq.n	80020fa <HAL_ADC_Init+0xa2>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d102      	bne.n	8002100 <HAL_ADC_Init+0xa8>
 80020fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020fe:	e000      	b.n	8002102 <HAL_ADC_Init+0xaa>
 8002100:	2300      	movs	r3, #0
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	4313      	orrs	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	7d1b      	ldrb	r3, [r3, #20]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d119      	bne.n	8002144 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	7b1b      	ldrb	r3, [r3, #12]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d109      	bne.n	800212c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	3b01      	subs	r3, #1
 800211e:	035a      	lsls	r2, r3, #13
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	4313      	orrs	r3, r2
 8002124:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002128:	613b      	str	r3, [r7, #16]
 800212a:	e00b      	b.n	8002144 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002130:	f043 0220 	orr.w	r2, r3, #32
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213c:	f043 0201 	orr.w	r2, r3, #1
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	430a      	orrs	r2, r1
 8002156:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	4b28      	ldr	r3, [pc, #160]	; (8002200 <HAL_ADC_Init+0x1a8>)
 8002160:	4013      	ands	r3, r2
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	6812      	ldr	r2, [r2, #0]
 8002166:	68b9      	ldr	r1, [r7, #8]
 8002168:	430b      	orrs	r3, r1
 800216a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002174:	d003      	beq.n	800217e <HAL_ADC_Init+0x126>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d104      	bne.n	8002188 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	3b01      	subs	r3, #1
 8002184:	051b      	lsls	r3, r3, #20
 8002186:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	430a      	orrs	r2, r1
 800219a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689a      	ldr	r2, [r3, #8]
 80021a2:	4b18      	ldr	r3, [pc, #96]	; (8002204 <HAL_ADC_Init+0x1ac>)
 80021a4:	4013      	ands	r3, r2
 80021a6:	68ba      	ldr	r2, [r7, #8]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d10b      	bne.n	80021c4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b6:	f023 0303 	bic.w	r3, r3, #3
 80021ba:	f043 0201 	orr.w	r2, r3, #1
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021c2:	e018      	b.n	80021f6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c8:	f023 0312 	bic.w	r3, r3, #18
 80021cc:	f043 0210 	orr.w	r2, r3, #16
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d8:	f043 0201 	orr.w	r2, r3, #1
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021e4:	e007      	b.n	80021f6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ea:	f043 0210 	orr.w	r2, r3, #16
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80021f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	ffe1f7fd 	.word	0xffe1f7fd
 8002204:	ff1f0efe 	.word	0xff1f0efe

08002208 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002210:	2300      	movs	r3, #0
 8002212:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800221a:	2b01      	cmp	r3, #1
 800221c:	d101      	bne.n	8002222 <HAL_ADC_Start+0x1a>
 800221e:	2302      	movs	r3, #2
 8002220:	e098      	b.n	8002354 <HAL_ADC_Start+0x14c>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2201      	movs	r2, #1
 8002226:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 fad0 	bl	80027d0 <ADC_Enable>
 8002230:	4603      	mov	r3, r0
 8002232:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002234:	7bfb      	ldrb	r3, [r7, #15]
 8002236:	2b00      	cmp	r3, #0
 8002238:	f040 8087 	bne.w	800234a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002240:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002244:	f023 0301 	bic.w	r3, r3, #1
 8002248:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a41      	ldr	r2, [pc, #260]	; (800235c <HAL_ADC_Start+0x154>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d105      	bne.n	8002266 <HAL_ADC_Start+0x5e>
 800225a:	4b41      	ldr	r3, [pc, #260]	; (8002360 <HAL_ADC_Start+0x158>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d115      	bne.n	8002292 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800227c:	2b00      	cmp	r3, #0
 800227e:	d026      	beq.n	80022ce <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002284:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002288:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002290:	e01d      	b.n	80022ce <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002296:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a2f      	ldr	r2, [pc, #188]	; (8002360 <HAL_ADC_Start+0x158>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d004      	beq.n	80022b2 <HAL_ADC_Start+0xaa>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a2b      	ldr	r2, [pc, #172]	; (800235c <HAL_ADC_Start+0x154>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d10d      	bne.n	80022ce <HAL_ADC_Start+0xc6>
 80022b2:	4b2b      	ldr	r3, [pc, #172]	; (8002360 <HAL_ADC_Start+0x158>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d007      	beq.n	80022ce <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022c6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d006      	beq.n	80022e8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022de:	f023 0206 	bic.w	r2, r3, #6
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80022e6:	e002      	b.n	80022ee <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f06f 0202 	mvn.w	r2, #2
 80022fe:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800230a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800230e:	d113      	bne.n	8002338 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002314:	4a11      	ldr	r2, [pc, #68]	; (800235c <HAL_ADC_Start+0x154>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d105      	bne.n	8002326 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800231a:	4b11      	ldr	r3, [pc, #68]	; (8002360 <HAL_ADC_Start+0x158>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002322:	2b00      	cmp	r3, #0
 8002324:	d108      	bne.n	8002338 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002334:	609a      	str	r2, [r3, #8]
 8002336:	e00c      	b.n	8002352 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689a      	ldr	r2, [r3, #8]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	e003      	b.n	8002352 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002352:	7bfb      	ldrb	r3, [r7, #15]
}
 8002354:	4618      	mov	r0, r3
 8002356:	3710      	adds	r7, #16
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40012800 	.word	0x40012800
 8002360:	40012400 	.word	0x40012400

08002364 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800236c:	2300      	movs	r3, #0
 800236e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002376:	2b01      	cmp	r3, #1
 8002378:	d101      	bne.n	800237e <HAL_ADC_Stop+0x1a>
 800237a:	2302      	movs	r3, #2
 800237c:	e01a      	b.n	80023b4 <HAL_ADC_Stop+0x50>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 fa7c 	bl	8002884 <ADC_ConversionStop_Disable>
 800238c:	4603      	mov	r3, r0
 800238e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002390:	7bfb      	ldrb	r3, [r7, #15]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d109      	bne.n	80023aa <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800239e:	f023 0301 	bic.w	r3, r3, #1
 80023a2:	f043 0201 	orr.w	r2, r3, #1
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80023b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80023bc:	b590      	push	{r4, r7, lr}
 80023be:	b087      	sub	sp, #28
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80023c6:	2300      	movs	r3, #0
 80023c8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80023d2:	f7ff fe13 	bl	8001ffc <HAL_GetTick>
 80023d6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00b      	beq.n	80023fe <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ea:	f043 0220 	orr.w	r2, r3, #32
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e0d3      	b.n	80025a6 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002408:	2b00      	cmp	r3, #0
 800240a:	d131      	bne.n	8002470 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002412:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002416:	2b00      	cmp	r3, #0
 8002418:	d12a      	bne.n	8002470 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800241a:	e021      	b.n	8002460 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002422:	d01d      	beq.n	8002460 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d007      	beq.n	800243a <HAL_ADC_PollForConversion+0x7e>
 800242a:	f7ff fde7 	bl	8001ffc <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d212      	bcs.n	8002460 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d10b      	bne.n	8002460 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244c:	f043 0204 	orr.w	r2, r3, #4
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e0a2      	b.n	80025a6 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0d6      	beq.n	800241c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800246e:	e070      	b.n	8002552 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002470:	4b4f      	ldr	r3, [pc, #316]	; (80025b0 <HAL_ADC_PollForConversion+0x1f4>)
 8002472:	681c      	ldr	r4, [r3, #0]
 8002474:	2002      	movs	r0, #2
 8002476:	f001 feeb 	bl	8004250 <HAL_RCCEx_GetPeriphCLKFreq>
 800247a:	4603      	mov	r3, r0
 800247c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6919      	ldr	r1, [r3, #16]
 8002486:	4b4b      	ldr	r3, [pc, #300]	; (80025b4 <HAL_ADC_PollForConversion+0x1f8>)
 8002488:	400b      	ands	r3, r1
 800248a:	2b00      	cmp	r3, #0
 800248c:	d118      	bne.n	80024c0 <HAL_ADC_PollForConversion+0x104>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68d9      	ldr	r1, [r3, #12]
 8002494:	4b48      	ldr	r3, [pc, #288]	; (80025b8 <HAL_ADC_PollForConversion+0x1fc>)
 8002496:	400b      	ands	r3, r1
 8002498:	2b00      	cmp	r3, #0
 800249a:	d111      	bne.n	80024c0 <HAL_ADC_PollForConversion+0x104>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6919      	ldr	r1, [r3, #16]
 80024a2:	4b46      	ldr	r3, [pc, #280]	; (80025bc <HAL_ADC_PollForConversion+0x200>)
 80024a4:	400b      	ands	r3, r1
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d108      	bne.n	80024bc <HAL_ADC_PollForConversion+0x100>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68d9      	ldr	r1, [r3, #12]
 80024b0:	4b43      	ldr	r3, [pc, #268]	; (80025c0 <HAL_ADC_PollForConversion+0x204>)
 80024b2:	400b      	ands	r3, r1
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <HAL_ADC_PollForConversion+0x100>
 80024b8:	2314      	movs	r3, #20
 80024ba:	e020      	b.n	80024fe <HAL_ADC_PollForConversion+0x142>
 80024bc:	2329      	movs	r3, #41	; 0x29
 80024be:	e01e      	b.n	80024fe <HAL_ADC_PollForConversion+0x142>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6919      	ldr	r1, [r3, #16]
 80024c6:	4b3d      	ldr	r3, [pc, #244]	; (80025bc <HAL_ADC_PollForConversion+0x200>)
 80024c8:	400b      	ands	r3, r1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d106      	bne.n	80024dc <HAL_ADC_PollForConversion+0x120>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68d9      	ldr	r1, [r3, #12]
 80024d4:	4b3a      	ldr	r3, [pc, #232]	; (80025c0 <HAL_ADC_PollForConversion+0x204>)
 80024d6:	400b      	ands	r3, r1
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00d      	beq.n	80024f8 <HAL_ADC_PollForConversion+0x13c>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6919      	ldr	r1, [r3, #16]
 80024e2:	4b38      	ldr	r3, [pc, #224]	; (80025c4 <HAL_ADC_PollForConversion+0x208>)
 80024e4:	400b      	ands	r3, r1
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d108      	bne.n	80024fc <HAL_ADC_PollForConversion+0x140>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68d9      	ldr	r1, [r3, #12]
 80024f0:	4b34      	ldr	r3, [pc, #208]	; (80025c4 <HAL_ADC_PollForConversion+0x208>)
 80024f2:	400b      	ands	r3, r1
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d101      	bne.n	80024fc <HAL_ADC_PollForConversion+0x140>
 80024f8:	2354      	movs	r3, #84	; 0x54
 80024fa:	e000      	b.n	80024fe <HAL_ADC_PollForConversion+0x142>
 80024fc:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80024fe:	fb02 f303 	mul.w	r3, r2, r3
 8002502:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002504:	e021      	b.n	800254a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250c:	d01a      	beq.n	8002544 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d007      	beq.n	8002524 <HAL_ADC_PollForConversion+0x168>
 8002514:	f7ff fd72 	bl	8001ffc <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	429a      	cmp	r2, r3
 8002522:	d20f      	bcs.n	8002544 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	429a      	cmp	r2, r3
 800252a:	d90b      	bls.n	8002544 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002530:	f043 0204 	orr.w	r2, r3, #4
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e030      	b.n	80025a6 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	3301      	adds	r3, #1
 8002548:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	429a      	cmp	r2, r3
 8002550:	d8d9      	bhi.n	8002506 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f06f 0212 	mvn.w	r2, #18
 800255a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002560:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002572:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002576:	d115      	bne.n	80025a4 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800257c:	2b00      	cmp	r3, #0
 800257e:	d111      	bne.n	80025a4 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002584:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002590:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d105      	bne.n	80025a4 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259c:	f043 0201 	orr.w	r2, r3, #1
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	371c      	adds	r7, #28
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd90      	pop	{r4, r7, pc}
 80025ae:	bf00      	nop
 80025b0:	20000004 	.word	0x20000004
 80025b4:	24924924 	.word	0x24924924
 80025b8:	00924924 	.word	0x00924924
 80025bc:	12492492 	.word	0x12492492
 80025c0:	00492492 	.word	0x00492492
 80025c4:	00249249 	.word	0x00249249

080025c8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr

080025e0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ea:	2300      	movs	r3, #0
 80025ec:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d101      	bne.n	8002600 <HAL_ADC_ConfigChannel+0x20>
 80025fc:	2302      	movs	r3, #2
 80025fe:	e0dc      	b.n	80027ba <HAL_ADC_ConfigChannel+0x1da>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	2b06      	cmp	r3, #6
 800260e:	d81c      	bhi.n	800264a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	4613      	mov	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4413      	add	r3, r2
 8002620:	3b05      	subs	r3, #5
 8002622:	221f      	movs	r2, #31
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	43db      	mvns	r3, r3
 800262a:	4019      	ands	r1, r3
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	6818      	ldr	r0, [r3, #0]
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	4613      	mov	r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	4413      	add	r3, r2
 800263a:	3b05      	subs	r3, #5
 800263c:	fa00 f203 	lsl.w	r2, r0, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	430a      	orrs	r2, r1
 8002646:	635a      	str	r2, [r3, #52]	; 0x34
 8002648:	e03c      	b.n	80026c4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b0c      	cmp	r3, #12
 8002650:	d81c      	bhi.n	800268c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	4613      	mov	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	3b23      	subs	r3, #35	; 0x23
 8002664:	221f      	movs	r2, #31
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	43db      	mvns	r3, r3
 800266c:	4019      	ands	r1, r3
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	6818      	ldr	r0, [r3, #0]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	4613      	mov	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	3b23      	subs	r3, #35	; 0x23
 800267e:	fa00 f203 	lsl.w	r2, r0, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	430a      	orrs	r2, r1
 8002688:	631a      	str	r2, [r3, #48]	; 0x30
 800268a:	e01b      	b.n	80026c4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	4613      	mov	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4413      	add	r3, r2
 800269c:	3b41      	subs	r3, #65	; 0x41
 800269e:	221f      	movs	r2, #31
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	43db      	mvns	r3, r3
 80026a6:	4019      	ands	r1, r3
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	6818      	ldr	r0, [r3, #0]
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	4613      	mov	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	4413      	add	r3, r2
 80026b6:	3b41      	subs	r3, #65	; 0x41
 80026b8:	fa00 f203 	lsl.w	r2, r0, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	430a      	orrs	r2, r1
 80026c2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2b09      	cmp	r3, #9
 80026ca:	d91c      	bls.n	8002706 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68d9      	ldr	r1, [r3, #12]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	4613      	mov	r3, r2
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	4413      	add	r3, r2
 80026dc:	3b1e      	subs	r3, #30
 80026de:	2207      	movs	r2, #7
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	43db      	mvns	r3, r3
 80026e6:	4019      	ands	r1, r3
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	6898      	ldr	r0, [r3, #8]
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	4613      	mov	r3, r2
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	4413      	add	r3, r2
 80026f6:	3b1e      	subs	r3, #30
 80026f8:	fa00 f203 	lsl.w	r2, r0, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	60da      	str	r2, [r3, #12]
 8002704:	e019      	b.n	800273a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6919      	ldr	r1, [r3, #16]
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	4613      	mov	r3, r2
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	4413      	add	r3, r2
 8002716:	2207      	movs	r2, #7
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	43db      	mvns	r3, r3
 800271e:	4019      	ands	r1, r3
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	6898      	ldr	r0, [r3, #8]
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	4613      	mov	r3, r2
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	4413      	add	r3, r2
 800272e:	fa00 f203 	lsl.w	r2, r0, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	430a      	orrs	r2, r1
 8002738:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2b10      	cmp	r3, #16
 8002740:	d003      	beq.n	800274a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002746:	2b11      	cmp	r3, #17
 8002748:	d132      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a1d      	ldr	r2, [pc, #116]	; (80027c4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d125      	bne.n	80027a0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d126      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002770:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2b10      	cmp	r3, #16
 8002778:	d11a      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800277a:	4b13      	ldr	r3, [pc, #76]	; (80027c8 <HAL_ADC_ConfigChannel+0x1e8>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a13      	ldr	r2, [pc, #76]	; (80027cc <HAL_ADC_ConfigChannel+0x1ec>)
 8002780:	fba2 2303 	umull	r2, r3, r2, r3
 8002784:	0c9a      	lsrs	r2, r3, #18
 8002786:	4613      	mov	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4413      	add	r3, r2
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002790:	e002      	b.n	8002798 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	3b01      	subs	r3, #1
 8002796:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f9      	bne.n	8002792 <HAL_ADC_ConfigChannel+0x1b2>
 800279e:	e007      	b.n	80027b0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a4:	f043 0220 	orr.w	r2, r3, #32
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3714      	adds	r7, #20
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr
 80027c4:	40012400 	.word	0x40012400
 80027c8:	20000004 	.word	0x20000004
 80027cc:	431bde83 	.word	0x431bde83

080027d0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027d8:	2300      	movs	r3, #0
 80027da:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80027dc:	2300      	movs	r3, #0
 80027de:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d040      	beq.n	8002870 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f042 0201 	orr.w	r2, r2, #1
 80027fc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80027fe:	4b1f      	ldr	r3, [pc, #124]	; (800287c <ADC_Enable+0xac>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a1f      	ldr	r2, [pc, #124]	; (8002880 <ADC_Enable+0xb0>)
 8002804:	fba2 2303 	umull	r2, r3, r2, r3
 8002808:	0c9b      	lsrs	r3, r3, #18
 800280a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800280c:	e002      	b.n	8002814 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	3b01      	subs	r3, #1
 8002812:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1f9      	bne.n	800280e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800281a:	f7ff fbef 	bl	8001ffc <HAL_GetTick>
 800281e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002820:	e01f      	b.n	8002862 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002822:	f7ff fbeb 	bl	8001ffc <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d918      	bls.n	8002862 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b01      	cmp	r3, #1
 800283c:	d011      	beq.n	8002862 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002842:	f043 0210 	orr.w	r2, r3, #16
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284e:	f043 0201 	orr.w	r2, r3, #1
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e007      	b.n	8002872 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b01      	cmp	r3, #1
 800286e:	d1d8      	bne.n	8002822 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	20000004 	.word	0x20000004
 8002880:	431bde83 	.word	0x431bde83

08002884 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800288c:	2300      	movs	r3, #0
 800288e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b01      	cmp	r3, #1
 800289c:	d12e      	bne.n	80028fc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f022 0201 	bic.w	r2, r2, #1
 80028ac:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80028ae:	f7ff fba5 	bl	8001ffc <HAL_GetTick>
 80028b2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80028b4:	e01b      	b.n	80028ee <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80028b6:	f7ff fba1 	bl	8001ffc <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d914      	bls.n	80028ee <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d10d      	bne.n	80028ee <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d6:	f043 0210 	orr.w	r2, r3, #16
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e2:	f043 0201 	orr.w	r2, r3, #1
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e007      	b.n	80028fe <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d0dc      	beq.n	80028b6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
	...

08002908 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002918:	4b0c      	ldr	r3, [pc, #48]	; (800294c <__NVIC_SetPriorityGrouping+0x44>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800291e:	68ba      	ldr	r2, [r7, #8]
 8002920:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002924:	4013      	ands	r3, r2
 8002926:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002930:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002938:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800293a:	4a04      	ldr	r2, [pc, #16]	; (800294c <__NVIC_SetPriorityGrouping+0x44>)
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	60d3      	str	r3, [r2, #12]
}
 8002940:	bf00      	nop
 8002942:	3714      	adds	r7, #20
 8002944:	46bd      	mov	sp, r7
 8002946:	bc80      	pop	{r7}
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	e000ed00 	.word	0xe000ed00

08002950 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002954:	4b04      	ldr	r3, [pc, #16]	; (8002968 <__NVIC_GetPriorityGrouping+0x18>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	0a1b      	lsrs	r3, r3, #8
 800295a:	f003 0307 	and.w	r3, r3, #7
}
 800295e:	4618      	mov	r0, r3
 8002960:	46bd      	mov	sp, r7
 8002962:	bc80      	pop	{r7}
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	e000ed00 	.word	0xe000ed00

0800296c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	4603      	mov	r3, r0
 8002974:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297a:	2b00      	cmp	r3, #0
 800297c:	db0b      	blt.n	8002996 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800297e:	79fb      	ldrb	r3, [r7, #7]
 8002980:	f003 021f 	and.w	r2, r3, #31
 8002984:	4906      	ldr	r1, [pc, #24]	; (80029a0 <__NVIC_EnableIRQ+0x34>)
 8002986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298a:	095b      	lsrs	r3, r3, #5
 800298c:	2001      	movs	r0, #1
 800298e:	fa00 f202 	lsl.w	r2, r0, r2
 8002992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002996:	bf00      	nop
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	bc80      	pop	{r7}
 800299e:	4770      	bx	lr
 80029a0:	e000e100 	.word	0xe000e100

080029a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	6039      	str	r1, [r7, #0]
 80029ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	db0a      	blt.n	80029ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	b2da      	uxtb	r2, r3
 80029bc:	490c      	ldr	r1, [pc, #48]	; (80029f0 <__NVIC_SetPriority+0x4c>)
 80029be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c2:	0112      	lsls	r2, r2, #4
 80029c4:	b2d2      	uxtb	r2, r2
 80029c6:	440b      	add	r3, r1
 80029c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029cc:	e00a      	b.n	80029e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	4908      	ldr	r1, [pc, #32]	; (80029f4 <__NVIC_SetPriority+0x50>)
 80029d4:	79fb      	ldrb	r3, [r7, #7]
 80029d6:	f003 030f 	and.w	r3, r3, #15
 80029da:	3b04      	subs	r3, #4
 80029dc:	0112      	lsls	r2, r2, #4
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	440b      	add	r3, r1
 80029e2:	761a      	strb	r2, [r3, #24]
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bc80      	pop	{r7}
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	e000e100 	.word	0xe000e100
 80029f4:	e000ed00 	.word	0xe000ed00

080029f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b089      	sub	sp, #36	; 0x24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f003 0307 	and.w	r3, r3, #7
 8002a0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	f1c3 0307 	rsb	r3, r3, #7
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	bf28      	it	cs
 8002a16:	2304      	movcs	r3, #4
 8002a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	2b06      	cmp	r3, #6
 8002a20:	d902      	bls.n	8002a28 <NVIC_EncodePriority+0x30>
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	3b03      	subs	r3, #3
 8002a26:	e000      	b.n	8002a2a <NVIC_EncodePriority+0x32>
 8002a28:	2300      	movs	r3, #0
 8002a2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	43da      	mvns	r2, r3
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	401a      	ands	r2, r3
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a40:	f04f 31ff 	mov.w	r1, #4294967295
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4a:	43d9      	mvns	r1, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a50:	4313      	orrs	r3, r2
         );
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3724      	adds	r7, #36	; 0x24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr

08002a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3b01      	subs	r3, #1
 8002a68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a6c:	d301      	bcc.n	8002a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e00f      	b.n	8002a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a72:	4a0a      	ldr	r2, [pc, #40]	; (8002a9c <SysTick_Config+0x40>)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	3b01      	subs	r3, #1
 8002a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a7a:	210f      	movs	r1, #15
 8002a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a80:	f7ff ff90 	bl	80029a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a84:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <SysTick_Config+0x40>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a8a:	4b04      	ldr	r3, [pc, #16]	; (8002a9c <SysTick_Config+0x40>)
 8002a8c:	2207      	movs	r2, #7
 8002a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	e000e010 	.word	0xe000e010

08002aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f7ff ff2d 	bl	8002908 <__NVIC_SetPriorityGrouping>
}
 8002aae:	bf00      	nop
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b086      	sub	sp, #24
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	4603      	mov	r3, r0
 8002abe:	60b9      	str	r1, [r7, #8]
 8002ac0:	607a      	str	r2, [r7, #4]
 8002ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ac8:	f7ff ff42 	bl	8002950 <__NVIC_GetPriorityGrouping>
 8002acc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	68b9      	ldr	r1, [r7, #8]
 8002ad2:	6978      	ldr	r0, [r7, #20]
 8002ad4:	f7ff ff90 	bl	80029f8 <NVIC_EncodePriority>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ade:	4611      	mov	r1, r2
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff ff5f 	bl	80029a4 <__NVIC_SetPriority>
}
 8002ae6:	bf00      	nop
 8002ae8:	3718      	adds	r7, #24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b082      	sub	sp, #8
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	4603      	mov	r3, r0
 8002af6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff ff35 	bl	800296c <__NVIC_EnableIRQ>
}
 8002b02:	bf00      	nop
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b082      	sub	sp, #8
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7ff ffa2 	bl	8002a5c <SysTick_Config>
 8002b18:	4603      	mov	r3, r0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b085      	sub	sp, #20
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d008      	beq.n	8002b4a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2204      	movs	r2, #4
 8002b3c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e020      	b.n	8002b8c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 020e 	bic.w	r2, r2, #14
 8002b58:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 0201 	bic.w	r2, r2, #1
 8002b68:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b72:	2101      	movs	r1, #1
 8002b74:	fa01 f202 	lsl.w	r2, r1, r2
 8002b78:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bc80      	pop	{r7}
 8002b94:	4770      	bx	lr
	...

08002b98 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d005      	beq.n	8002bba <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2204      	movs	r2, #4
 8002bb2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	73fb      	strb	r3, [r7, #15]
 8002bb8:	e051      	b.n	8002c5e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 020e 	bic.w	r2, r2, #14
 8002bc8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 0201 	bic.w	r2, r2, #1
 8002bd8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a22      	ldr	r2, [pc, #136]	; (8002c68 <HAL_DMA_Abort_IT+0xd0>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d029      	beq.n	8002c38 <HAL_DMA_Abort_IT+0xa0>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a20      	ldr	r2, [pc, #128]	; (8002c6c <HAL_DMA_Abort_IT+0xd4>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d022      	beq.n	8002c34 <HAL_DMA_Abort_IT+0x9c>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a1f      	ldr	r2, [pc, #124]	; (8002c70 <HAL_DMA_Abort_IT+0xd8>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d01a      	beq.n	8002c2e <HAL_DMA_Abort_IT+0x96>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a1d      	ldr	r2, [pc, #116]	; (8002c74 <HAL_DMA_Abort_IT+0xdc>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d012      	beq.n	8002c28 <HAL_DMA_Abort_IT+0x90>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a1c      	ldr	r2, [pc, #112]	; (8002c78 <HAL_DMA_Abort_IT+0xe0>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d00a      	beq.n	8002c22 <HAL_DMA_Abort_IT+0x8a>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a1a      	ldr	r2, [pc, #104]	; (8002c7c <HAL_DMA_Abort_IT+0xe4>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d102      	bne.n	8002c1c <HAL_DMA_Abort_IT+0x84>
 8002c16:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002c1a:	e00e      	b.n	8002c3a <HAL_DMA_Abort_IT+0xa2>
 8002c1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c20:	e00b      	b.n	8002c3a <HAL_DMA_Abort_IT+0xa2>
 8002c22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c26:	e008      	b.n	8002c3a <HAL_DMA_Abort_IT+0xa2>
 8002c28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c2c:	e005      	b.n	8002c3a <HAL_DMA_Abort_IT+0xa2>
 8002c2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c32:	e002      	b.n	8002c3a <HAL_DMA_Abort_IT+0xa2>
 8002c34:	2310      	movs	r3, #16
 8002c36:	e000      	b.n	8002c3a <HAL_DMA_Abort_IT+0xa2>
 8002c38:	2301      	movs	r3, #1
 8002c3a:	4a11      	ldr	r2, [pc, #68]	; (8002c80 <HAL_DMA_Abort_IT+0xe8>)
 8002c3c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	4798      	blx	r3
    } 
  }
  return status;
 8002c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40020008 	.word	0x40020008
 8002c6c:	4002001c 	.word	0x4002001c
 8002c70:	40020030 	.word	0x40020030
 8002c74:	40020044 	.word	0x40020044
 8002c78:	40020058 	.word	0x40020058
 8002c7c:	4002006c 	.word	0x4002006c
 8002c80:	40020000 	.word	0x40020000

08002c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b08b      	sub	sp, #44	; 0x2c
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c92:	2300      	movs	r3, #0
 8002c94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c96:	e169      	b.n	8002f6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c98:	2201      	movs	r2, #1
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	69fa      	ldr	r2, [r7, #28]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	f040 8158 	bne.w	8002f66 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	4a9a      	ldr	r2, [pc, #616]	; (8002f24 <HAL_GPIO_Init+0x2a0>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d05e      	beq.n	8002d7e <HAL_GPIO_Init+0xfa>
 8002cc0:	4a98      	ldr	r2, [pc, #608]	; (8002f24 <HAL_GPIO_Init+0x2a0>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d875      	bhi.n	8002db2 <HAL_GPIO_Init+0x12e>
 8002cc6:	4a98      	ldr	r2, [pc, #608]	; (8002f28 <HAL_GPIO_Init+0x2a4>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d058      	beq.n	8002d7e <HAL_GPIO_Init+0xfa>
 8002ccc:	4a96      	ldr	r2, [pc, #600]	; (8002f28 <HAL_GPIO_Init+0x2a4>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d86f      	bhi.n	8002db2 <HAL_GPIO_Init+0x12e>
 8002cd2:	4a96      	ldr	r2, [pc, #600]	; (8002f2c <HAL_GPIO_Init+0x2a8>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d052      	beq.n	8002d7e <HAL_GPIO_Init+0xfa>
 8002cd8:	4a94      	ldr	r2, [pc, #592]	; (8002f2c <HAL_GPIO_Init+0x2a8>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d869      	bhi.n	8002db2 <HAL_GPIO_Init+0x12e>
 8002cde:	4a94      	ldr	r2, [pc, #592]	; (8002f30 <HAL_GPIO_Init+0x2ac>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d04c      	beq.n	8002d7e <HAL_GPIO_Init+0xfa>
 8002ce4:	4a92      	ldr	r2, [pc, #584]	; (8002f30 <HAL_GPIO_Init+0x2ac>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d863      	bhi.n	8002db2 <HAL_GPIO_Init+0x12e>
 8002cea:	4a92      	ldr	r2, [pc, #584]	; (8002f34 <HAL_GPIO_Init+0x2b0>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d046      	beq.n	8002d7e <HAL_GPIO_Init+0xfa>
 8002cf0:	4a90      	ldr	r2, [pc, #576]	; (8002f34 <HAL_GPIO_Init+0x2b0>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d85d      	bhi.n	8002db2 <HAL_GPIO_Init+0x12e>
 8002cf6:	2b12      	cmp	r3, #18
 8002cf8:	d82a      	bhi.n	8002d50 <HAL_GPIO_Init+0xcc>
 8002cfa:	2b12      	cmp	r3, #18
 8002cfc:	d859      	bhi.n	8002db2 <HAL_GPIO_Init+0x12e>
 8002cfe:	a201      	add	r2, pc, #4	; (adr r2, 8002d04 <HAL_GPIO_Init+0x80>)
 8002d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d04:	08002d7f 	.word	0x08002d7f
 8002d08:	08002d59 	.word	0x08002d59
 8002d0c:	08002d6b 	.word	0x08002d6b
 8002d10:	08002dad 	.word	0x08002dad
 8002d14:	08002db3 	.word	0x08002db3
 8002d18:	08002db3 	.word	0x08002db3
 8002d1c:	08002db3 	.word	0x08002db3
 8002d20:	08002db3 	.word	0x08002db3
 8002d24:	08002db3 	.word	0x08002db3
 8002d28:	08002db3 	.word	0x08002db3
 8002d2c:	08002db3 	.word	0x08002db3
 8002d30:	08002db3 	.word	0x08002db3
 8002d34:	08002db3 	.word	0x08002db3
 8002d38:	08002db3 	.word	0x08002db3
 8002d3c:	08002db3 	.word	0x08002db3
 8002d40:	08002db3 	.word	0x08002db3
 8002d44:	08002db3 	.word	0x08002db3
 8002d48:	08002d61 	.word	0x08002d61
 8002d4c:	08002d75 	.word	0x08002d75
 8002d50:	4a79      	ldr	r2, [pc, #484]	; (8002f38 <HAL_GPIO_Init+0x2b4>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d013      	beq.n	8002d7e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d56:	e02c      	b.n	8002db2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	623b      	str	r3, [r7, #32]
          break;
 8002d5e:	e029      	b.n	8002db4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	3304      	adds	r3, #4
 8002d66:	623b      	str	r3, [r7, #32]
          break;
 8002d68:	e024      	b.n	8002db4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	3308      	adds	r3, #8
 8002d70:	623b      	str	r3, [r7, #32]
          break;
 8002d72:	e01f      	b.n	8002db4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	330c      	adds	r3, #12
 8002d7a:	623b      	str	r3, [r7, #32]
          break;
 8002d7c:	e01a      	b.n	8002db4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d102      	bne.n	8002d8c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d86:	2304      	movs	r3, #4
 8002d88:	623b      	str	r3, [r7, #32]
          break;
 8002d8a:	e013      	b.n	8002db4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d105      	bne.n	8002da0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d94:	2308      	movs	r3, #8
 8002d96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	69fa      	ldr	r2, [r7, #28]
 8002d9c:	611a      	str	r2, [r3, #16]
          break;
 8002d9e:	e009      	b.n	8002db4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002da0:	2308      	movs	r3, #8
 8002da2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	69fa      	ldr	r2, [r7, #28]
 8002da8:	615a      	str	r2, [r3, #20]
          break;
 8002daa:	e003      	b.n	8002db4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002dac:	2300      	movs	r3, #0
 8002dae:	623b      	str	r3, [r7, #32]
          break;
 8002db0:	e000      	b.n	8002db4 <HAL_GPIO_Init+0x130>
          break;
 8002db2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	2bff      	cmp	r3, #255	; 0xff
 8002db8:	d801      	bhi.n	8002dbe <HAL_GPIO_Init+0x13a>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	e001      	b.n	8002dc2 <HAL_GPIO_Init+0x13e>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	2bff      	cmp	r3, #255	; 0xff
 8002dc8:	d802      	bhi.n	8002dd0 <HAL_GPIO_Init+0x14c>
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	e002      	b.n	8002dd6 <HAL_GPIO_Init+0x152>
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	3b08      	subs	r3, #8
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	210f      	movs	r1, #15
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	fa01 f303 	lsl.w	r3, r1, r3
 8002de4:	43db      	mvns	r3, r3
 8002de6:	401a      	ands	r2, r3
 8002de8:	6a39      	ldr	r1, [r7, #32]
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	fa01 f303 	lsl.w	r3, r1, r3
 8002df0:	431a      	orrs	r2, r3
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f000 80b1 	beq.w	8002f66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e04:	4b4d      	ldr	r3, [pc, #308]	; (8002f3c <HAL_GPIO_Init+0x2b8>)
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	4a4c      	ldr	r2, [pc, #304]	; (8002f3c <HAL_GPIO_Init+0x2b8>)
 8002e0a:	f043 0301 	orr.w	r3, r3, #1
 8002e0e:	6193      	str	r3, [r2, #24]
 8002e10:	4b4a      	ldr	r3, [pc, #296]	; (8002f3c <HAL_GPIO_Init+0x2b8>)
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	60bb      	str	r3, [r7, #8]
 8002e1a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e1c:	4a48      	ldr	r2, [pc, #288]	; (8002f40 <HAL_GPIO_Init+0x2bc>)
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	089b      	lsrs	r3, r3, #2
 8002e22:	3302      	adds	r3, #2
 8002e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e28:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	f003 0303 	and.w	r3, r3, #3
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	220f      	movs	r2, #15
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a40      	ldr	r2, [pc, #256]	; (8002f44 <HAL_GPIO_Init+0x2c0>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d013      	beq.n	8002e70 <HAL_GPIO_Init+0x1ec>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4a3f      	ldr	r2, [pc, #252]	; (8002f48 <HAL_GPIO_Init+0x2c4>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d00d      	beq.n	8002e6c <HAL_GPIO_Init+0x1e8>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a3e      	ldr	r2, [pc, #248]	; (8002f4c <HAL_GPIO_Init+0x2c8>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d007      	beq.n	8002e68 <HAL_GPIO_Init+0x1e4>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a3d      	ldr	r2, [pc, #244]	; (8002f50 <HAL_GPIO_Init+0x2cc>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d101      	bne.n	8002e64 <HAL_GPIO_Init+0x1e0>
 8002e60:	2303      	movs	r3, #3
 8002e62:	e006      	b.n	8002e72 <HAL_GPIO_Init+0x1ee>
 8002e64:	2304      	movs	r3, #4
 8002e66:	e004      	b.n	8002e72 <HAL_GPIO_Init+0x1ee>
 8002e68:	2302      	movs	r3, #2
 8002e6a:	e002      	b.n	8002e72 <HAL_GPIO_Init+0x1ee>
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e000      	b.n	8002e72 <HAL_GPIO_Init+0x1ee>
 8002e70:	2300      	movs	r3, #0
 8002e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e74:	f002 0203 	and.w	r2, r2, #3
 8002e78:	0092      	lsls	r2, r2, #2
 8002e7a:	4093      	lsls	r3, r2
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e82:	492f      	ldr	r1, [pc, #188]	; (8002f40 <HAL_GPIO_Init+0x2bc>)
 8002e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e86:	089b      	lsrs	r3, r3, #2
 8002e88:	3302      	adds	r3, #2
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d006      	beq.n	8002eaa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002e9c:	4b2d      	ldr	r3, [pc, #180]	; (8002f54 <HAL_GPIO_Init+0x2d0>)
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	492c      	ldr	r1, [pc, #176]	; (8002f54 <HAL_GPIO_Init+0x2d0>)
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	600b      	str	r3, [r1, #0]
 8002ea8:	e006      	b.n	8002eb8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002eaa:	4b2a      	ldr	r3, [pc, #168]	; (8002f54 <HAL_GPIO_Init+0x2d0>)
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	4928      	ldr	r1, [pc, #160]	; (8002f54 <HAL_GPIO_Init+0x2d0>)
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d006      	beq.n	8002ed2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ec4:	4b23      	ldr	r3, [pc, #140]	; (8002f54 <HAL_GPIO_Init+0x2d0>)
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	4922      	ldr	r1, [pc, #136]	; (8002f54 <HAL_GPIO_Init+0x2d0>)
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	604b      	str	r3, [r1, #4]
 8002ed0:	e006      	b.n	8002ee0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ed2:	4b20      	ldr	r3, [pc, #128]	; (8002f54 <HAL_GPIO_Init+0x2d0>)
 8002ed4:	685a      	ldr	r2, [r3, #4]
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	43db      	mvns	r3, r3
 8002eda:	491e      	ldr	r1, [pc, #120]	; (8002f54 <HAL_GPIO_Init+0x2d0>)
 8002edc:	4013      	ands	r3, r2
 8002ede:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d006      	beq.n	8002efa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002eec:	4b19      	ldr	r3, [pc, #100]	; (8002f54 <HAL_GPIO_Init+0x2d0>)
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	4918      	ldr	r1, [pc, #96]	; (8002f54 <HAL_GPIO_Init+0x2d0>)
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	608b      	str	r3, [r1, #8]
 8002ef8:	e006      	b.n	8002f08 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002efa:	4b16      	ldr	r3, [pc, #88]	; (8002f54 <HAL_GPIO_Init+0x2d0>)
 8002efc:	689a      	ldr	r2, [r3, #8]
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	43db      	mvns	r3, r3
 8002f02:	4914      	ldr	r1, [pc, #80]	; (8002f54 <HAL_GPIO_Init+0x2d0>)
 8002f04:	4013      	ands	r3, r2
 8002f06:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d021      	beq.n	8002f58 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f14:	4b0f      	ldr	r3, [pc, #60]	; (8002f54 <HAL_GPIO_Init+0x2d0>)
 8002f16:	68da      	ldr	r2, [r3, #12]
 8002f18:	490e      	ldr	r1, [pc, #56]	; (8002f54 <HAL_GPIO_Init+0x2d0>)
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	60cb      	str	r3, [r1, #12]
 8002f20:	e021      	b.n	8002f66 <HAL_GPIO_Init+0x2e2>
 8002f22:	bf00      	nop
 8002f24:	10320000 	.word	0x10320000
 8002f28:	10310000 	.word	0x10310000
 8002f2c:	10220000 	.word	0x10220000
 8002f30:	10210000 	.word	0x10210000
 8002f34:	10120000 	.word	0x10120000
 8002f38:	10110000 	.word	0x10110000
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	40010000 	.word	0x40010000
 8002f44:	40010800 	.word	0x40010800
 8002f48:	40010c00 	.word	0x40010c00
 8002f4c:	40011000 	.word	0x40011000
 8002f50:	40011400 	.word	0x40011400
 8002f54:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f58:	4b0b      	ldr	r3, [pc, #44]	; (8002f88 <HAL_GPIO_Init+0x304>)
 8002f5a:	68da      	ldr	r2, [r3, #12]
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	43db      	mvns	r3, r3
 8002f60:	4909      	ldr	r1, [pc, #36]	; (8002f88 <HAL_GPIO_Init+0x304>)
 8002f62:	4013      	ands	r3, r2
 8002f64:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f68:	3301      	adds	r3, #1
 8002f6a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f72:	fa22 f303 	lsr.w	r3, r2, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f47f ae8e 	bne.w	8002c98 <HAL_GPIO_Init+0x14>
  }
}
 8002f7c:	bf00      	nop
 8002f7e:	bf00      	nop
 8002f80:	372c      	adds	r7, #44	; 0x2c
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bc80      	pop	{r7}
 8002f86:	4770      	bx	lr
 8002f88:	40010400 	.word	0x40010400

08002f8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	460b      	mov	r3, r1
 8002f96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	887b      	ldrh	r3, [r7, #2]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d002      	beq.n	8002faa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	73fb      	strb	r3, [r7, #15]
 8002fa8:	e001      	b.n	8002fae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002faa:	2300      	movs	r3, #0
 8002fac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3714      	adds	r7, #20
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bc80      	pop	{r7}
 8002fb8:	4770      	bx	lr

08002fba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	b083      	sub	sp, #12
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	807b      	strh	r3, [r7, #2]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fca:	787b      	ldrb	r3, [r7, #1]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d003      	beq.n	8002fd8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fd0:	887a      	ldrh	r2, [r7, #2]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002fd6:	e003      	b.n	8002fe0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002fd8:	887b      	ldrh	r3, [r7, #2]
 8002fda:	041a      	lsls	r2, r3, #16
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	611a      	str	r2, [r3, #16]
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bc80      	pop	{r7}
 8002fe8:	4770      	bx	lr
	...

08002fec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002ff6:	4b08      	ldr	r3, [pc, #32]	; (8003018 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ff8:	695a      	ldr	r2, [r3, #20]
 8002ffa:	88fb      	ldrh	r3, [r7, #6]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d006      	beq.n	8003010 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003002:	4a05      	ldr	r2, [pc, #20]	; (8003018 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003004:	88fb      	ldrh	r3, [r7, #6]
 8003006:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003008:	88fb      	ldrh	r3, [r7, #6]
 800300a:	4618      	mov	r0, r3
 800300c:	f7fe fa3e 	bl	800148c <HAL_GPIO_EXTI_Callback>
  }
}
 8003010:	bf00      	nop
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	40010400 	.word	0x40010400

0800301c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e12b      	b.n	8003286 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d106      	bne.n	8003048 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7fe fe38 	bl	8001cb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2224      	movs	r2, #36	; 0x24
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 0201 	bic.w	r2, r2, #1
 800305e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800306e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800307e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003080:	f000 ffea 	bl	8004058 <HAL_RCC_GetPCLK1Freq>
 8003084:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	4a81      	ldr	r2, [pc, #516]	; (8003290 <HAL_I2C_Init+0x274>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d807      	bhi.n	80030a0 <HAL_I2C_Init+0x84>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	4a80      	ldr	r2, [pc, #512]	; (8003294 <HAL_I2C_Init+0x278>)
 8003094:	4293      	cmp	r3, r2
 8003096:	bf94      	ite	ls
 8003098:	2301      	movls	r3, #1
 800309a:	2300      	movhi	r3, #0
 800309c:	b2db      	uxtb	r3, r3
 800309e:	e006      	b.n	80030ae <HAL_I2C_Init+0x92>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	4a7d      	ldr	r2, [pc, #500]	; (8003298 <HAL_I2C_Init+0x27c>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	bf94      	ite	ls
 80030a8:	2301      	movls	r3, #1
 80030aa:	2300      	movhi	r3, #0
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e0e7      	b.n	8003286 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	4a78      	ldr	r2, [pc, #480]	; (800329c <HAL_I2C_Init+0x280>)
 80030ba:	fba2 2303 	umull	r2, r3, r2, r3
 80030be:	0c9b      	lsrs	r3, r3, #18
 80030c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68ba      	ldr	r2, [r7, #8]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	4a6a      	ldr	r2, [pc, #424]	; (8003290 <HAL_I2C_Init+0x274>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d802      	bhi.n	80030f0 <HAL_I2C_Init+0xd4>
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	3301      	adds	r3, #1
 80030ee:	e009      	b.n	8003104 <HAL_I2C_Init+0xe8>
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030f6:	fb02 f303 	mul.w	r3, r2, r3
 80030fa:	4a69      	ldr	r2, [pc, #420]	; (80032a0 <HAL_I2C_Init+0x284>)
 80030fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003100:	099b      	lsrs	r3, r3, #6
 8003102:	3301      	adds	r3, #1
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	6812      	ldr	r2, [r2, #0]
 8003108:	430b      	orrs	r3, r1
 800310a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003116:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	495c      	ldr	r1, [pc, #368]	; (8003290 <HAL_I2C_Init+0x274>)
 8003120:	428b      	cmp	r3, r1
 8003122:	d819      	bhi.n	8003158 <HAL_I2C_Init+0x13c>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	1e59      	subs	r1, r3, #1
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003132:	1c59      	adds	r1, r3, #1
 8003134:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003138:	400b      	ands	r3, r1
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00a      	beq.n	8003154 <HAL_I2C_Init+0x138>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	1e59      	subs	r1, r3, #1
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	fbb1 f3f3 	udiv	r3, r1, r3
 800314c:	3301      	adds	r3, #1
 800314e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003152:	e051      	b.n	80031f8 <HAL_I2C_Init+0x1dc>
 8003154:	2304      	movs	r3, #4
 8003156:	e04f      	b.n	80031f8 <HAL_I2C_Init+0x1dc>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d111      	bne.n	8003184 <HAL_I2C_Init+0x168>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	1e58      	subs	r0, r3, #1
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6859      	ldr	r1, [r3, #4]
 8003168:	460b      	mov	r3, r1
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	440b      	add	r3, r1
 800316e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003172:	3301      	adds	r3, #1
 8003174:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003178:	2b00      	cmp	r3, #0
 800317a:	bf0c      	ite	eq
 800317c:	2301      	moveq	r3, #1
 800317e:	2300      	movne	r3, #0
 8003180:	b2db      	uxtb	r3, r3
 8003182:	e012      	b.n	80031aa <HAL_I2C_Init+0x18e>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	1e58      	subs	r0, r3, #1
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6859      	ldr	r1, [r3, #4]
 800318c:	460b      	mov	r3, r1
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	440b      	add	r3, r1
 8003192:	0099      	lsls	r1, r3, #2
 8003194:	440b      	add	r3, r1
 8003196:	fbb0 f3f3 	udiv	r3, r0, r3
 800319a:	3301      	adds	r3, #1
 800319c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	bf0c      	ite	eq
 80031a4:	2301      	moveq	r3, #1
 80031a6:	2300      	movne	r3, #0
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <HAL_I2C_Init+0x196>
 80031ae:	2301      	movs	r3, #1
 80031b0:	e022      	b.n	80031f8 <HAL_I2C_Init+0x1dc>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10e      	bne.n	80031d8 <HAL_I2C_Init+0x1bc>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	1e58      	subs	r0, r3, #1
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6859      	ldr	r1, [r3, #4]
 80031c2:	460b      	mov	r3, r1
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	440b      	add	r3, r1
 80031c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80031cc:	3301      	adds	r3, #1
 80031ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031d6:	e00f      	b.n	80031f8 <HAL_I2C_Init+0x1dc>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	1e58      	subs	r0, r3, #1
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6859      	ldr	r1, [r3, #4]
 80031e0:	460b      	mov	r3, r1
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	440b      	add	r3, r1
 80031e6:	0099      	lsls	r1, r3, #2
 80031e8:	440b      	add	r3, r1
 80031ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ee:	3301      	adds	r3, #1
 80031f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031f8:	6879      	ldr	r1, [r7, #4]
 80031fa:	6809      	ldr	r1, [r1, #0]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	69da      	ldr	r2, [r3, #28]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a1b      	ldr	r3, [r3, #32]
 8003212:	431a      	orrs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	430a      	orrs	r2, r1
 800321a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003226:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	6911      	ldr	r1, [r2, #16]
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	68d2      	ldr	r2, [r2, #12]
 8003232:	4311      	orrs	r1, r2
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	6812      	ldr	r2, [r2, #0]
 8003238:	430b      	orrs	r3, r1
 800323a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	695a      	ldr	r2, [r3, #20]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	431a      	orrs	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	430a      	orrs	r2, r1
 8003256:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 0201 	orr.w	r2, r2, #1
 8003266:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2220      	movs	r2, #32
 8003272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	000186a0 	.word	0x000186a0
 8003294:	001e847f 	.word	0x001e847f
 8003298:	003d08ff 	.word	0x003d08ff
 800329c:	431bde83 	.word	0x431bde83
 80032a0:	10624dd3 	.word	0x10624dd3

080032a4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b088      	sub	sp, #32
 80032a8:	af02      	add	r7, sp, #8
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	607a      	str	r2, [r7, #4]
 80032ae:	461a      	mov	r2, r3
 80032b0:	460b      	mov	r3, r1
 80032b2:	817b      	strh	r3, [r7, #10]
 80032b4:	4613      	mov	r3, r2
 80032b6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032b8:	f7fe fea0 	bl	8001ffc <HAL_GetTick>
 80032bc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b20      	cmp	r3, #32
 80032c8:	f040 80e0 	bne.w	800348c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	2319      	movs	r3, #25
 80032d2:	2201      	movs	r2, #1
 80032d4:	4970      	ldr	r1, [pc, #448]	; (8003498 <HAL_I2C_Master_Transmit+0x1f4>)
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f000 f964 	bl	80035a4 <I2C_WaitOnFlagUntilTimeout>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80032e2:	2302      	movs	r3, #2
 80032e4:	e0d3      	b.n	800348e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d101      	bne.n	80032f4 <HAL_I2C_Master_Transmit+0x50>
 80032f0:	2302      	movs	r3, #2
 80032f2:	e0cc      	b.n	800348e <HAL_I2C_Master_Transmit+0x1ea>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b01      	cmp	r3, #1
 8003308:	d007      	beq.n	800331a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f042 0201 	orr.w	r2, r2, #1
 8003318:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003328:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2221      	movs	r2, #33	; 0x21
 800332e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2210      	movs	r2, #16
 8003336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	893a      	ldrh	r2, [r7, #8]
 800334a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003350:	b29a      	uxth	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	4a50      	ldr	r2, [pc, #320]	; (800349c <HAL_I2C_Master_Transmit+0x1f8>)
 800335a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800335c:	8979      	ldrh	r1, [r7, #10]
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	6a3a      	ldr	r2, [r7, #32]
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f000 f89c 	bl	80034a0 <I2C_MasterRequestWrite>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e08d      	b.n	800348e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003372:	2300      	movs	r3, #0
 8003374:	613b      	str	r3, [r7, #16]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	613b      	str	r3, [r7, #16]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	613b      	str	r3, [r7, #16]
 8003386:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003388:	e066      	b.n	8003458 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	6a39      	ldr	r1, [r7, #32]
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f000 f9de 	bl	8003750 <I2C_WaitOnTXEFlagUntilTimeout>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00d      	beq.n	80033b6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	2b04      	cmp	r3, #4
 80033a0:	d107      	bne.n	80033b2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e06b      	b.n	800348e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ba:	781a      	ldrb	r2, [r3, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c6:	1c5a      	adds	r2, r3, #1
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	3b01      	subs	r3, #1
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033de:	3b01      	subs	r3, #1
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	f003 0304 	and.w	r3, r3, #4
 80033f0:	2b04      	cmp	r3, #4
 80033f2:	d11b      	bne.n	800342c <HAL_I2C_Master_Transmit+0x188>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d017      	beq.n	800342c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	781a      	ldrb	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340c:	1c5a      	adds	r2, r3, #1
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003416:	b29b      	uxth	r3, r3
 8003418:	3b01      	subs	r3, #1
 800341a:	b29a      	uxth	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003424:	3b01      	subs	r3, #1
 8003426:	b29a      	uxth	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	6a39      	ldr	r1, [r7, #32]
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f000 f9ce 	bl	80037d2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00d      	beq.n	8003458 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	2b04      	cmp	r3, #4
 8003442:	d107      	bne.n	8003454 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003452:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e01a      	b.n	800348e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800345c:	2b00      	cmp	r3, #0
 800345e:	d194      	bne.n	800338a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800346e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2220      	movs	r2, #32
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003488:	2300      	movs	r3, #0
 800348a:	e000      	b.n	800348e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800348c:	2302      	movs	r3, #2
  }
}
 800348e:	4618      	mov	r0, r3
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	00100002 	.word	0x00100002
 800349c:	ffff0000 	.word	0xffff0000

080034a0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b088      	sub	sp, #32
 80034a4:	af02      	add	r7, sp, #8
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	607a      	str	r2, [r7, #4]
 80034aa:	603b      	str	r3, [r7, #0]
 80034ac:	460b      	mov	r3, r1
 80034ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	2b08      	cmp	r3, #8
 80034ba:	d006      	beq.n	80034ca <I2C_MasterRequestWrite+0x2a>
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d003      	beq.n	80034ca <I2C_MasterRequestWrite+0x2a>
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034c8:	d108      	bne.n	80034dc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	e00b      	b.n	80034f4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e0:	2b12      	cmp	r3, #18
 80034e2:	d107      	bne.n	80034f4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f000 f84f 	bl	80035a4 <I2C_WaitOnFlagUntilTimeout>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00d      	beq.n	8003528 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800351a:	d103      	bne.n	8003524 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003522:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e035      	b.n	8003594 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003530:	d108      	bne.n	8003544 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003532:	897b      	ldrh	r3, [r7, #10]
 8003534:	b2db      	uxtb	r3, r3
 8003536:	461a      	mov	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003540:	611a      	str	r2, [r3, #16]
 8003542:	e01b      	b.n	800357c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003544:	897b      	ldrh	r3, [r7, #10]
 8003546:	11db      	asrs	r3, r3, #7
 8003548:	b2db      	uxtb	r3, r3
 800354a:	f003 0306 	and.w	r3, r3, #6
 800354e:	b2db      	uxtb	r3, r3
 8003550:	f063 030f 	orn	r3, r3, #15
 8003554:	b2da      	uxtb	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	490e      	ldr	r1, [pc, #56]	; (800359c <I2C_MasterRequestWrite+0xfc>)
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f000 f875 	bl	8003652 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e010      	b.n	8003594 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003572:	897b      	ldrh	r3, [r7, #10]
 8003574:	b2da      	uxtb	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	4907      	ldr	r1, [pc, #28]	; (80035a0 <I2C_MasterRequestWrite+0x100>)
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f000 f865 	bl	8003652 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e000      	b.n	8003594 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3718      	adds	r7, #24
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	00010008 	.word	0x00010008
 80035a0:	00010002 	.word	0x00010002

080035a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	603b      	str	r3, [r7, #0]
 80035b0:	4613      	mov	r3, r2
 80035b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035b4:	e025      	b.n	8003602 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035bc:	d021      	beq.n	8003602 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035be:	f7fe fd1d 	bl	8001ffc <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d302      	bcc.n	80035d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d116      	bne.n	8003602 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2220      	movs	r2, #32
 80035de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	f043 0220 	orr.w	r2, r3, #32
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e023      	b.n	800364a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	0c1b      	lsrs	r3, r3, #16
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b01      	cmp	r3, #1
 800360a:	d10d      	bne.n	8003628 <I2C_WaitOnFlagUntilTimeout+0x84>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	43da      	mvns	r2, r3
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	4013      	ands	r3, r2
 8003618:	b29b      	uxth	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	bf0c      	ite	eq
 800361e:	2301      	moveq	r3, #1
 8003620:	2300      	movne	r3, #0
 8003622:	b2db      	uxtb	r3, r3
 8003624:	461a      	mov	r2, r3
 8003626:	e00c      	b.n	8003642 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	43da      	mvns	r2, r3
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	4013      	ands	r3, r2
 8003634:	b29b      	uxth	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	bf0c      	ite	eq
 800363a:	2301      	moveq	r3, #1
 800363c:	2300      	movne	r3, #0
 800363e:	b2db      	uxtb	r3, r3
 8003640:	461a      	mov	r2, r3
 8003642:	79fb      	ldrb	r3, [r7, #7]
 8003644:	429a      	cmp	r2, r3
 8003646:	d0b6      	beq.n	80035b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b084      	sub	sp, #16
 8003656:	af00      	add	r7, sp, #0
 8003658:	60f8      	str	r0, [r7, #12]
 800365a:	60b9      	str	r1, [r7, #8]
 800365c:	607a      	str	r2, [r7, #4]
 800365e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003660:	e051      	b.n	8003706 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800366c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003670:	d123      	bne.n	80036ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003680:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800368a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2220      	movs	r2, #32
 8003696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	f043 0204 	orr.w	r2, r3, #4
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e046      	b.n	8003748 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c0:	d021      	beq.n	8003706 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036c2:	f7fe fc9b 	bl	8001ffc <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d302      	bcc.n	80036d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d116      	bne.n	8003706 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2220      	movs	r2, #32
 80036e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	f043 0220 	orr.w	r2, r3, #32
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e020      	b.n	8003748 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	0c1b      	lsrs	r3, r3, #16
 800370a:	b2db      	uxtb	r3, r3
 800370c:	2b01      	cmp	r3, #1
 800370e:	d10c      	bne.n	800372a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	43da      	mvns	r2, r3
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	4013      	ands	r3, r2
 800371c:	b29b      	uxth	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	bf14      	ite	ne
 8003722:	2301      	movne	r3, #1
 8003724:	2300      	moveq	r3, #0
 8003726:	b2db      	uxtb	r3, r3
 8003728:	e00b      	b.n	8003742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	43da      	mvns	r2, r3
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	4013      	ands	r3, r2
 8003736:	b29b      	uxth	r3, r3
 8003738:	2b00      	cmp	r3, #0
 800373a:	bf14      	ite	ne
 800373c:	2301      	movne	r3, #1
 800373e:	2300      	moveq	r3, #0
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d18d      	bne.n	8003662 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800375c:	e02d      	b.n	80037ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f000 f878 	bl	8003854 <I2C_IsAcknowledgeFailed>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e02d      	b.n	80037ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003774:	d021      	beq.n	80037ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003776:	f7fe fc41 	bl	8001ffc <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	68ba      	ldr	r2, [r7, #8]
 8003782:	429a      	cmp	r2, r3
 8003784:	d302      	bcc.n	800378c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d116      	bne.n	80037ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2220      	movs	r2, #32
 8003796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	f043 0220 	orr.w	r2, r3, #32
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e007      	b.n	80037ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c4:	2b80      	cmp	r3, #128	; 0x80
 80037c6:	d1ca      	bne.n	800375e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3710      	adds	r7, #16
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b084      	sub	sp, #16
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	60f8      	str	r0, [r7, #12]
 80037da:	60b9      	str	r1, [r7, #8]
 80037dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037de:	e02d      	b.n	800383c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f000 f837 	bl	8003854 <I2C_IsAcknowledgeFailed>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e02d      	b.n	800384c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f6:	d021      	beq.n	800383c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037f8:	f7fe fc00 	bl	8001ffc <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	429a      	cmp	r2, r3
 8003806:	d302      	bcc.n	800380e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d116      	bne.n	800383c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2220      	movs	r2, #32
 8003818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003828:	f043 0220 	orr.w	r2, r3, #32
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e007      	b.n	800384c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	f003 0304 	and.w	r3, r3, #4
 8003846:	2b04      	cmp	r3, #4
 8003848:	d1ca      	bne.n	80037e0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800386a:	d11b      	bne.n	80038a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003874:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2220      	movs	r2, #32
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003890:	f043 0204 	orr.w	r2, r3, #4
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e000      	b.n	80038a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bc80      	pop	{r7}
 80038ae:	4770      	bx	lr

080038b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e272      	b.n	8003da8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f000 8087 	beq.w	80039de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038d0:	4b92      	ldr	r3, [pc, #584]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f003 030c 	and.w	r3, r3, #12
 80038d8:	2b04      	cmp	r3, #4
 80038da:	d00c      	beq.n	80038f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038dc:	4b8f      	ldr	r3, [pc, #572]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f003 030c 	and.w	r3, r3, #12
 80038e4:	2b08      	cmp	r3, #8
 80038e6:	d112      	bne.n	800390e <HAL_RCC_OscConfig+0x5e>
 80038e8:	4b8c      	ldr	r3, [pc, #560]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038f4:	d10b      	bne.n	800390e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038f6:	4b89      	ldr	r3, [pc, #548]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d06c      	beq.n	80039dc <HAL_RCC_OscConfig+0x12c>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d168      	bne.n	80039dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e24c      	b.n	8003da8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003916:	d106      	bne.n	8003926 <HAL_RCC_OscConfig+0x76>
 8003918:	4b80      	ldr	r3, [pc, #512]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a7f      	ldr	r2, [pc, #508]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 800391e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003922:	6013      	str	r3, [r2, #0]
 8003924:	e02e      	b.n	8003984 <HAL_RCC_OscConfig+0xd4>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10c      	bne.n	8003948 <HAL_RCC_OscConfig+0x98>
 800392e:	4b7b      	ldr	r3, [pc, #492]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a7a      	ldr	r2, [pc, #488]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 8003934:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003938:	6013      	str	r3, [r2, #0]
 800393a:	4b78      	ldr	r3, [pc, #480]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a77      	ldr	r2, [pc, #476]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 8003940:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003944:	6013      	str	r3, [r2, #0]
 8003946:	e01d      	b.n	8003984 <HAL_RCC_OscConfig+0xd4>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003950:	d10c      	bne.n	800396c <HAL_RCC_OscConfig+0xbc>
 8003952:	4b72      	ldr	r3, [pc, #456]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a71      	ldr	r2, [pc, #452]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 8003958:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800395c:	6013      	str	r3, [r2, #0]
 800395e:	4b6f      	ldr	r3, [pc, #444]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a6e      	ldr	r2, [pc, #440]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 8003964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003968:	6013      	str	r3, [r2, #0]
 800396a:	e00b      	b.n	8003984 <HAL_RCC_OscConfig+0xd4>
 800396c:	4b6b      	ldr	r3, [pc, #428]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a6a      	ldr	r2, [pc, #424]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 8003972:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003976:	6013      	str	r3, [r2, #0]
 8003978:	4b68      	ldr	r3, [pc, #416]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a67      	ldr	r2, [pc, #412]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 800397e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003982:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d013      	beq.n	80039b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800398c:	f7fe fb36 	bl	8001ffc <HAL_GetTick>
 8003990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003994:	f7fe fb32 	bl	8001ffc <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b64      	cmp	r3, #100	; 0x64
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e200      	b.n	8003da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039a6:	4b5d      	ldr	r3, [pc, #372]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d0f0      	beq.n	8003994 <HAL_RCC_OscConfig+0xe4>
 80039b2:	e014      	b.n	80039de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b4:	f7fe fb22 	bl	8001ffc <HAL_GetTick>
 80039b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ba:	e008      	b.n	80039ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039bc:	f7fe fb1e 	bl	8001ffc <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b64      	cmp	r3, #100	; 0x64
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e1ec      	b.n	8003da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ce:	4b53      	ldr	r3, [pc, #332]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1f0      	bne.n	80039bc <HAL_RCC_OscConfig+0x10c>
 80039da:	e000      	b.n	80039de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d063      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039ea:	4b4c      	ldr	r3, [pc, #304]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f003 030c 	and.w	r3, r3, #12
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00b      	beq.n	8003a0e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80039f6:	4b49      	ldr	r3, [pc, #292]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f003 030c 	and.w	r3, r3, #12
 80039fe:	2b08      	cmp	r3, #8
 8003a00:	d11c      	bne.n	8003a3c <HAL_RCC_OscConfig+0x18c>
 8003a02:	4b46      	ldr	r3, [pc, #280]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d116      	bne.n	8003a3c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a0e:	4b43      	ldr	r3, [pc, #268]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d005      	beq.n	8003a26 <HAL_RCC_OscConfig+0x176>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d001      	beq.n	8003a26 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e1c0      	b.n	8003da8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a26:	4b3d      	ldr	r3, [pc, #244]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	4939      	ldr	r1, [pc, #228]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a3a:	e03a      	b.n	8003ab2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d020      	beq.n	8003a86 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a44:	4b36      	ldr	r3, [pc, #216]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003a46:	2201      	movs	r2, #1
 8003a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a4a:	f7fe fad7 	bl	8001ffc <HAL_GetTick>
 8003a4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a50:	e008      	b.n	8003a64 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a52:	f7fe fad3 	bl	8001ffc <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d901      	bls.n	8003a64 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e1a1      	b.n	8003da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a64:	4b2d      	ldr	r3, [pc, #180]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d0f0      	beq.n	8003a52 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a70:	4b2a      	ldr	r3, [pc, #168]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	00db      	lsls	r3, r3, #3
 8003a7e:	4927      	ldr	r1, [pc, #156]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	600b      	str	r3, [r1, #0]
 8003a84:	e015      	b.n	8003ab2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a86:	4b26      	ldr	r3, [pc, #152]	; (8003b20 <HAL_RCC_OscConfig+0x270>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a8c:	f7fe fab6 	bl	8001ffc <HAL_GetTick>
 8003a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a92:	e008      	b.n	8003aa6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a94:	f7fe fab2 	bl	8001ffc <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e180      	b.n	8003da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aa6:	4b1d      	ldr	r3, [pc, #116]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1f0      	bne.n	8003a94 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0308 	and.w	r3, r3, #8
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d03a      	beq.n	8003b34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d019      	beq.n	8003afa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ac6:	4b17      	ldr	r3, [pc, #92]	; (8003b24 <HAL_RCC_OscConfig+0x274>)
 8003ac8:	2201      	movs	r2, #1
 8003aca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003acc:	f7fe fa96 	bl	8001ffc <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ad4:	f7fe fa92 	bl	8001ffc <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e160      	b.n	8003da8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ae6:	4b0d      	ldr	r3, [pc, #52]	; (8003b1c <HAL_RCC_OscConfig+0x26c>)
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d0f0      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003af2:	2001      	movs	r0, #1
 8003af4:	f000 fad8 	bl	80040a8 <RCC_Delay>
 8003af8:	e01c      	b.n	8003b34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003afa:	4b0a      	ldr	r3, [pc, #40]	; (8003b24 <HAL_RCC_OscConfig+0x274>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b00:	f7fe fa7c 	bl	8001ffc <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b06:	e00f      	b.n	8003b28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b08:	f7fe fa78 	bl	8001ffc <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d908      	bls.n	8003b28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e146      	b.n	8003da8 <HAL_RCC_OscConfig+0x4f8>
 8003b1a:	bf00      	nop
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	42420000 	.word	0x42420000
 8003b24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b28:	4b92      	ldr	r3, [pc, #584]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d1e9      	bne.n	8003b08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0304 	and.w	r3, r3, #4
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f000 80a6 	beq.w	8003c8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b42:	2300      	movs	r3, #0
 8003b44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b46:	4b8b      	ldr	r3, [pc, #556]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10d      	bne.n	8003b6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b52:	4b88      	ldr	r3, [pc, #544]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003b54:	69db      	ldr	r3, [r3, #28]
 8003b56:	4a87      	ldr	r2, [pc, #540]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b5c:	61d3      	str	r3, [r2, #28]
 8003b5e:	4b85      	ldr	r3, [pc, #532]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b66:	60bb      	str	r3, [r7, #8]
 8003b68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b6e:	4b82      	ldr	r3, [pc, #520]	; (8003d78 <HAL_RCC_OscConfig+0x4c8>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d118      	bne.n	8003bac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b7a:	4b7f      	ldr	r3, [pc, #508]	; (8003d78 <HAL_RCC_OscConfig+0x4c8>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a7e      	ldr	r2, [pc, #504]	; (8003d78 <HAL_RCC_OscConfig+0x4c8>)
 8003b80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b86:	f7fe fa39 	bl	8001ffc <HAL_GetTick>
 8003b8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b8c:	e008      	b.n	8003ba0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b8e:	f7fe fa35 	bl	8001ffc <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b64      	cmp	r3, #100	; 0x64
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e103      	b.n	8003da8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba0:	4b75      	ldr	r3, [pc, #468]	; (8003d78 <HAL_RCC_OscConfig+0x4c8>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d0f0      	beq.n	8003b8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d106      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x312>
 8003bb4:	4b6f      	ldr	r3, [pc, #444]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	4a6e      	ldr	r2, [pc, #440]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003bba:	f043 0301 	orr.w	r3, r3, #1
 8003bbe:	6213      	str	r3, [r2, #32]
 8003bc0:	e02d      	b.n	8003c1e <HAL_RCC_OscConfig+0x36e>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10c      	bne.n	8003be4 <HAL_RCC_OscConfig+0x334>
 8003bca:	4b6a      	ldr	r3, [pc, #424]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	4a69      	ldr	r2, [pc, #420]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003bd0:	f023 0301 	bic.w	r3, r3, #1
 8003bd4:	6213      	str	r3, [r2, #32]
 8003bd6:	4b67      	ldr	r3, [pc, #412]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	4a66      	ldr	r2, [pc, #408]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003bdc:	f023 0304 	bic.w	r3, r3, #4
 8003be0:	6213      	str	r3, [r2, #32]
 8003be2:	e01c      	b.n	8003c1e <HAL_RCC_OscConfig+0x36e>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	2b05      	cmp	r3, #5
 8003bea:	d10c      	bne.n	8003c06 <HAL_RCC_OscConfig+0x356>
 8003bec:	4b61      	ldr	r3, [pc, #388]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	4a60      	ldr	r2, [pc, #384]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003bf2:	f043 0304 	orr.w	r3, r3, #4
 8003bf6:	6213      	str	r3, [r2, #32]
 8003bf8:	4b5e      	ldr	r3, [pc, #376]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	4a5d      	ldr	r2, [pc, #372]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003bfe:	f043 0301 	orr.w	r3, r3, #1
 8003c02:	6213      	str	r3, [r2, #32]
 8003c04:	e00b      	b.n	8003c1e <HAL_RCC_OscConfig+0x36e>
 8003c06:	4b5b      	ldr	r3, [pc, #364]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	4a5a      	ldr	r2, [pc, #360]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003c0c:	f023 0301 	bic.w	r3, r3, #1
 8003c10:	6213      	str	r3, [r2, #32]
 8003c12:	4b58      	ldr	r3, [pc, #352]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	4a57      	ldr	r2, [pc, #348]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003c18:	f023 0304 	bic.w	r3, r3, #4
 8003c1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d015      	beq.n	8003c52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c26:	f7fe f9e9 	bl	8001ffc <HAL_GetTick>
 8003c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c2c:	e00a      	b.n	8003c44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c2e:	f7fe f9e5 	bl	8001ffc <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e0b1      	b.n	8003da8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c44:	4b4b      	ldr	r3, [pc, #300]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d0ee      	beq.n	8003c2e <HAL_RCC_OscConfig+0x37e>
 8003c50:	e014      	b.n	8003c7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c52:	f7fe f9d3 	bl	8001ffc <HAL_GetTick>
 8003c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c58:	e00a      	b.n	8003c70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c5a:	f7fe f9cf 	bl	8001ffc <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e09b      	b.n	8003da8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c70:	4b40      	ldr	r3, [pc, #256]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003c72:	6a1b      	ldr	r3, [r3, #32]
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1ee      	bne.n	8003c5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c7c:	7dfb      	ldrb	r3, [r7, #23]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d105      	bne.n	8003c8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c82:	4b3c      	ldr	r3, [pc, #240]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003c84:	69db      	ldr	r3, [r3, #28]
 8003c86:	4a3b      	ldr	r2, [pc, #236]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003c88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 8087 	beq.w	8003da6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c98:	4b36      	ldr	r3, [pc, #216]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f003 030c 	and.w	r3, r3, #12
 8003ca0:	2b08      	cmp	r3, #8
 8003ca2:	d061      	beq.n	8003d68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	69db      	ldr	r3, [r3, #28]
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d146      	bne.n	8003d3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cac:	4b33      	ldr	r3, [pc, #204]	; (8003d7c <HAL_RCC_OscConfig+0x4cc>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb2:	f7fe f9a3 	bl	8001ffc <HAL_GetTick>
 8003cb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cb8:	e008      	b.n	8003ccc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cba:	f7fe f99f 	bl	8001ffc <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e06d      	b.n	8003da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ccc:	4b29      	ldr	r3, [pc, #164]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1f0      	bne.n	8003cba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ce0:	d108      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ce2:	4b24      	ldr	r3, [pc, #144]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	4921      	ldr	r1, [pc, #132]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cf4:	4b1f      	ldr	r3, [pc, #124]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a19      	ldr	r1, [r3, #32]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	430b      	orrs	r3, r1
 8003d06:	491b      	ldr	r1, [pc, #108]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d0c:	4b1b      	ldr	r3, [pc, #108]	; (8003d7c <HAL_RCC_OscConfig+0x4cc>)
 8003d0e:	2201      	movs	r2, #1
 8003d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d12:	f7fe f973 	bl	8001ffc <HAL_GetTick>
 8003d16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d18:	e008      	b.n	8003d2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d1a:	f7fe f96f 	bl	8001ffc <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d901      	bls.n	8003d2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e03d      	b.n	8003da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d2c:	4b11      	ldr	r3, [pc, #68]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d0f0      	beq.n	8003d1a <HAL_RCC_OscConfig+0x46a>
 8003d38:	e035      	b.n	8003da6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d3a:	4b10      	ldr	r3, [pc, #64]	; (8003d7c <HAL_RCC_OscConfig+0x4cc>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d40:	f7fe f95c 	bl	8001ffc <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d46:	e008      	b.n	8003d5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d48:	f7fe f958 	bl	8001ffc <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e026      	b.n	8003da8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d5a:	4b06      	ldr	r3, [pc, #24]	; (8003d74 <HAL_RCC_OscConfig+0x4c4>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1f0      	bne.n	8003d48 <HAL_RCC_OscConfig+0x498>
 8003d66:	e01e      	b.n	8003da6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	69db      	ldr	r3, [r3, #28]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d107      	bne.n	8003d80 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e019      	b.n	8003da8 <HAL_RCC_OscConfig+0x4f8>
 8003d74:	40021000 	.word	0x40021000
 8003d78:	40007000 	.word	0x40007000
 8003d7c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d80:	4b0b      	ldr	r3, [pc, #44]	; (8003db0 <HAL_RCC_OscConfig+0x500>)
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d106      	bne.n	8003da2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d001      	beq.n	8003da6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e000      	b.n	8003da8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3718      	adds	r7, #24
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	40021000 	.word	0x40021000

08003db4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d101      	bne.n	8003dc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e0d0      	b.n	8003f6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003dc8:	4b6a      	ldr	r3, [pc, #424]	; (8003f74 <HAL_RCC_ClockConfig+0x1c0>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d910      	bls.n	8003df8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dd6:	4b67      	ldr	r3, [pc, #412]	; (8003f74 <HAL_RCC_ClockConfig+0x1c0>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f023 0207 	bic.w	r2, r3, #7
 8003dde:	4965      	ldr	r1, [pc, #404]	; (8003f74 <HAL_RCC_ClockConfig+0x1c0>)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003de6:	4b63      	ldr	r3, [pc, #396]	; (8003f74 <HAL_RCC_ClockConfig+0x1c0>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0307 	and.w	r3, r3, #7
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d001      	beq.n	8003df8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e0b8      	b.n	8003f6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d020      	beq.n	8003e46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0304 	and.w	r3, r3, #4
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d005      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e10:	4b59      	ldr	r3, [pc, #356]	; (8003f78 <HAL_RCC_ClockConfig+0x1c4>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	4a58      	ldr	r2, [pc, #352]	; (8003f78 <HAL_RCC_ClockConfig+0x1c4>)
 8003e16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0308 	and.w	r3, r3, #8
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d005      	beq.n	8003e34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e28:	4b53      	ldr	r3, [pc, #332]	; (8003f78 <HAL_RCC_ClockConfig+0x1c4>)
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	4a52      	ldr	r2, [pc, #328]	; (8003f78 <HAL_RCC_ClockConfig+0x1c4>)
 8003e2e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003e32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e34:	4b50      	ldr	r3, [pc, #320]	; (8003f78 <HAL_RCC_ClockConfig+0x1c4>)
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	494d      	ldr	r1, [pc, #308]	; (8003f78 <HAL_RCC_ClockConfig+0x1c4>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d040      	beq.n	8003ed4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d107      	bne.n	8003e6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e5a:	4b47      	ldr	r3, [pc, #284]	; (8003f78 <HAL_RCC_ClockConfig+0x1c4>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d115      	bne.n	8003e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e07f      	b.n	8003f6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d107      	bne.n	8003e82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e72:	4b41      	ldr	r3, [pc, #260]	; (8003f78 <HAL_RCC_ClockConfig+0x1c4>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d109      	bne.n	8003e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e073      	b.n	8003f6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e82:	4b3d      	ldr	r3, [pc, #244]	; (8003f78 <HAL_RCC_ClockConfig+0x1c4>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e06b      	b.n	8003f6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e92:	4b39      	ldr	r3, [pc, #228]	; (8003f78 <HAL_RCC_ClockConfig+0x1c4>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f023 0203 	bic.w	r2, r3, #3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	4936      	ldr	r1, [pc, #216]	; (8003f78 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ea4:	f7fe f8aa 	bl	8001ffc <HAL_GetTick>
 8003ea8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eaa:	e00a      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eac:	f7fe f8a6 	bl	8001ffc <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e053      	b.n	8003f6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ec2:	4b2d      	ldr	r3, [pc, #180]	; (8003f78 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f003 020c 	and.w	r2, r3, #12
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d1eb      	bne.n	8003eac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ed4:	4b27      	ldr	r3, [pc, #156]	; (8003f74 <HAL_RCC_ClockConfig+0x1c0>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0307 	and.w	r3, r3, #7
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d210      	bcs.n	8003f04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ee2:	4b24      	ldr	r3, [pc, #144]	; (8003f74 <HAL_RCC_ClockConfig+0x1c0>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f023 0207 	bic.w	r2, r3, #7
 8003eea:	4922      	ldr	r1, [pc, #136]	; (8003f74 <HAL_RCC_ClockConfig+0x1c0>)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ef2:	4b20      	ldr	r3, [pc, #128]	; (8003f74 <HAL_RCC_ClockConfig+0x1c0>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0307 	and.w	r3, r3, #7
 8003efa:	683a      	ldr	r2, [r7, #0]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d001      	beq.n	8003f04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e032      	b.n	8003f6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0304 	and.w	r3, r3, #4
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d008      	beq.n	8003f22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f10:	4b19      	ldr	r3, [pc, #100]	; (8003f78 <HAL_RCC_ClockConfig+0x1c4>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	4916      	ldr	r1, [pc, #88]	; (8003f78 <HAL_RCC_ClockConfig+0x1c4>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0308 	and.w	r3, r3, #8
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d009      	beq.n	8003f42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f2e:	4b12      	ldr	r3, [pc, #72]	; (8003f78 <HAL_RCC_ClockConfig+0x1c4>)
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	490e      	ldr	r1, [pc, #56]	; (8003f78 <HAL_RCC_ClockConfig+0x1c4>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f42:	f000 f821 	bl	8003f88 <HAL_RCC_GetSysClockFreq>
 8003f46:	4602      	mov	r2, r0
 8003f48:	4b0b      	ldr	r3, [pc, #44]	; (8003f78 <HAL_RCC_ClockConfig+0x1c4>)
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	091b      	lsrs	r3, r3, #4
 8003f4e:	f003 030f 	and.w	r3, r3, #15
 8003f52:	490a      	ldr	r1, [pc, #40]	; (8003f7c <HAL_RCC_ClockConfig+0x1c8>)
 8003f54:	5ccb      	ldrb	r3, [r1, r3]
 8003f56:	fa22 f303 	lsr.w	r3, r2, r3
 8003f5a:	4a09      	ldr	r2, [pc, #36]	; (8003f80 <HAL_RCC_ClockConfig+0x1cc>)
 8003f5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f5e:	4b09      	ldr	r3, [pc, #36]	; (8003f84 <HAL_RCC_ClockConfig+0x1d0>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7fe f808 	bl	8001f78 <HAL_InitTick>

  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	40022000 	.word	0x40022000
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	080087bc 	.word	0x080087bc
 8003f80:	20000004 	.word	0x20000004
 8003f84:	20000008 	.word	0x20000008

08003f88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f88:	b490      	push	{r4, r7}
 8003f8a:	b08a      	sub	sp, #40	; 0x28
 8003f8c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003f8e:	4b29      	ldr	r3, [pc, #164]	; (8004034 <HAL_RCC_GetSysClockFreq+0xac>)
 8003f90:	1d3c      	adds	r4, r7, #4
 8003f92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003f98:	f240 2301 	movw	r3, #513	; 0x201
 8003f9c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	61fb      	str	r3, [r7, #28]
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	61bb      	str	r3, [r7, #24]
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8003faa:	2300      	movs	r3, #0
 8003fac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003fb2:	4b21      	ldr	r3, [pc, #132]	; (8004038 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	f003 030c 	and.w	r3, r3, #12
 8003fbe:	2b04      	cmp	r3, #4
 8003fc0:	d002      	beq.n	8003fc8 <HAL_RCC_GetSysClockFreq+0x40>
 8003fc2:	2b08      	cmp	r3, #8
 8003fc4:	d003      	beq.n	8003fce <HAL_RCC_GetSysClockFreq+0x46>
 8003fc6:	e02b      	b.n	8004020 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003fc8:	4b1c      	ldr	r3, [pc, #112]	; (800403c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003fca:	623b      	str	r3, [r7, #32]
      break;
 8003fcc:	e02b      	b.n	8004026 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	0c9b      	lsrs	r3, r3, #18
 8003fd2:	f003 030f 	and.w	r3, r3, #15
 8003fd6:	3328      	adds	r3, #40	; 0x28
 8003fd8:	443b      	add	r3, r7
 8003fda:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003fde:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d012      	beq.n	8004010 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003fea:	4b13      	ldr	r3, [pc, #76]	; (8004038 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	0c5b      	lsrs	r3, r3, #17
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	3328      	adds	r3, #40	; 0x28
 8003ff6:	443b      	add	r3, r7
 8003ff8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003ffc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	4a0e      	ldr	r2, [pc, #56]	; (800403c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004002:	fb03 f202 	mul.w	r2, r3, r2
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	fbb2 f3f3 	udiv	r3, r2, r3
 800400c:	627b      	str	r3, [r7, #36]	; 0x24
 800400e:	e004      	b.n	800401a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	4a0b      	ldr	r2, [pc, #44]	; (8004040 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004014:	fb02 f303 	mul.w	r3, r2, r3
 8004018:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800401a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401c:	623b      	str	r3, [r7, #32]
      break;
 800401e:	e002      	b.n	8004026 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004020:	4b06      	ldr	r3, [pc, #24]	; (800403c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004022:	623b      	str	r3, [r7, #32]
      break;
 8004024:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004026:	6a3b      	ldr	r3, [r7, #32]
}
 8004028:	4618      	mov	r0, r3
 800402a:	3728      	adds	r7, #40	; 0x28
 800402c:	46bd      	mov	sp, r7
 800402e:	bc90      	pop	{r4, r7}
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	08008794 	.word	0x08008794
 8004038:	40021000 	.word	0x40021000
 800403c:	007a1200 	.word	0x007a1200
 8004040:	003d0900 	.word	0x003d0900

08004044 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004048:	4b02      	ldr	r3, [pc, #8]	; (8004054 <HAL_RCC_GetHCLKFreq+0x10>)
 800404a:	681b      	ldr	r3, [r3, #0]
}
 800404c:	4618      	mov	r0, r3
 800404e:	46bd      	mov	sp, r7
 8004050:	bc80      	pop	{r7}
 8004052:	4770      	bx	lr
 8004054:	20000004 	.word	0x20000004

08004058 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800405c:	f7ff fff2 	bl	8004044 <HAL_RCC_GetHCLKFreq>
 8004060:	4602      	mov	r2, r0
 8004062:	4b05      	ldr	r3, [pc, #20]	; (8004078 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	0a1b      	lsrs	r3, r3, #8
 8004068:	f003 0307 	and.w	r3, r3, #7
 800406c:	4903      	ldr	r1, [pc, #12]	; (800407c <HAL_RCC_GetPCLK1Freq+0x24>)
 800406e:	5ccb      	ldrb	r3, [r1, r3]
 8004070:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004074:	4618      	mov	r0, r3
 8004076:	bd80      	pop	{r7, pc}
 8004078:	40021000 	.word	0x40021000
 800407c:	080087cc 	.word	0x080087cc

08004080 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004084:	f7ff ffde 	bl	8004044 <HAL_RCC_GetHCLKFreq>
 8004088:	4602      	mov	r2, r0
 800408a:	4b05      	ldr	r3, [pc, #20]	; (80040a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	0adb      	lsrs	r3, r3, #11
 8004090:	f003 0307 	and.w	r3, r3, #7
 8004094:	4903      	ldr	r1, [pc, #12]	; (80040a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004096:	5ccb      	ldrb	r3, [r1, r3]
 8004098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800409c:	4618      	mov	r0, r3
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	40021000 	.word	0x40021000
 80040a4:	080087cc 	.word	0x080087cc

080040a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80040b0:	4b0a      	ldr	r3, [pc, #40]	; (80040dc <RCC_Delay+0x34>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a0a      	ldr	r2, [pc, #40]	; (80040e0 <RCC_Delay+0x38>)
 80040b6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ba:	0a5b      	lsrs	r3, r3, #9
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	fb02 f303 	mul.w	r3, r2, r3
 80040c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80040c4:	bf00      	nop
  }
  while (Delay --);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	1e5a      	subs	r2, r3, #1
 80040ca:	60fa      	str	r2, [r7, #12]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1f9      	bne.n	80040c4 <RCC_Delay+0x1c>
}
 80040d0:	bf00      	nop
 80040d2:	bf00      	nop
 80040d4:	3714      	adds	r7, #20
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bc80      	pop	{r7}
 80040da:	4770      	bx	lr
 80040dc:	20000004 	.word	0x20000004
 80040e0:	10624dd3 	.word	0x10624dd3

080040e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80040ec:	2300      	movs	r3, #0
 80040ee:	613b      	str	r3, [r7, #16]
 80040f0:	2300      	movs	r3, #0
 80040f2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d07d      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004100:	2300      	movs	r3, #0
 8004102:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004104:	4b4f      	ldr	r3, [pc, #316]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004106:	69db      	ldr	r3, [r3, #28]
 8004108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10d      	bne.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004110:	4b4c      	ldr	r3, [pc, #304]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004112:	69db      	ldr	r3, [r3, #28]
 8004114:	4a4b      	ldr	r2, [pc, #300]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800411a:	61d3      	str	r3, [r2, #28]
 800411c:	4b49      	ldr	r3, [pc, #292]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800411e:	69db      	ldr	r3, [r3, #28]
 8004120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004124:	60bb      	str	r3, [r7, #8]
 8004126:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004128:	2301      	movs	r3, #1
 800412a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800412c:	4b46      	ldr	r3, [pc, #280]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004134:	2b00      	cmp	r3, #0
 8004136:	d118      	bne.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004138:	4b43      	ldr	r3, [pc, #268]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a42      	ldr	r2, [pc, #264]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800413e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004142:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004144:	f7fd ff5a 	bl	8001ffc <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800414a:	e008      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800414c:	f7fd ff56 	bl	8001ffc <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b64      	cmp	r3, #100	; 0x64
 8004158:	d901      	bls.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e06d      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800415e:	4b3a      	ldr	r3, [pc, #232]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004166:	2b00      	cmp	r3, #0
 8004168:	d0f0      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800416a:	4b36      	ldr	r3, [pc, #216]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004172:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d02e      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	429a      	cmp	r2, r3
 8004186:	d027      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004188:	4b2e      	ldr	r3, [pc, #184]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004190:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004192:	4b2e      	ldr	r3, [pc, #184]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004194:	2201      	movs	r2, #1
 8004196:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004198:	4b2c      	ldr	r3, [pc, #176]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800419a:	2200      	movs	r2, #0
 800419c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800419e:	4a29      	ldr	r2, [pc, #164]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d014      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ae:	f7fd ff25 	bl	8001ffc <HAL_GetTick>
 80041b2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041b4:	e00a      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041b6:	f7fd ff21 	bl	8001ffc <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d901      	bls.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e036      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041cc:	4b1d      	ldr	r3, [pc, #116]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	f003 0302 	and.w	r3, r3, #2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d0ee      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041d8:	4b1a      	ldr	r3, [pc, #104]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041da:	6a1b      	ldr	r3, [r3, #32]
 80041dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	4917      	ldr	r1, [pc, #92]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80041ea:	7dfb      	ldrb	r3, [r7, #23]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d105      	bne.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041f0:	4b14      	ldr	r3, [pc, #80]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041f2:	69db      	ldr	r3, [r3, #28]
 80041f4:	4a13      	ldr	r2, [pc, #76]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041fa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d008      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004208:	4b0e      	ldr	r3, [pc, #56]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	490b      	ldr	r1, [pc, #44]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004216:	4313      	orrs	r3, r2
 8004218:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0310 	and.w	r3, r3, #16
 8004222:	2b00      	cmp	r3, #0
 8004224:	d008      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004226:	4b07      	ldr	r3, [pc, #28]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	4904      	ldr	r1, [pc, #16]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004234:	4313      	orrs	r3, r2
 8004236:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3718      	adds	r7, #24
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	40021000 	.word	0x40021000
 8004248:	40007000 	.word	0x40007000
 800424c:	42420440 	.word	0x42420440

08004250 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004250:	b590      	push	{r4, r7, lr}
 8004252:	b08d      	sub	sp, #52	; 0x34
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004258:	4b58      	ldr	r3, [pc, #352]	; (80043bc <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800425a:	f107 040c 	add.w	r4, r7, #12
 800425e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004260:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004264:	f240 2301 	movw	r3, #513	; 0x201
 8004268:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800426a:	2300      	movs	r3, #0
 800426c:	627b      	str	r3, [r7, #36]	; 0x24
 800426e:	2300      	movs	r3, #0
 8004270:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004272:	2300      	movs	r3, #0
 8004274:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004276:	2300      	movs	r3, #0
 8004278:	61fb      	str	r3, [r7, #28]
 800427a:	2300      	movs	r3, #0
 800427c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2b10      	cmp	r3, #16
 8004282:	d00a      	beq.n	800429a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b10      	cmp	r3, #16
 8004288:	f200 808e 	bhi.w	80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d049      	beq.n	8004326 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2b02      	cmp	r3, #2
 8004296:	d079      	beq.n	800438c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004298:	e086      	b.n	80043a8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 800429a:	4b49      	ldr	r3, [pc, #292]	; (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80042a0:	4b47      	ldr	r3, [pc, #284]	; (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d07f      	beq.n	80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	0c9b      	lsrs	r3, r3, #18
 80042b0:	f003 030f 	and.w	r3, r3, #15
 80042b4:	3330      	adds	r3, #48	; 0x30
 80042b6:	443b      	add	r3, r7
 80042b8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80042bc:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d017      	beq.n	80042f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80042c8:	4b3d      	ldr	r3, [pc, #244]	; (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	0c5b      	lsrs	r3, r3, #17
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	3330      	adds	r3, #48	; 0x30
 80042d4:	443b      	add	r3, r7
 80042d6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80042da:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00d      	beq.n	8004302 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80042e6:	4a37      	ldr	r2, [pc, #220]	; (80043c4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80042e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80042ee:	6a3b      	ldr	r3, [r7, #32]
 80042f0:	fb02 f303 	mul.w	r3, r2, r3
 80042f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042f6:	e004      	b.n	8004302 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80042f8:	6a3b      	ldr	r3, [r7, #32]
 80042fa:	4a33      	ldr	r2, [pc, #204]	; (80043c8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80042fc:	fb02 f303 	mul.w	r3, r2, r3
 8004300:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004302:	4b2f      	ldr	r3, [pc, #188]	; (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800430a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800430e:	d102      	bne.n	8004316 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8004310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004312:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004314:	e04a      	b.n	80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8004316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004318:	005b      	lsls	r3, r3, #1
 800431a:	4a2c      	ldr	r2, [pc, #176]	; (80043cc <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 800431c:	fba2 2303 	umull	r2, r3, r2, r3
 8004320:	085b      	lsrs	r3, r3, #1
 8004322:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004324:	e042      	b.n	80043ac <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8004326:	4b26      	ldr	r3, [pc, #152]	; (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004332:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004336:	d108      	bne.n	800434a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8004342:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004346:	62bb      	str	r3, [r7, #40]	; 0x28
 8004348:	e01f      	b.n	800438a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004350:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004354:	d109      	bne.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8004356:	4b1a      	ldr	r3, [pc, #104]	; (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d003      	beq.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8004362:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004366:	62bb      	str	r3, [r7, #40]	; 0x28
 8004368:	e00f      	b.n	800438a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004370:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004374:	d11c      	bne.n	80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8004376:	4b12      	ldr	r3, [pc, #72]	; (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d016      	beq.n	80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8004382:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004386:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004388:	e012      	b.n	80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800438a:	e011      	b.n	80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800438c:	f7ff fe78 	bl	8004080 <HAL_RCC_GetPCLK2Freq>
 8004390:	4602      	mov	r2, r0
 8004392:	4b0b      	ldr	r3, [pc, #44]	; (80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	0b9b      	lsrs	r3, r3, #14
 8004398:	f003 0303 	and.w	r3, r3, #3
 800439c:	3301      	adds	r3, #1
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80043a6:	e004      	b.n	80043b2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80043a8:	bf00      	nop
 80043aa:	e002      	b.n	80043b2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80043ac:	bf00      	nop
 80043ae:	e000      	b.n	80043b2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80043b0:	bf00      	nop
    }
  }
  return (frequency);
 80043b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3734      	adds	r7, #52	; 0x34
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd90      	pop	{r4, r7, pc}
 80043bc:	080087a4 	.word	0x080087a4
 80043c0:	40021000 	.word	0x40021000
 80043c4:	007a1200 	.word	0x007a1200
 80043c8:	003d0900 	.word	0x003d0900
 80043cc:	aaaaaaab 	.word	0xaaaaaaab

080043d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e041      	b.n	8004466 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d106      	bne.n	80043fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f7fd fc9c 	bl	8001d34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2202      	movs	r2, #2
 8004400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	3304      	adds	r3, #4
 800440c:	4619      	mov	r1, r3
 800440e:	4610      	mov	r0, r2
 8004410:	f000 f962 	bl	80046d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3708      	adds	r7, #8
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
	...

08004470 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b01      	cmp	r3, #1
 8004482:	d001      	beq.n	8004488 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e032      	b.n	80044ee <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2202      	movs	r2, #2
 800448c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a18      	ldr	r2, [pc, #96]	; (80044f8 <HAL_TIM_Base_Start+0x88>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d00e      	beq.n	80044b8 <HAL_TIM_Base_Start+0x48>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044a2:	d009      	beq.n	80044b8 <HAL_TIM_Base_Start+0x48>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a14      	ldr	r2, [pc, #80]	; (80044fc <HAL_TIM_Base_Start+0x8c>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d004      	beq.n	80044b8 <HAL_TIM_Base_Start+0x48>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a13      	ldr	r2, [pc, #76]	; (8004500 <HAL_TIM_Base_Start+0x90>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d111      	bne.n	80044dc <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 0307 	and.w	r3, r3, #7
 80044c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2b06      	cmp	r3, #6
 80044c8:	d010      	beq.n	80044ec <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f042 0201 	orr.w	r2, r2, #1
 80044d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044da:	e007      	b.n	80044ec <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f042 0201 	orr.w	r2, r2, #1
 80044ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3714      	adds	r7, #20
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bc80      	pop	{r7}
 80044f6:	4770      	bx	lr
 80044f8:	40012c00 	.word	0x40012c00
 80044fc:	40000400 	.word	0x40000400
 8004500:	40000800 	.word	0x40000800

08004504 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6a1a      	ldr	r2, [r3, #32]
 8004512:	f241 1311 	movw	r3, #4369	; 0x1111
 8004516:	4013      	ands	r3, r2
 8004518:	2b00      	cmp	r3, #0
 800451a:	d10f      	bne.n	800453c <HAL_TIM_Base_Stop+0x38>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6a1a      	ldr	r2, [r3, #32]
 8004522:	f240 4344 	movw	r3, #1092	; 0x444
 8004526:	4013      	ands	r3, r2
 8004528:	2b00      	cmp	r3, #0
 800452a:	d107      	bne.n	800453c <HAL_TIM_Base_Stop+0x38>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 0201 	bic.w	r2, r2, #1
 800453a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	bc80      	pop	{r7}
 800454e:	4770      	bx	lr

08004550 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004560:	2b01      	cmp	r3, #1
 8004562:	d101      	bne.n	8004568 <HAL_TIM_ConfigClockSource+0x18>
 8004564:	2302      	movs	r3, #2
 8004566:	e0b3      	b.n	80046d0 <HAL_TIM_ConfigClockSource+0x180>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2202      	movs	r2, #2
 8004574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004586:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800458e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045a0:	d03e      	beq.n	8004620 <HAL_TIM_ConfigClockSource+0xd0>
 80045a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045a6:	f200 8087 	bhi.w	80046b8 <HAL_TIM_ConfigClockSource+0x168>
 80045aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045ae:	f000 8085 	beq.w	80046bc <HAL_TIM_ConfigClockSource+0x16c>
 80045b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045b6:	d87f      	bhi.n	80046b8 <HAL_TIM_ConfigClockSource+0x168>
 80045b8:	2b70      	cmp	r3, #112	; 0x70
 80045ba:	d01a      	beq.n	80045f2 <HAL_TIM_ConfigClockSource+0xa2>
 80045bc:	2b70      	cmp	r3, #112	; 0x70
 80045be:	d87b      	bhi.n	80046b8 <HAL_TIM_ConfigClockSource+0x168>
 80045c0:	2b60      	cmp	r3, #96	; 0x60
 80045c2:	d050      	beq.n	8004666 <HAL_TIM_ConfigClockSource+0x116>
 80045c4:	2b60      	cmp	r3, #96	; 0x60
 80045c6:	d877      	bhi.n	80046b8 <HAL_TIM_ConfigClockSource+0x168>
 80045c8:	2b50      	cmp	r3, #80	; 0x50
 80045ca:	d03c      	beq.n	8004646 <HAL_TIM_ConfigClockSource+0xf6>
 80045cc:	2b50      	cmp	r3, #80	; 0x50
 80045ce:	d873      	bhi.n	80046b8 <HAL_TIM_ConfigClockSource+0x168>
 80045d0:	2b40      	cmp	r3, #64	; 0x40
 80045d2:	d058      	beq.n	8004686 <HAL_TIM_ConfigClockSource+0x136>
 80045d4:	2b40      	cmp	r3, #64	; 0x40
 80045d6:	d86f      	bhi.n	80046b8 <HAL_TIM_ConfigClockSource+0x168>
 80045d8:	2b30      	cmp	r3, #48	; 0x30
 80045da:	d064      	beq.n	80046a6 <HAL_TIM_ConfigClockSource+0x156>
 80045dc:	2b30      	cmp	r3, #48	; 0x30
 80045de:	d86b      	bhi.n	80046b8 <HAL_TIM_ConfigClockSource+0x168>
 80045e0:	2b20      	cmp	r3, #32
 80045e2:	d060      	beq.n	80046a6 <HAL_TIM_ConfigClockSource+0x156>
 80045e4:	2b20      	cmp	r3, #32
 80045e6:	d867      	bhi.n	80046b8 <HAL_TIM_ConfigClockSource+0x168>
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d05c      	beq.n	80046a6 <HAL_TIM_ConfigClockSource+0x156>
 80045ec:	2b10      	cmp	r3, #16
 80045ee:	d05a      	beq.n	80046a6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80045f0:	e062      	b.n	80046b8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6818      	ldr	r0, [r3, #0]
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	6899      	ldr	r1, [r3, #8]
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685a      	ldr	r2, [r3, #4]
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	f000 f942 	bl	800488a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004614:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	609a      	str	r2, [r3, #8]
      break;
 800461e:	e04e      	b.n	80046be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6818      	ldr	r0, [r3, #0]
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	6899      	ldr	r1, [r3, #8]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	f000 f92b 	bl	800488a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	689a      	ldr	r2, [r3, #8]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004642:	609a      	str	r2, [r3, #8]
      break;
 8004644:	e03b      	b.n	80046be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6818      	ldr	r0, [r3, #0]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	6859      	ldr	r1, [r3, #4]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	461a      	mov	r2, r3
 8004654:	f000 f8a2 	bl	800479c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2150      	movs	r1, #80	; 0x50
 800465e:	4618      	mov	r0, r3
 8004660:	f000 f8f9 	bl	8004856 <TIM_ITRx_SetConfig>
      break;
 8004664:	e02b      	b.n	80046be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6818      	ldr	r0, [r3, #0]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	6859      	ldr	r1, [r3, #4]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	461a      	mov	r2, r3
 8004674:	f000 f8c0 	bl	80047f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2160      	movs	r1, #96	; 0x60
 800467e:	4618      	mov	r0, r3
 8004680:	f000 f8e9 	bl	8004856 <TIM_ITRx_SetConfig>
      break;
 8004684:	e01b      	b.n	80046be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6818      	ldr	r0, [r3, #0]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	6859      	ldr	r1, [r3, #4]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	461a      	mov	r2, r3
 8004694:	f000 f882 	bl	800479c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2140      	movs	r1, #64	; 0x40
 800469e:	4618      	mov	r0, r3
 80046a0:	f000 f8d9 	bl	8004856 <TIM_ITRx_SetConfig>
      break;
 80046a4:	e00b      	b.n	80046be <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4619      	mov	r1, r3
 80046b0:	4610      	mov	r0, r2
 80046b2:	f000 f8d0 	bl	8004856 <TIM_ITRx_SetConfig>
        break;
 80046b6:	e002      	b.n	80046be <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80046b8:	bf00      	nop
 80046ba:	e000      	b.n	80046be <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80046bc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046d8:	b480      	push	{r7}
 80046da:	b085      	sub	sp, #20
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a29      	ldr	r2, [pc, #164]	; (8004790 <TIM_Base_SetConfig+0xb8>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d00b      	beq.n	8004708 <TIM_Base_SetConfig+0x30>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046f6:	d007      	beq.n	8004708 <TIM_Base_SetConfig+0x30>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a26      	ldr	r2, [pc, #152]	; (8004794 <TIM_Base_SetConfig+0xbc>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d003      	beq.n	8004708 <TIM_Base_SetConfig+0x30>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a25      	ldr	r2, [pc, #148]	; (8004798 <TIM_Base_SetConfig+0xc0>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d108      	bne.n	800471a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800470e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	4313      	orrs	r3, r2
 8004718:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a1c      	ldr	r2, [pc, #112]	; (8004790 <TIM_Base_SetConfig+0xb8>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d00b      	beq.n	800473a <TIM_Base_SetConfig+0x62>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004728:	d007      	beq.n	800473a <TIM_Base_SetConfig+0x62>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a19      	ldr	r2, [pc, #100]	; (8004794 <TIM_Base_SetConfig+0xbc>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d003      	beq.n	800473a <TIM_Base_SetConfig+0x62>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a18      	ldr	r2, [pc, #96]	; (8004798 <TIM_Base_SetConfig+0xc0>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d108      	bne.n	800474c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004740:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	4313      	orrs	r3, r2
 800474a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	4313      	orrs	r3, r2
 8004758:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	689a      	ldr	r2, [r3, #8]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a07      	ldr	r2, [pc, #28]	; (8004790 <TIM_Base_SetConfig+0xb8>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d103      	bne.n	8004780 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	691a      	ldr	r2, [r3, #16]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	615a      	str	r2, [r3, #20]
}
 8004786:	bf00      	nop
 8004788:	3714      	adds	r7, #20
 800478a:	46bd      	mov	sp, r7
 800478c:	bc80      	pop	{r7}
 800478e:	4770      	bx	lr
 8004790:	40012c00 	.word	0x40012c00
 8004794:	40000400 	.word	0x40000400
 8004798:	40000800 	.word	0x40000800

0800479c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800479c:	b480      	push	{r7}
 800479e:	b087      	sub	sp, #28
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6a1b      	ldr	r3, [r3, #32]
 80047ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	f023 0201 	bic.w	r2, r3, #1
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	011b      	lsls	r3, r3, #4
 80047cc:	693a      	ldr	r2, [r7, #16]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	f023 030a 	bic.w	r3, r3, #10
 80047d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	4313      	orrs	r3, r2
 80047e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	621a      	str	r2, [r3, #32]
}
 80047ee:	bf00      	nop
 80047f0:	371c      	adds	r7, #28
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bc80      	pop	{r7}
 80047f6:	4770      	bx	lr

080047f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b087      	sub	sp, #28
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	f023 0210 	bic.w	r2, r3, #16
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004822:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	031b      	lsls	r3, r3, #12
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	4313      	orrs	r3, r2
 800482c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004834:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	011b      	lsls	r3, r3, #4
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	4313      	orrs	r3, r2
 800483e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	621a      	str	r2, [r3, #32]
}
 800484c:	bf00      	nop
 800484e:	371c      	adds	r7, #28
 8004850:	46bd      	mov	sp, r7
 8004852:	bc80      	pop	{r7}
 8004854:	4770      	bx	lr

08004856 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004856:	b480      	push	{r7}
 8004858:	b085      	sub	sp, #20
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
 800485e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800486c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800486e:	683a      	ldr	r2, [r7, #0]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	4313      	orrs	r3, r2
 8004874:	f043 0307 	orr.w	r3, r3, #7
 8004878:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	609a      	str	r2, [r3, #8]
}
 8004880:	bf00      	nop
 8004882:	3714      	adds	r7, #20
 8004884:	46bd      	mov	sp, r7
 8004886:	bc80      	pop	{r7}
 8004888:	4770      	bx	lr

0800488a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800488a:	b480      	push	{r7}
 800488c:	b087      	sub	sp, #28
 800488e:	af00      	add	r7, sp, #0
 8004890:	60f8      	str	r0, [r7, #12]
 8004892:	60b9      	str	r1, [r7, #8]
 8004894:	607a      	str	r2, [r7, #4]
 8004896:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048a4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	021a      	lsls	r2, r3, #8
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	431a      	orrs	r2, r3
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	609a      	str	r2, [r3, #8]
}
 80048be:	bf00      	nop
 80048c0:	371c      	adds	r7, #28
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bc80      	pop	{r7}
 80048c6:	4770      	bx	lr

080048c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d101      	bne.n	80048e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048dc:	2302      	movs	r3, #2
 80048de:	e046      	b.n	800496e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2202      	movs	r2, #2
 80048ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004906:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	4313      	orrs	r3, r2
 8004910:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a16      	ldr	r2, [pc, #88]	; (8004978 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d00e      	beq.n	8004942 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800492c:	d009      	beq.n	8004942 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a12      	ldr	r2, [pc, #72]	; (800497c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d004      	beq.n	8004942 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a10      	ldr	r2, [pc, #64]	; (8004980 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d10c      	bne.n	800495c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004948:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	4313      	orrs	r3, r2
 8004952:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68ba      	ldr	r2, [r7, #8]
 800495a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3714      	adds	r7, #20
 8004972:	46bd      	mov	sp, r7
 8004974:	bc80      	pop	{r7}
 8004976:	4770      	bx	lr
 8004978:	40012c00 	.word	0x40012c00
 800497c:	40000400 	.word	0x40000400
 8004980:	40000800 	.word	0x40000800

08004984 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d101      	bne.n	8004996 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e03f      	b.n	8004a16 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d106      	bne.n	80049b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f7fd f9de 	bl	8001d6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2224      	movs	r2, #36	; 0x24
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68da      	ldr	r2, [r3, #12]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 fc87 	bl	80052dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	691a      	ldr	r2, [r3, #16]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	695a      	ldr	r2, [r3, #20]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68da      	ldr	r2, [r3, #12]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2220      	movs	r2, #32
 8004a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2220      	movs	r2, #32
 8004a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3708      	adds	r7, #8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b08a      	sub	sp, #40	; 0x28
 8004a22:	af02      	add	r7, sp, #8
 8004a24:	60f8      	str	r0, [r7, #12]
 8004a26:	60b9      	str	r1, [r7, #8]
 8004a28:	603b      	str	r3, [r7, #0]
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b20      	cmp	r3, #32
 8004a3c:	d17c      	bne.n	8004b38 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d002      	beq.n	8004a4a <HAL_UART_Transmit+0x2c>
 8004a44:	88fb      	ldrh	r3, [r7, #6]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d101      	bne.n	8004a4e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e075      	b.n	8004b3a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d101      	bne.n	8004a5c <HAL_UART_Transmit+0x3e>
 8004a58:	2302      	movs	r3, #2
 8004a5a:	e06e      	b.n	8004b3a <HAL_UART_Transmit+0x11c>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2221      	movs	r2, #33	; 0x21
 8004a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a72:	f7fd fac3 	bl	8001ffc <HAL_GetTick>
 8004a76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	88fa      	ldrh	r2, [r7, #6]
 8004a7c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	88fa      	ldrh	r2, [r7, #6]
 8004a82:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a8c:	d108      	bne.n	8004aa0 <HAL_UART_Transmit+0x82>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d104      	bne.n	8004aa0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004a96:	2300      	movs	r3, #0
 8004a98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	61bb      	str	r3, [r7, #24]
 8004a9e:	e003      	b.n	8004aa8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004ab0:	e02a      	b.n	8004b08 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	9300      	str	r3, [sp, #0]
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	2180      	movs	r1, #128	; 0x80
 8004abc:	68f8      	ldr	r0, [r7, #12]
 8004abe:	f000 fa38 	bl	8004f32 <UART_WaitOnFlagUntilTimeout>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d001      	beq.n	8004acc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e036      	b.n	8004b3a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10b      	bne.n	8004aea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	881b      	ldrh	r3, [r3, #0]
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ae0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	3302      	adds	r3, #2
 8004ae6:	61bb      	str	r3, [r7, #24]
 8004ae8:	e007      	b.n	8004afa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	781a      	ldrb	r2, [r3, #0]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	3301      	adds	r3, #1
 8004af8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	3b01      	subs	r3, #1
 8004b02:	b29a      	uxth	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1cf      	bne.n	8004ab2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	2140      	movs	r1, #64	; 0x40
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	f000 fa08 	bl	8004f32 <UART_WaitOnFlagUntilTimeout>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d001      	beq.n	8004b2c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e006      	b.n	8004b3a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2220      	movs	r2, #32
 8004b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004b34:	2300      	movs	r3, #0
 8004b36:	e000      	b.n	8004b3a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004b38:	2302      	movs	r3, #2
  }
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3720      	adds	r7, #32
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b084      	sub	sp, #16
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	60f8      	str	r0, [r7, #12]
 8004b4a:	60b9      	str	r1, [r7, #8]
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b20      	cmp	r3, #32
 8004b5a:	d11d      	bne.n	8004b98 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d002      	beq.n	8004b68 <HAL_UART_Receive_IT+0x26>
 8004b62:	88fb      	ldrh	r3, [r7, #6]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d101      	bne.n	8004b6c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e016      	b.n	8004b9a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d101      	bne.n	8004b7a <HAL_UART_Receive_IT+0x38>
 8004b76:	2302      	movs	r3, #2
 8004b78:	e00f      	b.n	8004b9a <HAL_UART_Receive_IT+0x58>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004b88:	88fb      	ldrh	r3, [r7, #6]
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	68b9      	ldr	r1, [r7, #8]
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f000 fa19 	bl	8004fc6 <UART_Start_Receive_IT>
 8004b94:	4603      	mov	r3, r0
 8004b96:	e000      	b.n	8004b9a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004b98:	2302      	movs	r3, #2
  }
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
	...

08004ba4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b08a      	sub	sp, #40	; 0x28
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bce:	f003 030f 	and.w	r3, r3, #15
 8004bd2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10d      	bne.n	8004bf6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bdc:	f003 0320 	and.w	r3, r3, #32
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d008      	beq.n	8004bf6 <HAL_UART_IRQHandler+0x52>
 8004be4:	6a3b      	ldr	r3, [r7, #32]
 8004be6:	f003 0320 	and.w	r3, r3, #32
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d003      	beq.n	8004bf6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 fac9 	bl	8005186 <UART_Receive_IT>
      return;
 8004bf4:	e17b      	b.n	8004eee <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f000 80b1 	beq.w	8004d60 <HAL_UART_IRQHandler+0x1bc>
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d105      	bne.n	8004c14 <HAL_UART_IRQHandler+0x70>
 8004c08:	6a3b      	ldr	r3, [r7, #32]
 8004c0a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	f000 80a6 	beq.w	8004d60 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c16:	f003 0301 	and.w	r3, r3, #1
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00a      	beq.n	8004c34 <HAL_UART_IRQHandler+0x90>
 8004c1e:	6a3b      	ldr	r3, [r7, #32]
 8004c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d005      	beq.n	8004c34 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2c:	f043 0201 	orr.w	r2, r3, #1
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c36:	f003 0304 	and.w	r3, r3, #4
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00a      	beq.n	8004c54 <HAL_UART_IRQHandler+0xb0>
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	f003 0301 	and.w	r3, r3, #1
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d005      	beq.n	8004c54 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4c:	f043 0202 	orr.w	r2, r3, #2
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00a      	beq.n	8004c74 <HAL_UART_IRQHandler+0xd0>
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d005      	beq.n	8004c74 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6c:	f043 0204 	orr.w	r2, r3, #4
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c76:	f003 0308 	and.w	r3, r3, #8
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00f      	beq.n	8004c9e <HAL_UART_IRQHandler+0xfa>
 8004c7e:	6a3b      	ldr	r3, [r7, #32]
 8004c80:	f003 0320 	and.w	r3, r3, #32
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d104      	bne.n	8004c92 <HAL_UART_IRQHandler+0xee>
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d005      	beq.n	8004c9e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c96:	f043 0208 	orr.w	r2, r3, #8
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f000 811e 	beq.w	8004ee4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004caa:	f003 0320 	and.w	r3, r3, #32
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d007      	beq.n	8004cc2 <HAL_UART_IRQHandler+0x11e>
 8004cb2:	6a3b      	ldr	r3, [r7, #32]
 8004cb4:	f003 0320 	and.w	r3, r3, #32
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d002      	beq.n	8004cc2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 fa62 	bl	8005186 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	695b      	ldr	r3, [r3, #20]
 8004cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	bf14      	ite	ne
 8004cd0:	2301      	movne	r3, #1
 8004cd2:	2300      	moveq	r3, #0
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cdc:	f003 0308 	and.w	r3, r3, #8
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d102      	bne.n	8004cea <HAL_UART_IRQHandler+0x146>
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d031      	beq.n	8004d4e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 f9a4 	bl	8005038 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d023      	beq.n	8004d46 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	695a      	ldr	r2, [r3, #20]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d0c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d013      	beq.n	8004d3e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1a:	4a76      	ldr	r2, [pc, #472]	; (8004ef4 <HAL_UART_IRQHandler+0x350>)
 8004d1c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d22:	4618      	mov	r0, r3
 8004d24:	f7fd ff38 	bl	8002b98 <HAL_DMA_Abort_IT>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d016      	beq.n	8004d5c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d38:	4610      	mov	r0, r2
 8004d3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d3c:	e00e      	b.n	8004d5c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 f8e3 	bl	8004f0a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d44:	e00a      	b.n	8004d5c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f8df 	bl	8004f0a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d4c:	e006      	b.n	8004d5c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f8db 	bl	8004f0a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004d5a:	e0c3      	b.n	8004ee4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d5c:	bf00      	nop
    return;
 8004d5e:	e0c1      	b.n	8004ee4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	f040 80a1 	bne.w	8004eac <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6c:	f003 0310 	and.w	r3, r3, #16
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	f000 809b 	beq.w	8004eac <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004d76:	6a3b      	ldr	r3, [r7, #32]
 8004d78:	f003 0310 	and.w	r3, r3, #16
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f000 8095 	beq.w	8004eac <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d82:	2300      	movs	r3, #0
 8004d84:	60fb      	str	r3, [r7, #12]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	60fb      	str	r3, [r7, #12]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	60fb      	str	r3, [r7, #12]
 8004d96:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d04e      	beq.n	8004e44 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004db0:	8a3b      	ldrh	r3, [r7, #16]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	f000 8098 	beq.w	8004ee8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004dbc:	8a3a      	ldrh	r2, [r7, #16]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	f080 8092 	bcs.w	8004ee8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	8a3a      	ldrh	r2, [r7, #16]
 8004dc8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	2b20      	cmp	r3, #32
 8004dd2:	d02b      	beq.n	8004e2c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68da      	ldr	r2, [r3, #12]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004de2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	695a      	ldr	r2, [r3, #20]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f022 0201 	bic.w	r2, r2, #1
 8004df2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	695a      	ldr	r2, [r3, #20]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e02:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2220      	movs	r2, #32
 8004e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68da      	ldr	r2, [r3, #12]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f022 0210 	bic.w	r2, r2, #16
 8004e20:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7fd fe7b 	bl	8002b22 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 f86d 	bl	8004f1c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004e42:	e051      	b.n	8004ee8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d047      	beq.n	8004eec <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004e5c:	8a7b      	ldrh	r3, [r7, #18]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d044      	beq.n	8004eec <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68da      	ldr	r2, [r3, #12]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e70:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	695a      	ldr	r2, [r3, #20]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f022 0201 	bic.w	r2, r2, #1
 8004e80:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2220      	movs	r2, #32
 8004e86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68da      	ldr	r2, [r3, #12]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f022 0210 	bic.w	r2, r2, #16
 8004e9e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ea0:	8a7b      	ldrh	r3, [r7, #18]
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 f839 	bl	8004f1c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004eaa:	e01f      	b.n	8004eec <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d008      	beq.n	8004ec8 <HAL_UART_IRQHandler+0x324>
 8004eb6:	6a3b      	ldr	r3, [r7, #32]
 8004eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d003      	beq.n	8004ec8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f000 f8f9 	bl	80050b8 <UART_Transmit_IT>
    return;
 8004ec6:	e012      	b.n	8004eee <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00d      	beq.n	8004eee <HAL_UART_IRQHandler+0x34a>
 8004ed2:	6a3b      	ldr	r3, [r7, #32]
 8004ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d008      	beq.n	8004eee <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 f93a 	bl	8005156 <UART_EndTransmit_IT>
    return;
 8004ee2:	e004      	b.n	8004eee <HAL_UART_IRQHandler+0x34a>
    return;
 8004ee4:	bf00      	nop
 8004ee6:	e002      	b.n	8004eee <HAL_UART_IRQHandler+0x34a>
      return;
 8004ee8:	bf00      	nop
 8004eea:	e000      	b.n	8004eee <HAL_UART_IRQHandler+0x34a>
      return;
 8004eec:	bf00      	nop
  }
}
 8004eee:	3728      	adds	r7, #40	; 0x28
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	08005091 	.word	0x08005091

08004ef8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f00:	bf00      	nop
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bc80      	pop	{r7}
 8004f08:	4770      	bx	lr

08004f0a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b083      	sub	sp, #12
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f12:	bf00      	nop
 8004f14:	370c      	adds	r7, #12
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bc80      	pop	{r7}
 8004f1a:	4770      	bx	lr

08004f1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	460b      	mov	r3, r1
 8004f26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f28:	bf00      	nop
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bc80      	pop	{r7}
 8004f30:	4770      	bx	lr

08004f32 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b084      	sub	sp, #16
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	60f8      	str	r0, [r7, #12]
 8004f3a:	60b9      	str	r1, [r7, #8]
 8004f3c:	603b      	str	r3, [r7, #0]
 8004f3e:	4613      	mov	r3, r2
 8004f40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f42:	e02c      	b.n	8004f9e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f4a:	d028      	beq.n	8004f9e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d007      	beq.n	8004f62 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f52:	f7fd f853 	bl	8001ffc <HAL_GetTick>
 8004f56:	4602      	mov	r2, r0
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	69ba      	ldr	r2, [r7, #24]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d21d      	bcs.n	8004f9e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68da      	ldr	r2, [r3, #12]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f70:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	695a      	ldr	r2, [r3, #20]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f022 0201 	bic.w	r2, r2, #1
 8004f80:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2220      	movs	r2, #32
 8004f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2220      	movs	r2, #32
 8004f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e00f      	b.n	8004fbe <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	68ba      	ldr	r2, [r7, #8]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	bf0c      	ite	eq
 8004fae:	2301      	moveq	r3, #1
 8004fb0:	2300      	movne	r3, #0
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	79fb      	ldrb	r3, [r7, #7]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d0c3      	beq.n	8004f44 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3710      	adds	r7, #16
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	b085      	sub	sp, #20
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	60f8      	str	r0, [r7, #12]
 8004fce:	60b9      	str	r1, [r7, #8]
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	68ba      	ldr	r2, [r7, #8]
 8004fd8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	88fa      	ldrh	r2, [r7, #6]
 8004fde:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	88fa      	ldrh	r2, [r7, #6]
 8004fe4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2222      	movs	r2, #34	; 0x22
 8004ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68da      	ldr	r2, [r3, #12]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800500a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	695a      	ldr	r2, [r3, #20]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f042 0201 	orr.w	r2, r2, #1
 800501a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68da      	ldr	r2, [r3, #12]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f042 0220 	orr.w	r2, r2, #32
 800502a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3714      	adds	r7, #20
 8005032:	46bd      	mov	sp, r7
 8005034:	bc80      	pop	{r7}
 8005036:	4770      	bx	lr

08005038 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68da      	ldr	r2, [r3, #12]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800504e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	695a      	ldr	r2, [r3, #20]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f022 0201 	bic.w	r2, r2, #1
 800505e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005064:	2b01      	cmp	r3, #1
 8005066:	d107      	bne.n	8005078 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68da      	ldr	r2, [r3, #12]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f022 0210 	bic.w	r2, r2, #16
 8005076:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2220      	movs	r2, #32
 800507c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005086:	bf00      	nop
 8005088:	370c      	adds	r7, #12
 800508a:	46bd      	mov	sp, r7
 800508c:	bc80      	pop	{r7}
 800508e:	4770      	bx	lr

08005090 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050aa:	68f8      	ldr	r0, [r7, #12]
 80050ac:	f7ff ff2d 	bl	8004f0a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050b0:	bf00      	nop
 80050b2:	3710      	adds	r7, #16
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	2b21      	cmp	r3, #33	; 0x21
 80050ca:	d13e      	bne.n	800514a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050d4:	d114      	bne.n	8005100 <UART_Transmit_IT+0x48>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d110      	bne.n	8005100 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	881b      	ldrh	r3, [r3, #0]
 80050e8:	461a      	mov	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050f2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a1b      	ldr	r3, [r3, #32]
 80050f8:	1c9a      	adds	r2, r3, #2
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	621a      	str	r2, [r3, #32]
 80050fe:	e008      	b.n	8005112 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a1b      	ldr	r3, [r3, #32]
 8005104:	1c59      	adds	r1, r3, #1
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	6211      	str	r1, [r2, #32]
 800510a:	781a      	ldrb	r2, [r3, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005116:	b29b      	uxth	r3, r3
 8005118:	3b01      	subs	r3, #1
 800511a:	b29b      	uxth	r3, r3
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	4619      	mov	r1, r3
 8005120:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10f      	bne.n	8005146 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68da      	ldr	r2, [r3, #12]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005134:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68da      	ldr	r2, [r3, #12]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005144:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005146:	2300      	movs	r3, #0
 8005148:	e000      	b.n	800514c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800514a:	2302      	movs	r3, #2
  }
}
 800514c:	4618      	mov	r0, r3
 800514e:	3714      	adds	r7, #20
 8005150:	46bd      	mov	sp, r7
 8005152:	bc80      	pop	{r7}
 8005154:	4770      	bx	lr

08005156 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005156:	b580      	push	{r7, lr}
 8005158:	b082      	sub	sp, #8
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68da      	ldr	r2, [r3, #12]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800516c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2220      	movs	r2, #32
 8005172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f7ff febe 	bl	8004ef8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3708      	adds	r7, #8
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b086      	sub	sp, #24
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b22      	cmp	r3, #34	; 0x22
 8005198:	f040 809b 	bne.w	80052d2 <UART_Receive_IT+0x14c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051a4:	d117      	bne.n	80051d6 <UART_Receive_IT+0x50>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d113      	bne.n	80051d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80051ae:	2300      	movs	r3, #0
 80051b0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	b29b      	uxth	r3, r3
 80051c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ce:	1c9a      	adds	r2, r3, #2
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	629a      	str	r2, [r3, #40]	; 0x28
 80051d4:	e026      	b.n	8005224 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051da:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80051dc:	2300      	movs	r3, #0
 80051de:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051e8:	d007      	beq.n	80051fa <UART_Receive_IT+0x74>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d10a      	bne.n	8005208 <UART_Receive_IT+0x82>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d106      	bne.n	8005208 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	b2da      	uxtb	r2, r3
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	701a      	strb	r2, [r3, #0]
 8005206:	e008      	b.n	800521a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	b2db      	uxtb	r3, r3
 8005210:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005214:	b2da      	uxtb	r2, r3
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800521e:	1c5a      	adds	r2, r3, #1
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if((*(huart->pRxBuffPtr-2)=='o')&&(*(huart->pRxBuffPtr-1)=='k'))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005228:	3b02      	subs	r3, #2
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	2b6f      	cmp	r3, #111	; 0x6f
 800522e:	d14e      	bne.n	80052ce <UART_Receive_IT+0x148>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005234:	3b01      	subs	r3, #1
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	2b6b      	cmp	r3, #107	; 0x6b
 800523a:	d148      	bne.n	80052ce <UART_Receive_IT+0x148>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68da      	ldr	r2, [r3, #12]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f022 0220 	bic.w	r2, r2, #32
 800524a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68da      	ldr	r2, [r3, #12]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800525a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	695a      	ldr	r2, [r3, #20]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f022 0201 	bic.w	r2, r2, #1
 800526a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2220      	movs	r2, #32
 8005270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005278:	2b01      	cmp	r3, #1
 800527a:	d123      	bne.n	80052c4 <UART_Receive_IT+0x13e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68da      	ldr	r2, [r3, #12]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f022 0210 	bic.w	r2, r2, #16
 8005290:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0310 	and.w	r3, r3, #16
 800529c:	2b10      	cmp	r3, #16
 800529e:	d10a      	bne.n	80052b6 <UART_Receive_IT+0x130>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80052a0:	2300      	movs	r3, #0
 80052a2:	60fb      	str	r3, [r7, #12]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	60fb      	str	r3, [r7, #12]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	60fb      	str	r3, [r7, #12]
 80052b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80052ba:	4619      	mov	r1, r3
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f7ff fe2d 	bl	8004f1c <HAL_UARTEx_RxEventCallback>
 80052c2:	e002      	b.n	80052ca <UART_Receive_IT+0x144>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f7fc f8af 	bl	8001428 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80052ca:	2300      	movs	r3, #0
 80052cc:	e002      	b.n	80052d4 <UART_Receive_IT+0x14e>
    }
    return HAL_OK;
 80052ce:	2300      	movs	r3, #0
 80052d0:	e000      	b.n	80052d4 <UART_Receive_IT+0x14e>
  }
  else
  {
    return HAL_BUSY;
 80052d2:	2302      	movs	r3, #2
  }
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3718      	adds	r7, #24
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68da      	ldr	r2, [r3, #12]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	430a      	orrs	r2, r1
 80052f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	689a      	ldr	r2, [r3, #8]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	431a      	orrs	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	4313      	orrs	r3, r2
 800530a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005316:	f023 030c 	bic.w	r3, r3, #12
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	6812      	ldr	r2, [r2, #0]
 800531e:	68b9      	ldr	r1, [r7, #8]
 8005320:	430b      	orrs	r3, r1
 8005322:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	695b      	ldr	r3, [r3, #20]
 800532a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	699a      	ldr	r2, [r3, #24]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	430a      	orrs	r2, r1
 8005338:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a2c      	ldr	r2, [pc, #176]	; (80053f0 <UART_SetConfig+0x114>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d103      	bne.n	800534c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005344:	f7fe fe9c 	bl	8004080 <HAL_RCC_GetPCLK2Freq>
 8005348:	60f8      	str	r0, [r7, #12]
 800534a:	e002      	b.n	8005352 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800534c:	f7fe fe84 	bl	8004058 <HAL_RCC_GetPCLK1Freq>
 8005350:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	4613      	mov	r3, r2
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	4413      	add	r3, r2
 800535a:	009a      	lsls	r2, r3, #2
 800535c:	441a      	add	r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	fbb2 f3f3 	udiv	r3, r2, r3
 8005368:	4a22      	ldr	r2, [pc, #136]	; (80053f4 <UART_SetConfig+0x118>)
 800536a:	fba2 2303 	umull	r2, r3, r2, r3
 800536e:	095b      	lsrs	r3, r3, #5
 8005370:	0119      	lsls	r1, r3, #4
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	4613      	mov	r3, r2
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	4413      	add	r3, r2
 800537a:	009a      	lsls	r2, r3, #2
 800537c:	441a      	add	r2, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	fbb2 f2f3 	udiv	r2, r2, r3
 8005388:	4b1a      	ldr	r3, [pc, #104]	; (80053f4 <UART_SetConfig+0x118>)
 800538a:	fba3 0302 	umull	r0, r3, r3, r2
 800538e:	095b      	lsrs	r3, r3, #5
 8005390:	2064      	movs	r0, #100	; 0x64
 8005392:	fb00 f303 	mul.w	r3, r0, r3
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	011b      	lsls	r3, r3, #4
 800539a:	3332      	adds	r3, #50	; 0x32
 800539c:	4a15      	ldr	r2, [pc, #84]	; (80053f4 <UART_SetConfig+0x118>)
 800539e:	fba2 2303 	umull	r2, r3, r2, r3
 80053a2:	095b      	lsrs	r3, r3, #5
 80053a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053a8:	4419      	add	r1, r3
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	4613      	mov	r3, r2
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	4413      	add	r3, r2
 80053b2:	009a      	lsls	r2, r3, #2
 80053b4:	441a      	add	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80053c0:	4b0c      	ldr	r3, [pc, #48]	; (80053f4 <UART_SetConfig+0x118>)
 80053c2:	fba3 0302 	umull	r0, r3, r3, r2
 80053c6:	095b      	lsrs	r3, r3, #5
 80053c8:	2064      	movs	r0, #100	; 0x64
 80053ca:	fb00 f303 	mul.w	r3, r0, r3
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	011b      	lsls	r3, r3, #4
 80053d2:	3332      	adds	r3, #50	; 0x32
 80053d4:	4a07      	ldr	r2, [pc, #28]	; (80053f4 <UART_SetConfig+0x118>)
 80053d6:	fba2 2303 	umull	r2, r3, r2, r3
 80053da:	095b      	lsrs	r3, r3, #5
 80053dc:	f003 020f 	and.w	r2, r3, #15
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	440a      	add	r2, r1
 80053e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80053e8:	bf00      	nop
 80053ea:	3710      	adds	r7, #16
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	40013800 	.word	0x40013800
 80053f4:	51eb851f 	.word	0x51eb851f

080053f8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	4603      	mov	r3, r0
 8005400:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005402:	2300      	movs	r3, #0
 8005404:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005406:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800540a:	2b84      	cmp	r3, #132	; 0x84
 800540c:	d005      	beq.n	800541a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800540e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	4413      	add	r3, r2
 8005416:	3303      	adds	r3, #3
 8005418:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800541a:	68fb      	ldr	r3, [r7, #12]
}
 800541c:	4618      	mov	r0, r3
 800541e:	3714      	adds	r7, #20
 8005420:	46bd      	mov	sp, r7
 8005422:	bc80      	pop	{r7}
 8005424:	4770      	bx	lr

08005426 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005426:	b480      	push	{r7}
 8005428:	b083      	sub	sp, #12
 800542a:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800542c:	f3ef 8305 	mrs	r3, IPSR
 8005430:	607b      	str	r3, [r7, #4]
  return(result);
 8005432:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005434:	2b00      	cmp	r3, #0
 8005436:	bf14      	ite	ne
 8005438:	2301      	movne	r3, #1
 800543a:	2300      	moveq	r3, #0
 800543c:	b2db      	uxtb	r3, r3
}
 800543e:	4618      	mov	r0, r3
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	bc80      	pop	{r7}
 8005446:	4770      	bx	lr

08005448 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800544c:	f001 f942 	bl	80066d4 <vTaskStartScheduler>
  
  return osOK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	bd80      	pop	{r7, pc}

08005456 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005456:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005458:	b089      	sub	sp, #36	; 0x24
 800545a:	af04      	add	r7, sp, #16
 800545c:	6078      	str	r0, [r7, #4]
 800545e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	695b      	ldr	r3, [r3, #20]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d020      	beq.n	80054aa <osThreadCreate+0x54>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d01c      	beq.n	80054aa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685c      	ldr	r4, [r3, #4]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681d      	ldr	r5, [r3, #0]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	691e      	ldr	r6, [r3, #16]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005482:	4618      	mov	r0, r3
 8005484:	f7ff ffb8 	bl	80053f8 <makeFreeRtosPriority>
 8005488:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005492:	9202      	str	r2, [sp, #8]
 8005494:	9301      	str	r3, [sp, #4]
 8005496:	9100      	str	r1, [sp, #0]
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	4632      	mov	r2, r6
 800549c:	4629      	mov	r1, r5
 800549e:	4620      	mov	r0, r4
 80054a0:	f000 ff43 	bl	800632a <xTaskCreateStatic>
 80054a4:	4603      	mov	r3, r0
 80054a6:	60fb      	str	r3, [r7, #12]
 80054a8:	e01c      	b.n	80054e4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685c      	ldr	r4, [r3, #4]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80054b6:	b29e      	uxth	r6, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80054be:	4618      	mov	r0, r3
 80054c0:	f7ff ff9a 	bl	80053f8 <makeFreeRtosPriority>
 80054c4:	4602      	mov	r2, r0
 80054c6:	f107 030c 	add.w	r3, r7, #12
 80054ca:	9301      	str	r3, [sp, #4]
 80054cc:	9200      	str	r2, [sp, #0]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	4632      	mov	r2, r6
 80054d2:	4629      	mov	r1, r5
 80054d4:	4620      	mov	r0, r4
 80054d6:	f000 ff84 	bl	80063e2 <xTaskCreate>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d001      	beq.n	80054e4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80054e0:	2300      	movs	r3, #0
 80054e2:	e000      	b.n	80054e6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80054e4:	68fb      	ldr	r3, [r7, #12]
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3714      	adds	r7, #20
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080054ee <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b084      	sub	sp, #16
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d001      	beq.n	8005504 <osDelay+0x16>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	e000      	b.n	8005506 <osDelay+0x18>
 8005504:	2301      	movs	r3, #1
 8005506:	4618      	mov	r0, r3
 8005508:	f001 f8b0 	bl	800666c <vTaskDelay>
  
  return osOK;
 800550c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800550e:	4618      	mov	r0, r3
 8005510:	3710      	adds	r7, #16
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}

08005516 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005516:	b580      	push	{r7, lr}
 8005518:	b086      	sub	sp, #24
 800551a:	af02      	add	r7, sp, #8
 800551c:	6078      	str	r0, [r7, #4]
 800551e:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00f      	beq.n	8005548 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	2b01      	cmp	r3, #1
 800552c:	d10a      	bne.n	8005544 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	2203      	movs	r2, #3
 8005534:	9200      	str	r2, [sp, #0]
 8005536:	2200      	movs	r2, #0
 8005538:	2100      	movs	r1, #0
 800553a:	2001      	movs	r0, #1
 800553c:	f000 f9e2 	bl	8005904 <xQueueGenericCreateStatic>
 8005540:	4603      	mov	r3, r0
 8005542:	e016      	b.n	8005572 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8005544:	2300      	movs	r3, #0
 8005546:	e014      	b.n	8005572 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	2b01      	cmp	r3, #1
 800554c:	d110      	bne.n	8005570 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800554e:	2203      	movs	r2, #3
 8005550:	2100      	movs	r1, #0
 8005552:	2001      	movs	r0, #1
 8005554:	f000 fa4d 	bl	80059f2 <xQueueGenericCreate>
 8005558:	60f8      	str	r0, [r7, #12]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d005      	beq.n	800556c <osSemaphoreCreate+0x56>
 8005560:	2300      	movs	r3, #0
 8005562:	2200      	movs	r2, #0
 8005564:	2100      	movs	r1, #0
 8005566:	68f8      	ldr	r0, [r7, #12]
 8005568:	f000 faa0 	bl	8005aac <xQueueGenericSend>
      return sema;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	e000      	b.n	8005572 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8005570:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8005572:	4618      	mov	r0, r3
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
	...

0800557c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005586:	2300      	movs	r3, #0
 8005588:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d101      	bne.n	8005594 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005590:	2380      	movs	r3, #128	; 0x80
 8005592:	e03a      	b.n	800560a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005594:	2300      	movs	r3, #0
 8005596:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800559e:	d103      	bne.n	80055a8 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80055a0:	f04f 33ff 	mov.w	r3, #4294967295
 80055a4:	60fb      	str	r3, [r7, #12]
 80055a6:	e009      	b.n	80055bc <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d006      	beq.n	80055bc <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d101      	bne.n	80055bc <osSemaphoreWait+0x40>
      ticks = 1;
 80055b8:	2301      	movs	r3, #1
 80055ba:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80055bc:	f7ff ff33 	bl	8005426 <inHandlerMode>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d017      	beq.n	80055f6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80055c6:	f107 0308 	add.w	r3, r7, #8
 80055ca:	461a      	mov	r2, r3
 80055cc:	2100      	movs	r1, #0
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 fd04 	bl	8005fdc <xQueueReceiveFromISR>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d001      	beq.n	80055de <osSemaphoreWait+0x62>
      return osErrorOS;
 80055da:	23ff      	movs	r3, #255	; 0xff
 80055dc:	e015      	b.n	800560a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d011      	beq.n	8005608 <osSemaphoreWait+0x8c>
 80055e4:	4b0b      	ldr	r3, [pc, #44]	; (8005614 <osSemaphoreWait+0x98>)
 80055e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055ea:	601a      	str	r2, [r3, #0]
 80055ec:	f3bf 8f4f 	dsb	sy
 80055f0:	f3bf 8f6f 	isb	sy
 80055f4:	e008      	b.n	8005608 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80055f6:	68f9      	ldr	r1, [r7, #12]
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 fbe3 	bl	8005dc4 <xQueueSemaphoreTake>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b01      	cmp	r3, #1
 8005602:	d001      	beq.n	8005608 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005604:	23ff      	movs	r3, #255	; 0xff
 8005606:	e000      	b.n	800560a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	e000ed04 	.word	0xe000ed04

08005618 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005620:	2300      	movs	r3, #0
 8005622:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005624:	2300      	movs	r3, #0
 8005626:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8005628:	f7ff fefd 	bl	8005426 <inHandlerMode>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d016      	beq.n	8005660 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005632:	f107 0308 	add.w	r3, r7, #8
 8005636:	4619      	mov	r1, r3
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 fb35 	bl	8005ca8 <xQueueGiveFromISR>
 800563e:	4603      	mov	r3, r0
 8005640:	2b01      	cmp	r3, #1
 8005642:	d001      	beq.n	8005648 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8005644:	23ff      	movs	r3, #255	; 0xff
 8005646:	e017      	b.n	8005678 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d013      	beq.n	8005676 <osSemaphoreRelease+0x5e>
 800564e:	4b0c      	ldr	r3, [pc, #48]	; (8005680 <osSemaphoreRelease+0x68>)
 8005650:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005654:	601a      	str	r2, [r3, #0]
 8005656:	f3bf 8f4f 	dsb	sy
 800565a:	f3bf 8f6f 	isb	sy
 800565e:	e00a      	b.n	8005676 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8005660:	2300      	movs	r3, #0
 8005662:	2200      	movs	r2, #0
 8005664:	2100      	movs	r1, #0
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 fa20 	bl	8005aac <xQueueGenericSend>
 800566c:	4603      	mov	r3, r0
 800566e:	2b01      	cmp	r3, #1
 8005670:	d001      	beq.n	8005676 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8005672:	23ff      	movs	r3, #255	; 0xff
 8005674:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8005676:	68fb      	ldr	r3, [r7, #12]
}
 8005678:	4618      	mov	r0, r3
 800567a:	3710      	adds	r7, #16
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	e000ed04 	.word	0xe000ed04

08005684 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005684:	b590      	push	{r4, r7, lr}
 8005686:	b085      	sub	sp, #20
 8005688:	af02      	add	r7, sp, #8
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d011      	beq.n	80056ba <osMessageCreate+0x36>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00d      	beq.n	80056ba <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6818      	ldr	r0, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6859      	ldr	r1, [r3, #4]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	689a      	ldr	r2, [r3, #8]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	2400      	movs	r4, #0
 80056b0:	9400      	str	r4, [sp, #0]
 80056b2:	f000 f927 	bl	8005904 <xQueueGenericCreateStatic>
 80056b6:	4603      	mov	r3, r0
 80056b8:	e008      	b.n	80056cc <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6818      	ldr	r0, [r3, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	4619      	mov	r1, r3
 80056c6:	f000 f994 	bl	80059f2 <xQueueGenericCreate>
 80056ca:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd90      	pop	{r4, r7, pc}

080056d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f103 0208 	add.w	r2, r3, #8
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f04f 32ff 	mov.w	r2, #4294967295
 80056ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f103 0208 	add.w	r2, r3, #8
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f103 0208 	add.w	r2, r3, #8
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	bc80      	pop	{r7}
 8005710:	4770      	bx	lr

08005712 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005712:	b480      	push	{r7}
 8005714:	b083      	sub	sp, #12
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005720:	bf00      	nop
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	bc80      	pop	{r7}
 8005728:	4770      	bx	lr

0800572a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800572a:	b480      	push	{r7}
 800572c:	b085      	sub	sp, #20
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
 8005732:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	689a      	ldr	r2, [r3, #8]
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	683a      	ldr	r2, [r7, #0]
 800574e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	683a      	ldr	r2, [r7, #0]
 8005754:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	1c5a      	adds	r2, r3, #1
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	601a      	str	r2, [r3, #0]
}
 8005766:	bf00      	nop
 8005768:	3714      	adds	r7, #20
 800576a:	46bd      	mov	sp, r7
 800576c:	bc80      	pop	{r7}
 800576e:	4770      	bx	lr

08005770 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005786:	d103      	bne.n	8005790 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	60fb      	str	r3, [r7, #12]
 800578e:	e00c      	b.n	80057aa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	3308      	adds	r3, #8
 8005794:	60fb      	str	r3, [r7, #12]
 8005796:	e002      	b.n	800579e <vListInsert+0x2e>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	60fb      	str	r3, [r7, #12]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68ba      	ldr	r2, [r7, #8]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d2f6      	bcs.n	8005798 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	685a      	ldr	r2, [r3, #4]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	683a      	ldr	r2, [r7, #0]
 80057b8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	683a      	ldr	r2, [r7, #0]
 80057c4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	1c5a      	adds	r2, r3, #1
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	601a      	str	r2, [r3, #0]
}
 80057d6:	bf00      	nop
 80057d8:	3714      	adds	r7, #20
 80057da:	46bd      	mov	sp, r7
 80057dc:	bc80      	pop	{r7}
 80057de:	4770      	bx	lr

080057e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	6892      	ldr	r2, [r2, #8]
 80057f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	6852      	ldr	r2, [r2, #4]
 8005800:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	429a      	cmp	r2, r3
 800580a:	d103      	bne.n	8005814 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	689a      	ldr	r2, [r3, #8]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	1e5a      	subs	r2, r3, #1
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
}
 8005828:	4618      	mov	r0, r3
 800582a:	3714      	adds	r7, #20
 800582c:	46bd      	mov	sp, r7
 800582e:	bc80      	pop	{r7}
 8005830:	4770      	bx	lr
	...

08005834 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d10a      	bne.n	800585e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800584c:	f383 8811 	msr	BASEPRI, r3
 8005850:	f3bf 8f6f 	isb	sy
 8005854:	f3bf 8f4f 	dsb	sy
 8005858:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800585a:	bf00      	nop
 800585c:	e7fe      	b.n	800585c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800585e:	f001 fe8d 	bl	800757c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800586a:	68f9      	ldr	r1, [r7, #12]
 800586c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800586e:	fb01 f303 	mul.w	r3, r1, r3
 8005872:	441a      	add	r2, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800588e:	3b01      	subs	r3, #1
 8005890:	68f9      	ldr	r1, [r7, #12]
 8005892:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005894:	fb01 f303 	mul.w	r3, r1, r3
 8005898:	441a      	add	r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	22ff      	movs	r2, #255	; 0xff
 80058a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	22ff      	movs	r2, #255	; 0xff
 80058aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d114      	bne.n	80058de <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d01a      	beq.n	80058f2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	3310      	adds	r3, #16
 80058c0:	4618      	mov	r0, r3
 80058c2:	f001 f95f 	bl	8006b84 <xTaskRemoveFromEventList>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d012      	beq.n	80058f2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80058cc:	4b0c      	ldr	r3, [pc, #48]	; (8005900 <xQueueGenericReset+0xcc>)
 80058ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058d2:	601a      	str	r2, [r3, #0]
 80058d4:	f3bf 8f4f 	dsb	sy
 80058d8:	f3bf 8f6f 	isb	sy
 80058dc:	e009      	b.n	80058f2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	3310      	adds	r3, #16
 80058e2:	4618      	mov	r0, r3
 80058e4:	f7ff fef6 	bl	80056d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	3324      	adds	r3, #36	; 0x24
 80058ec:	4618      	mov	r0, r3
 80058ee:	f7ff fef1 	bl	80056d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80058f2:	f001 fe73 	bl	80075dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80058f6:	2301      	movs	r3, #1
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3710      	adds	r7, #16
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	e000ed04 	.word	0xe000ed04

08005904 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005904:	b580      	push	{r7, lr}
 8005906:	b08e      	sub	sp, #56	; 0x38
 8005908:	af02      	add	r7, sp, #8
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	607a      	str	r2, [r7, #4]
 8005910:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d10a      	bne.n	800592e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591c:	f383 8811 	msr	BASEPRI, r3
 8005920:	f3bf 8f6f 	isb	sy
 8005924:	f3bf 8f4f 	dsb	sy
 8005928:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800592a:	bf00      	nop
 800592c:	e7fe      	b.n	800592c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d10a      	bne.n	800594a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005938:	f383 8811 	msr	BASEPRI, r3
 800593c:	f3bf 8f6f 	isb	sy
 8005940:	f3bf 8f4f 	dsb	sy
 8005944:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005946:	bf00      	nop
 8005948:	e7fe      	b.n	8005948 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d002      	beq.n	8005956 <xQueueGenericCreateStatic+0x52>
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d001      	beq.n	800595a <xQueueGenericCreateStatic+0x56>
 8005956:	2301      	movs	r3, #1
 8005958:	e000      	b.n	800595c <xQueueGenericCreateStatic+0x58>
 800595a:	2300      	movs	r3, #0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d10a      	bne.n	8005976 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005964:	f383 8811 	msr	BASEPRI, r3
 8005968:	f3bf 8f6f 	isb	sy
 800596c:	f3bf 8f4f 	dsb	sy
 8005970:	623b      	str	r3, [r7, #32]
}
 8005972:	bf00      	nop
 8005974:	e7fe      	b.n	8005974 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d102      	bne.n	8005982 <xQueueGenericCreateStatic+0x7e>
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d101      	bne.n	8005986 <xQueueGenericCreateStatic+0x82>
 8005982:	2301      	movs	r3, #1
 8005984:	e000      	b.n	8005988 <xQueueGenericCreateStatic+0x84>
 8005986:	2300      	movs	r3, #0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d10a      	bne.n	80059a2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800598c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005990:	f383 8811 	msr	BASEPRI, r3
 8005994:	f3bf 8f6f 	isb	sy
 8005998:	f3bf 8f4f 	dsb	sy
 800599c:	61fb      	str	r3, [r7, #28]
}
 800599e:	bf00      	nop
 80059a0:	e7fe      	b.n	80059a0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80059a2:	2348      	movs	r3, #72	; 0x48
 80059a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	2b48      	cmp	r3, #72	; 0x48
 80059aa:	d00a      	beq.n	80059c2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80059ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b0:	f383 8811 	msr	BASEPRI, r3
 80059b4:	f3bf 8f6f 	isb	sy
 80059b8:	f3bf 8f4f 	dsb	sy
 80059bc:	61bb      	str	r3, [r7, #24]
}
 80059be:	bf00      	nop
 80059c0:	e7fe      	b.n	80059c0 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80059c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00d      	beq.n	80059e8 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80059cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80059d4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80059d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059da:	9300      	str	r3, [sp, #0]
 80059dc:	4613      	mov	r3, r2
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	68b9      	ldr	r1, [r7, #8]
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f000 f843 	bl	8005a6e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80059e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3730      	adds	r7, #48	; 0x30
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80059f2:	b580      	push	{r7, lr}
 80059f4:	b08a      	sub	sp, #40	; 0x28
 80059f6:	af02      	add	r7, sp, #8
 80059f8:	60f8      	str	r0, [r7, #12]
 80059fa:	60b9      	str	r1, [r7, #8]
 80059fc:	4613      	mov	r3, r2
 80059fe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d10a      	bne.n	8005a1c <xQueueGenericCreate+0x2a>
	__asm volatile
 8005a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a0a:	f383 8811 	msr	BASEPRI, r3
 8005a0e:	f3bf 8f6f 	isb	sy
 8005a12:	f3bf 8f4f 	dsb	sy
 8005a16:	613b      	str	r3, [r7, #16]
}
 8005a18:	bf00      	nop
 8005a1a:	e7fe      	b.n	8005a1a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d102      	bne.n	8005a28 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005a22:	2300      	movs	r3, #0
 8005a24:	61fb      	str	r3, [r7, #28]
 8005a26:	e004      	b.n	8005a32 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	68ba      	ldr	r2, [r7, #8]
 8005a2c:	fb02 f303 	mul.w	r3, r2, r3
 8005a30:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	3348      	adds	r3, #72	; 0x48
 8005a36:	4618      	mov	r0, r3
 8005a38:	f001 fea0 	bl	800777c <pvPortMalloc>
 8005a3c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00f      	beq.n	8005a64 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	3348      	adds	r3, #72	; 0x48
 8005a48:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a52:	79fa      	ldrb	r2, [r7, #7]
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	9300      	str	r3, [sp, #0]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	697a      	ldr	r2, [r7, #20]
 8005a5c:	68b9      	ldr	r1, [r7, #8]
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f000 f805 	bl	8005a6e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005a64:	69bb      	ldr	r3, [r7, #24]
	}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3720      	adds	r7, #32
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b084      	sub	sp, #16
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	60f8      	str	r0, [r7, #12]
 8005a76:	60b9      	str	r1, [r7, #8]
 8005a78:	607a      	str	r2, [r7, #4]
 8005a7a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d103      	bne.n	8005a8a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	69ba      	ldr	r2, [r7, #24]
 8005a86:	601a      	str	r2, [r3, #0]
 8005a88:	e002      	b.n	8005a90 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	68ba      	ldr	r2, [r7, #8]
 8005a9a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005a9c:	2101      	movs	r1, #1
 8005a9e:	69b8      	ldr	r0, [r7, #24]
 8005aa0:	f7ff fec8 	bl	8005834 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005aa4:	bf00      	nop
 8005aa6:	3710      	adds	r7, #16
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b08e      	sub	sp, #56	; 0x38
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	607a      	str	r2, [r7, #4]
 8005ab8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005aba:	2300      	movs	r3, #0
 8005abc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d10a      	bne.n	8005ade <xQueueGenericSend+0x32>
	__asm volatile
 8005ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005acc:	f383 8811 	msr	BASEPRI, r3
 8005ad0:	f3bf 8f6f 	isb	sy
 8005ad4:	f3bf 8f4f 	dsb	sy
 8005ad8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005ada:	bf00      	nop
 8005adc:	e7fe      	b.n	8005adc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d103      	bne.n	8005aec <xQueueGenericSend+0x40>
 8005ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d101      	bne.n	8005af0 <xQueueGenericSend+0x44>
 8005aec:	2301      	movs	r3, #1
 8005aee:	e000      	b.n	8005af2 <xQueueGenericSend+0x46>
 8005af0:	2300      	movs	r3, #0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d10a      	bne.n	8005b0c <xQueueGenericSend+0x60>
	__asm volatile
 8005af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afa:	f383 8811 	msr	BASEPRI, r3
 8005afe:	f3bf 8f6f 	isb	sy
 8005b02:	f3bf 8f4f 	dsb	sy
 8005b06:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005b08:	bf00      	nop
 8005b0a:	e7fe      	b.n	8005b0a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	d103      	bne.n	8005b1a <xQueueGenericSend+0x6e>
 8005b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d101      	bne.n	8005b1e <xQueueGenericSend+0x72>
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e000      	b.n	8005b20 <xQueueGenericSend+0x74>
 8005b1e:	2300      	movs	r3, #0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d10a      	bne.n	8005b3a <xQueueGenericSend+0x8e>
	__asm volatile
 8005b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b28:	f383 8811 	msr	BASEPRI, r3
 8005b2c:	f3bf 8f6f 	isb	sy
 8005b30:	f3bf 8f4f 	dsb	sy
 8005b34:	623b      	str	r3, [r7, #32]
}
 8005b36:	bf00      	nop
 8005b38:	e7fe      	b.n	8005b38 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b3a:	f001 f9e7 	bl	8006f0c <xTaskGetSchedulerState>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d102      	bne.n	8005b4a <xQueueGenericSend+0x9e>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d101      	bne.n	8005b4e <xQueueGenericSend+0xa2>
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e000      	b.n	8005b50 <xQueueGenericSend+0xa4>
 8005b4e:	2300      	movs	r3, #0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d10a      	bne.n	8005b6a <xQueueGenericSend+0xbe>
	__asm volatile
 8005b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b58:	f383 8811 	msr	BASEPRI, r3
 8005b5c:	f3bf 8f6f 	isb	sy
 8005b60:	f3bf 8f4f 	dsb	sy
 8005b64:	61fb      	str	r3, [r7, #28]
}
 8005b66:	bf00      	nop
 8005b68:	e7fe      	b.n	8005b68 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b6a:	f001 fd07 	bl	800757c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d302      	bcc.n	8005b80 <xQueueGenericSend+0xd4>
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d129      	bne.n	8005bd4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b80:	683a      	ldr	r2, [r7, #0]
 8005b82:	68b9      	ldr	r1, [r7, #8]
 8005b84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b86:	f000 fac0 	bl	800610a <prvCopyDataToQueue>
 8005b8a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d010      	beq.n	8005bb6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b96:	3324      	adds	r3, #36	; 0x24
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f000 fff3 	bl	8006b84 <xTaskRemoveFromEventList>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d013      	beq.n	8005bcc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005ba4:	4b3f      	ldr	r3, [pc, #252]	; (8005ca4 <xQueueGenericSend+0x1f8>)
 8005ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005baa:	601a      	str	r2, [r3, #0]
 8005bac:	f3bf 8f4f 	dsb	sy
 8005bb0:	f3bf 8f6f 	isb	sy
 8005bb4:	e00a      	b.n	8005bcc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d007      	beq.n	8005bcc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005bbc:	4b39      	ldr	r3, [pc, #228]	; (8005ca4 <xQueueGenericSend+0x1f8>)
 8005bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bc2:	601a      	str	r2, [r3, #0]
 8005bc4:	f3bf 8f4f 	dsb	sy
 8005bc8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005bcc:	f001 fd06 	bl	80075dc <vPortExitCritical>
				return pdPASS;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e063      	b.n	8005c9c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d103      	bne.n	8005be2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005bda:	f001 fcff 	bl	80075dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005bde:	2300      	movs	r3, #0
 8005be0:	e05c      	b.n	8005c9c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d106      	bne.n	8005bf6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005be8:	f107 0314 	add.w	r3, r7, #20
 8005bec:	4618      	mov	r0, r3
 8005bee:	f001 f82b 	bl	8006c48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005bf6:	f001 fcf1 	bl	80075dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005bfa:	f000 fdd5 	bl	80067a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005bfe:	f001 fcbd 	bl	800757c <vPortEnterCritical>
 8005c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c08:	b25b      	sxtb	r3, r3
 8005c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0e:	d103      	bne.n	8005c18 <xQueueGenericSend+0x16c>
 8005c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c1e:	b25b      	sxtb	r3, r3
 8005c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c24:	d103      	bne.n	8005c2e <xQueueGenericSend+0x182>
 8005c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c2e:	f001 fcd5 	bl	80075dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c32:	1d3a      	adds	r2, r7, #4
 8005c34:	f107 0314 	add.w	r3, r7, #20
 8005c38:	4611      	mov	r1, r2
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f001 f81a 	bl	8006c74 <xTaskCheckForTimeOut>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d124      	bne.n	8005c90 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005c46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c48:	f000 fb57 	bl	80062fa <prvIsQueueFull>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d018      	beq.n	8005c84 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c54:	3310      	adds	r3, #16
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	4611      	mov	r1, r2
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f000 ff6e 	bl	8006b3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005c60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c62:	f000 fae2 	bl	800622a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005c66:	f000 fdad 	bl	80067c4 <xTaskResumeAll>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	f47f af7c 	bne.w	8005b6a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005c72:	4b0c      	ldr	r3, [pc, #48]	; (8005ca4 <xQueueGenericSend+0x1f8>)
 8005c74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c78:	601a      	str	r2, [r3, #0]
 8005c7a:	f3bf 8f4f 	dsb	sy
 8005c7e:	f3bf 8f6f 	isb	sy
 8005c82:	e772      	b.n	8005b6a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005c84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c86:	f000 fad0 	bl	800622a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c8a:	f000 fd9b 	bl	80067c4 <xTaskResumeAll>
 8005c8e:	e76c      	b.n	8005b6a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005c90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c92:	f000 faca 	bl	800622a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c96:	f000 fd95 	bl	80067c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005c9a:	2300      	movs	r3, #0
		}
	}
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3738      	adds	r7, #56	; 0x38
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	e000ed04 	.word	0xe000ed04

08005ca8 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b08e      	sub	sp, #56	; 0x38
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10a      	bne.n	8005cd2 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc0:	f383 8811 	msr	BASEPRI, r3
 8005cc4:	f3bf 8f6f 	isb	sy
 8005cc8:	f3bf 8f4f 	dsb	sy
 8005ccc:	623b      	str	r3, [r7, #32]
}
 8005cce:	bf00      	nop
 8005cd0:	e7fe      	b.n	8005cd0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00a      	beq.n	8005cf0 <xQueueGiveFromISR+0x48>
	__asm volatile
 8005cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cde:	f383 8811 	msr	BASEPRI, r3
 8005ce2:	f3bf 8f6f 	isb	sy
 8005ce6:	f3bf 8f4f 	dsb	sy
 8005cea:	61fb      	str	r3, [r7, #28]
}
 8005cec:	bf00      	nop
 8005cee:	e7fe      	b.n	8005cee <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8005cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d103      	bne.n	8005d00 <xQueueGiveFromISR+0x58>
 8005cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d101      	bne.n	8005d04 <xQueueGiveFromISR+0x5c>
 8005d00:	2301      	movs	r3, #1
 8005d02:	e000      	b.n	8005d06 <xQueueGiveFromISR+0x5e>
 8005d04:	2300      	movs	r3, #0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d10a      	bne.n	8005d20 <xQueueGiveFromISR+0x78>
	__asm volatile
 8005d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d0e:	f383 8811 	msr	BASEPRI, r3
 8005d12:	f3bf 8f6f 	isb	sy
 8005d16:	f3bf 8f4f 	dsb	sy
 8005d1a:	61bb      	str	r3, [r7, #24]
}
 8005d1c:	bf00      	nop
 8005d1e:	e7fe      	b.n	8005d1e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d20:	f001 fcee 	bl	8007700 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005d24:	f3ef 8211 	mrs	r2, BASEPRI
 8005d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2c:	f383 8811 	msr	BASEPRI, r3
 8005d30:	f3bf 8f6f 	isb	sy
 8005d34:	f3bf 8f4f 	dsb	sy
 8005d38:	617a      	str	r2, [r7, #20]
 8005d3a:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005d3c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d44:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d22b      	bcs.n	8005da8 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5c:	1c5a      	adds	r2, r3, #1
 8005d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d60:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005d62:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d6a:	d112      	bne.n	8005d92 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d016      	beq.n	8005da2 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d76:	3324      	adds	r3, #36	; 0x24
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f000 ff03 	bl	8006b84 <xTaskRemoveFromEventList>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d00e      	beq.n	8005da2 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00b      	beq.n	8005da2 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	601a      	str	r2, [r3, #0]
 8005d90:	e007      	b.n	8005da2 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005d92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d96:	3301      	adds	r3, #1
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	b25a      	sxtb	r2, r3
 8005d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005da2:	2301      	movs	r3, #1
 8005da4:	637b      	str	r3, [r7, #52]	; 0x34
 8005da6:	e001      	b.n	8005dac <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005da8:	2300      	movs	r3, #0
 8005daa:	637b      	str	r3, [r7, #52]	; 0x34
 8005dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dae:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005db6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3738      	adds	r7, #56	; 0x38
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
	...

08005dc4 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b08e      	sub	sp, #56	; 0x38
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d10a      	bne.n	8005df6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de4:	f383 8811 	msr	BASEPRI, r3
 8005de8:	f3bf 8f6f 	isb	sy
 8005dec:	f3bf 8f4f 	dsb	sy
 8005df0:	623b      	str	r3, [r7, #32]
}
 8005df2:	bf00      	nop
 8005df4:	e7fe      	b.n	8005df4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00a      	beq.n	8005e14 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e02:	f383 8811 	msr	BASEPRI, r3
 8005e06:	f3bf 8f6f 	isb	sy
 8005e0a:	f3bf 8f4f 	dsb	sy
 8005e0e:	61fb      	str	r3, [r7, #28]
}
 8005e10:	bf00      	nop
 8005e12:	e7fe      	b.n	8005e12 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e14:	f001 f87a 	bl	8006f0c <xTaskGetSchedulerState>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d102      	bne.n	8005e24 <xQueueSemaphoreTake+0x60>
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d101      	bne.n	8005e28 <xQueueSemaphoreTake+0x64>
 8005e24:	2301      	movs	r3, #1
 8005e26:	e000      	b.n	8005e2a <xQueueSemaphoreTake+0x66>
 8005e28:	2300      	movs	r3, #0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d10a      	bne.n	8005e44 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e32:	f383 8811 	msr	BASEPRI, r3
 8005e36:	f3bf 8f6f 	isb	sy
 8005e3a:	f3bf 8f4f 	dsb	sy
 8005e3e:	61bb      	str	r3, [r7, #24]
}
 8005e40:	bf00      	nop
 8005e42:	e7fe      	b.n	8005e42 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e44:	f001 fb9a 	bl	800757c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d024      	beq.n	8005e9e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e56:	1e5a      	subs	r2, r3, #1
 8005e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e5a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d104      	bne.n	8005e6e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005e64:	f001 fa1c 	bl	80072a0 <pvTaskIncrementMutexHeldCount>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e6c:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00f      	beq.n	8005e96 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e78:	3310      	adds	r3, #16
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f000 fe82 	bl	8006b84 <xTaskRemoveFromEventList>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d007      	beq.n	8005e96 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005e86:	4b54      	ldr	r3, [pc, #336]	; (8005fd8 <xQueueSemaphoreTake+0x214>)
 8005e88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e8c:	601a      	str	r2, [r3, #0]
 8005e8e:	f3bf 8f4f 	dsb	sy
 8005e92:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005e96:	f001 fba1 	bl	80075dc <vPortExitCritical>
				return pdPASS;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e097      	b.n	8005fce <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d111      	bne.n	8005ec8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00a      	beq.n	8005ec0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eae:	f383 8811 	msr	BASEPRI, r3
 8005eb2:	f3bf 8f6f 	isb	sy
 8005eb6:	f3bf 8f4f 	dsb	sy
 8005eba:	617b      	str	r3, [r7, #20]
}
 8005ebc:	bf00      	nop
 8005ebe:	e7fe      	b.n	8005ebe <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005ec0:	f001 fb8c 	bl	80075dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	e082      	b.n	8005fce <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d106      	bne.n	8005edc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ece:	f107 030c 	add.w	r3, r7, #12
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f000 feb8 	bl	8006c48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005edc:	f001 fb7e 	bl	80075dc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ee0:	f000 fc62 	bl	80067a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ee4:	f001 fb4a 	bl	800757c <vPortEnterCritical>
 8005ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005eee:	b25b      	sxtb	r3, r3
 8005ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ef4:	d103      	bne.n	8005efe <xQueueSemaphoreTake+0x13a>
 8005ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f04:	b25b      	sxtb	r3, r3
 8005f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f0a:	d103      	bne.n	8005f14 <xQueueSemaphoreTake+0x150>
 8005f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f14:	f001 fb62 	bl	80075dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f18:	463a      	mov	r2, r7
 8005f1a:	f107 030c 	add.w	r3, r7, #12
 8005f1e:	4611      	mov	r1, r2
 8005f20:	4618      	mov	r0, r3
 8005f22:	f000 fea7 	bl	8006c74 <xTaskCheckForTimeOut>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d132      	bne.n	8005f92 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f2e:	f000 f9ce 	bl	80062ce <prvIsQueueEmpty>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d026      	beq.n	8005f86 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d109      	bne.n	8005f54 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005f40:	f001 fb1c 	bl	800757c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f000 fffd 	bl	8006f48 <xTaskPriorityInherit>
 8005f4e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005f50:	f001 fb44 	bl	80075dc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f56:	3324      	adds	r3, #36	; 0x24
 8005f58:	683a      	ldr	r2, [r7, #0]
 8005f5a:	4611      	mov	r1, r2
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f000 fded 	bl	8006b3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005f62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f64:	f000 f961 	bl	800622a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005f68:	f000 fc2c 	bl	80067c4 <xTaskResumeAll>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	f47f af68 	bne.w	8005e44 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005f74:	4b18      	ldr	r3, [pc, #96]	; (8005fd8 <xQueueSemaphoreTake+0x214>)
 8005f76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f7a:	601a      	str	r2, [r3, #0]
 8005f7c:	f3bf 8f4f 	dsb	sy
 8005f80:	f3bf 8f6f 	isb	sy
 8005f84:	e75e      	b.n	8005e44 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005f86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f88:	f000 f94f 	bl	800622a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f8c:	f000 fc1a 	bl	80067c4 <xTaskResumeAll>
 8005f90:	e758      	b.n	8005e44 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005f92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f94:	f000 f949 	bl	800622a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f98:	f000 fc14 	bl	80067c4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f9e:	f000 f996 	bl	80062ce <prvIsQueueEmpty>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f43f af4d 	beq.w	8005e44 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00d      	beq.n	8005fcc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005fb0:	f001 fae4 	bl	800757c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005fb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005fb6:	f000 f891 	bl	80060dc <prvGetDisinheritPriorityAfterTimeout>
 8005fba:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8005fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f001 f8cc 	bl	8007160 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005fc8:	f001 fb08 	bl	80075dc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005fcc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3738      	adds	r7, #56	; 0x38
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	e000ed04 	.word	0xe000ed04

08005fdc <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b08e      	sub	sp, #56	; 0x38
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d10a      	bne.n	8006008 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff6:	f383 8811 	msr	BASEPRI, r3
 8005ffa:	f3bf 8f6f 	isb	sy
 8005ffe:	f3bf 8f4f 	dsb	sy
 8006002:	623b      	str	r3, [r7, #32]
}
 8006004:	bf00      	nop
 8006006:	e7fe      	b.n	8006006 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d103      	bne.n	8006016 <xQueueReceiveFromISR+0x3a>
 800600e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006012:	2b00      	cmp	r3, #0
 8006014:	d101      	bne.n	800601a <xQueueReceiveFromISR+0x3e>
 8006016:	2301      	movs	r3, #1
 8006018:	e000      	b.n	800601c <xQueueReceiveFromISR+0x40>
 800601a:	2300      	movs	r3, #0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d10a      	bne.n	8006036 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006024:	f383 8811 	msr	BASEPRI, r3
 8006028:	f3bf 8f6f 	isb	sy
 800602c:	f3bf 8f4f 	dsb	sy
 8006030:	61fb      	str	r3, [r7, #28]
}
 8006032:	bf00      	nop
 8006034:	e7fe      	b.n	8006034 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006036:	f001 fb63 	bl	8007700 <vPortValidateInterruptPriority>
	__asm volatile
 800603a:	f3ef 8211 	mrs	r2, BASEPRI
 800603e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006042:	f383 8811 	msr	BASEPRI, r3
 8006046:	f3bf 8f6f 	isb	sy
 800604a:	f3bf 8f4f 	dsb	sy
 800604e:	61ba      	str	r2, [r7, #24]
 8006050:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006052:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006054:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800605c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605e:	2b00      	cmp	r3, #0
 8006060:	d02f      	beq.n	80060c2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006064:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006068:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800606c:	68b9      	ldr	r1, [r7, #8]
 800606e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006070:	f000 f8b5 	bl	80061de <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006076:	1e5a      	subs	r2, r3, #1
 8006078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800607c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006084:	d112      	bne.n	80060ac <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d016      	beq.n	80060bc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800608e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006090:	3310      	adds	r3, #16
 8006092:	4618      	mov	r0, r3
 8006094:	f000 fd76 	bl	8006b84 <xTaskRemoveFromEventList>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00e      	beq.n	80060bc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d00b      	beq.n	80060bc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	601a      	str	r2, [r3, #0]
 80060aa:	e007      	b.n	80060bc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80060ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060b0:	3301      	adds	r3, #1
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	b25a      	sxtb	r2, r3
 80060b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80060bc:	2301      	movs	r3, #1
 80060be:	637b      	str	r3, [r7, #52]	; 0x34
 80060c0:	e001      	b.n	80060c6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80060c2:	2300      	movs	r3, #0
 80060c4:	637b      	str	r3, [r7, #52]	; 0x34
 80060c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	f383 8811 	msr	BASEPRI, r3
}
 80060d0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80060d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3738      	adds	r7, #56	; 0x38
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80060dc:	b480      	push	{r7}
 80060de:	b085      	sub	sp, #20
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d006      	beq.n	80060fa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f1c3 0307 	rsb	r3, r3, #7
 80060f6:	60fb      	str	r3, [r7, #12]
 80060f8:	e001      	b.n	80060fe <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80060fa:	2300      	movs	r3, #0
 80060fc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80060fe:	68fb      	ldr	r3, [r7, #12]
	}
 8006100:	4618      	mov	r0, r3
 8006102:	3714      	adds	r7, #20
 8006104:	46bd      	mov	sp, r7
 8006106:	bc80      	pop	{r7}
 8006108:	4770      	bx	lr

0800610a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800610a:	b580      	push	{r7, lr}
 800610c:	b086      	sub	sp, #24
 800610e:	af00      	add	r7, sp, #0
 8006110:	60f8      	str	r0, [r7, #12]
 8006112:	60b9      	str	r1, [r7, #8]
 8006114:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006116:	2300      	movs	r3, #0
 8006118:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006124:	2b00      	cmp	r3, #0
 8006126:	d10d      	bne.n	8006144 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d14d      	bne.n	80061cc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	4618      	mov	r0, r3
 8006136:	f000 ff8d 	bl	8007054 <xTaskPriorityDisinherit>
 800613a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2200      	movs	r2, #0
 8006140:	605a      	str	r2, [r3, #4]
 8006142:	e043      	b.n	80061cc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d119      	bne.n	800617e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6898      	ldr	r0, [r3, #8]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006152:	461a      	mov	r2, r3
 8006154:	68b9      	ldr	r1, [r7, #8]
 8006156:	f001 fd19 	bl	8007b8c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	689a      	ldr	r2, [r3, #8]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006162:	441a      	add	r2, r3
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	689a      	ldr	r2, [r3, #8]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	429a      	cmp	r2, r3
 8006172:	d32b      	bcc.n	80061cc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	609a      	str	r2, [r3, #8]
 800617c:	e026      	b.n	80061cc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	68d8      	ldr	r0, [r3, #12]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006186:	461a      	mov	r2, r3
 8006188:	68b9      	ldr	r1, [r7, #8]
 800618a:	f001 fcff 	bl	8007b8c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	68da      	ldr	r2, [r3, #12]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006196:	425b      	negs	r3, r3
 8006198:	441a      	add	r2, r3
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	68da      	ldr	r2, [r3, #12]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d207      	bcs.n	80061ba <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	685a      	ldr	r2, [r3, #4]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b2:	425b      	negs	r3, r3
 80061b4:	441a      	add	r2, r3
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d105      	bne.n	80061cc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d002      	beq.n	80061cc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	3b01      	subs	r3, #1
 80061ca:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	1c5a      	adds	r2, r3, #1
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80061d4:	697b      	ldr	r3, [r7, #20]
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3718      	adds	r7, #24
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}

080061de <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80061de:	b580      	push	{r7, lr}
 80061e0:	b082      	sub	sp, #8
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
 80061e6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d018      	beq.n	8006222 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	68da      	ldr	r2, [r3, #12]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f8:	441a      	add	r2, r3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	68da      	ldr	r2, [r3, #12]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	429a      	cmp	r2, r3
 8006208:	d303      	bcc.n	8006212 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	68d9      	ldr	r1, [r3, #12]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621a:	461a      	mov	r2, r3
 800621c:	6838      	ldr	r0, [r7, #0]
 800621e:	f001 fcb5 	bl	8007b8c <memcpy>
	}
}
 8006222:	bf00      	nop
 8006224:	3708      	adds	r7, #8
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b084      	sub	sp, #16
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006232:	f001 f9a3 	bl	800757c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800623c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800623e:	e011      	b.n	8006264 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006244:	2b00      	cmp	r3, #0
 8006246:	d012      	beq.n	800626e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	3324      	adds	r3, #36	; 0x24
 800624c:	4618      	mov	r0, r3
 800624e:	f000 fc99 	bl	8006b84 <xTaskRemoveFromEventList>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d001      	beq.n	800625c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006258:	f000 fd6e 	bl	8006d38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800625c:	7bfb      	ldrb	r3, [r7, #15]
 800625e:	3b01      	subs	r3, #1
 8006260:	b2db      	uxtb	r3, r3
 8006262:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006264:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006268:	2b00      	cmp	r3, #0
 800626a:	dce9      	bgt.n	8006240 <prvUnlockQueue+0x16>
 800626c:	e000      	b.n	8006270 <prvUnlockQueue+0x46>
					break;
 800626e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	22ff      	movs	r2, #255	; 0xff
 8006274:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006278:	f001 f9b0 	bl	80075dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800627c:	f001 f97e 	bl	800757c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006286:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006288:	e011      	b.n	80062ae <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d012      	beq.n	80062b8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	3310      	adds	r3, #16
 8006296:	4618      	mov	r0, r3
 8006298:	f000 fc74 	bl	8006b84 <xTaskRemoveFromEventList>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d001      	beq.n	80062a6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80062a2:	f000 fd49 	bl	8006d38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80062a6:	7bbb      	ldrb	r3, [r7, #14]
 80062a8:	3b01      	subs	r3, #1
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80062ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	dce9      	bgt.n	800628a <prvUnlockQueue+0x60>
 80062b6:	e000      	b.n	80062ba <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80062b8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	22ff      	movs	r2, #255	; 0xff
 80062be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80062c2:	f001 f98b 	bl	80075dc <vPortExitCritical>
}
 80062c6:	bf00      	nop
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b084      	sub	sp, #16
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80062d6:	f001 f951 	bl	800757c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d102      	bne.n	80062e8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80062e2:	2301      	movs	r3, #1
 80062e4:	60fb      	str	r3, [r7, #12]
 80062e6:	e001      	b.n	80062ec <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80062e8:	2300      	movs	r3, #0
 80062ea:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80062ec:	f001 f976 	bl	80075dc <vPortExitCritical>

	return xReturn;
 80062f0:	68fb      	ldr	r3, [r7, #12]
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3710      	adds	r7, #16
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}

080062fa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80062fa:	b580      	push	{r7, lr}
 80062fc:	b084      	sub	sp, #16
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006302:	f001 f93b 	bl	800757c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800630e:	429a      	cmp	r2, r3
 8006310:	d102      	bne.n	8006318 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006312:	2301      	movs	r3, #1
 8006314:	60fb      	str	r3, [r7, #12]
 8006316:	e001      	b.n	800631c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006318:	2300      	movs	r3, #0
 800631a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800631c:	f001 f95e 	bl	80075dc <vPortExitCritical>

	return xReturn;
 8006320:	68fb      	ldr	r3, [r7, #12]
}
 8006322:	4618      	mov	r0, r3
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}

0800632a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800632a:	b580      	push	{r7, lr}
 800632c:	b08e      	sub	sp, #56	; 0x38
 800632e:	af04      	add	r7, sp, #16
 8006330:	60f8      	str	r0, [r7, #12]
 8006332:	60b9      	str	r1, [r7, #8]
 8006334:	607a      	str	r2, [r7, #4]
 8006336:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800633a:	2b00      	cmp	r3, #0
 800633c:	d10a      	bne.n	8006354 <xTaskCreateStatic+0x2a>
	__asm volatile
 800633e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006342:	f383 8811 	msr	BASEPRI, r3
 8006346:	f3bf 8f6f 	isb	sy
 800634a:	f3bf 8f4f 	dsb	sy
 800634e:	623b      	str	r3, [r7, #32]
}
 8006350:	bf00      	nop
 8006352:	e7fe      	b.n	8006352 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006356:	2b00      	cmp	r3, #0
 8006358:	d10a      	bne.n	8006370 <xTaskCreateStatic+0x46>
	__asm volatile
 800635a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635e:	f383 8811 	msr	BASEPRI, r3
 8006362:	f3bf 8f6f 	isb	sy
 8006366:	f3bf 8f4f 	dsb	sy
 800636a:	61fb      	str	r3, [r7, #28]
}
 800636c:	bf00      	nop
 800636e:	e7fe      	b.n	800636e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006370:	23b4      	movs	r3, #180	; 0xb4
 8006372:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	2bb4      	cmp	r3, #180	; 0xb4
 8006378:	d00a      	beq.n	8006390 <xTaskCreateStatic+0x66>
	__asm volatile
 800637a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637e:	f383 8811 	msr	BASEPRI, r3
 8006382:	f3bf 8f6f 	isb	sy
 8006386:	f3bf 8f4f 	dsb	sy
 800638a:	61bb      	str	r3, [r7, #24]
}
 800638c:	bf00      	nop
 800638e:	e7fe      	b.n	800638e <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006392:	2b00      	cmp	r3, #0
 8006394:	d01e      	beq.n	80063d4 <xTaskCreateStatic+0xaa>
 8006396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006398:	2b00      	cmp	r3, #0
 800639a:	d01b      	beq.n	80063d4 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800639c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800639e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80063a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063a4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80063a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a8:	2202      	movs	r2, #2
 80063aa:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80063ae:	2300      	movs	r3, #0
 80063b0:	9303      	str	r3, [sp, #12]
 80063b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b4:	9302      	str	r3, [sp, #8]
 80063b6:	f107 0314 	add.w	r3, r7, #20
 80063ba:	9301      	str	r3, [sp, #4]
 80063bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063be:	9300      	str	r3, [sp, #0]
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	68b9      	ldr	r1, [r7, #8]
 80063c6:	68f8      	ldr	r0, [r7, #12]
 80063c8:	f000 f850 	bl	800646c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80063cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80063ce:	f000 f8e3 	bl	8006598 <prvAddNewTaskToReadyList>
 80063d2:	e001      	b.n	80063d8 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80063d4:	2300      	movs	r3, #0
 80063d6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80063d8:	697b      	ldr	r3, [r7, #20]
	}
 80063da:	4618      	mov	r0, r3
 80063dc:	3728      	adds	r7, #40	; 0x28
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b08c      	sub	sp, #48	; 0x30
 80063e6:	af04      	add	r7, sp, #16
 80063e8:	60f8      	str	r0, [r7, #12]
 80063ea:	60b9      	str	r1, [r7, #8]
 80063ec:	603b      	str	r3, [r7, #0]
 80063ee:	4613      	mov	r3, r2
 80063f0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063f2:	88fb      	ldrh	r3, [r7, #6]
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	4618      	mov	r0, r3
 80063f8:	f001 f9c0 	bl	800777c <pvPortMalloc>
 80063fc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d00e      	beq.n	8006422 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006404:	20b4      	movs	r0, #180	; 0xb4
 8006406:	f001 f9b9 	bl	800777c <pvPortMalloc>
 800640a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d003      	beq.n	800641a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	697a      	ldr	r2, [r7, #20]
 8006416:	631a      	str	r2, [r3, #48]	; 0x30
 8006418:	e005      	b.n	8006426 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800641a:	6978      	ldr	r0, [r7, #20]
 800641c:	f001 fa72 	bl	8007904 <vPortFree>
 8006420:	e001      	b.n	8006426 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006422:	2300      	movs	r3, #0
 8006424:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d017      	beq.n	800645c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	2200      	movs	r2, #0
 8006430:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006434:	88fa      	ldrh	r2, [r7, #6]
 8006436:	2300      	movs	r3, #0
 8006438:	9303      	str	r3, [sp, #12]
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	9302      	str	r3, [sp, #8]
 800643e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006440:	9301      	str	r3, [sp, #4]
 8006442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006444:	9300      	str	r3, [sp, #0]
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	68b9      	ldr	r1, [r7, #8]
 800644a:	68f8      	ldr	r0, [r7, #12]
 800644c:	f000 f80e 	bl	800646c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006450:	69f8      	ldr	r0, [r7, #28]
 8006452:	f000 f8a1 	bl	8006598 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006456:	2301      	movs	r3, #1
 8006458:	61bb      	str	r3, [r7, #24]
 800645a:	e002      	b.n	8006462 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800645c:	f04f 33ff 	mov.w	r3, #4294967295
 8006460:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006462:	69bb      	ldr	r3, [r7, #24]
	}
 8006464:	4618      	mov	r0, r3
 8006466:	3720      	adds	r7, #32
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b088      	sub	sp, #32
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	607a      	str	r2, [r7, #4]
 8006478:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800647a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006484:	3b01      	subs	r3, #1
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	4413      	add	r3, r2
 800648a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	f023 0307 	bic.w	r3, r3, #7
 8006492:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	f003 0307 	and.w	r3, r3, #7
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00a      	beq.n	80064b4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800649e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a2:	f383 8811 	msr	BASEPRI, r3
 80064a6:	f3bf 8f6f 	isb	sy
 80064aa:	f3bf 8f4f 	dsb	sy
 80064ae:	617b      	str	r3, [r7, #20]
}
 80064b0:	bf00      	nop
 80064b2:	e7fe      	b.n	80064b2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80064b4:	2300      	movs	r3, #0
 80064b6:	61fb      	str	r3, [r7, #28]
 80064b8:	e012      	b.n	80064e0 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80064ba:	68ba      	ldr	r2, [r7, #8]
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	4413      	add	r3, r2
 80064c0:	7819      	ldrb	r1, [r3, #0]
 80064c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	4413      	add	r3, r2
 80064c8:	3334      	adds	r3, #52	; 0x34
 80064ca:	460a      	mov	r2, r1
 80064cc:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80064ce:	68ba      	ldr	r2, [r7, #8]
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	4413      	add	r3, r2
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d006      	beq.n	80064e8 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	3301      	adds	r3, #1
 80064de:	61fb      	str	r3, [r7, #28]
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	2b0f      	cmp	r3, #15
 80064e4:	d9e9      	bls.n	80064ba <prvInitialiseNewTask+0x4e>
 80064e6:	e000      	b.n	80064ea <prvInitialiseNewTask+0x7e>
		{
			break;
 80064e8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80064ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80064f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f4:	2b06      	cmp	r3, #6
 80064f6:	d901      	bls.n	80064fc <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80064f8:	2306      	movs	r3, #6
 80064fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80064fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006500:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006504:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006506:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650a:	2200      	movs	r2, #0
 800650c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800650e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006510:	3304      	adds	r3, #4
 8006512:	4618      	mov	r0, r3
 8006514:	f7ff f8fd 	bl	8005712 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651a:	3318      	adds	r3, #24
 800651c:	4618      	mov	r0, r3
 800651e:	f7ff f8f8 	bl	8005712 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006526:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652a:	f1c3 0207 	rsb	r2, r3, #7
 800652e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006530:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006536:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653a:	2200      	movs	r2, #0
 800653c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006542:	2200      	movs	r2, #0
 8006544:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654a:	334c      	adds	r3, #76	; 0x4c
 800654c:	2260      	movs	r2, #96	; 0x60
 800654e:	2100      	movs	r1, #0
 8006550:	4618      	mov	r0, r3
 8006552:	f001 fb29 	bl	8007ba8 <memset>
 8006556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006558:	4a0c      	ldr	r2, [pc, #48]	; (800658c <prvInitialiseNewTask+0x120>)
 800655a:	651a      	str	r2, [r3, #80]	; 0x50
 800655c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655e:	4a0c      	ldr	r2, [pc, #48]	; (8006590 <prvInitialiseNewTask+0x124>)
 8006560:	655a      	str	r2, [r3, #84]	; 0x54
 8006562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006564:	4a0b      	ldr	r2, [pc, #44]	; (8006594 <prvInitialiseNewTask+0x128>)
 8006566:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006568:	683a      	ldr	r2, [r7, #0]
 800656a:	68f9      	ldr	r1, [r7, #12]
 800656c:	69b8      	ldr	r0, [r7, #24]
 800656e:	f000 ff11 	bl	8007394 <pxPortInitialiseStack>
 8006572:	4602      	mov	r2, r0
 8006574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006576:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800657a:	2b00      	cmp	r3, #0
 800657c:	d002      	beq.n	8006584 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800657e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006582:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006584:	bf00      	nop
 8006586:	3720      	adds	r7, #32
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}
 800658c:	080087f4 	.word	0x080087f4
 8006590:	08008814 	.word	0x08008814
 8006594:	080087d4 	.word	0x080087d4

08006598 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80065a0:	f000 ffec 	bl	800757c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80065a4:	4b2a      	ldr	r3, [pc, #168]	; (8006650 <prvAddNewTaskToReadyList+0xb8>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	3301      	adds	r3, #1
 80065aa:	4a29      	ldr	r2, [pc, #164]	; (8006650 <prvAddNewTaskToReadyList+0xb8>)
 80065ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80065ae:	4b29      	ldr	r3, [pc, #164]	; (8006654 <prvAddNewTaskToReadyList+0xbc>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d109      	bne.n	80065ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80065b6:	4a27      	ldr	r2, [pc, #156]	; (8006654 <prvAddNewTaskToReadyList+0xbc>)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80065bc:	4b24      	ldr	r3, [pc, #144]	; (8006650 <prvAddNewTaskToReadyList+0xb8>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d110      	bne.n	80065e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80065c4:	f000 fbdc 	bl	8006d80 <prvInitialiseTaskLists>
 80065c8:	e00d      	b.n	80065e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80065ca:	4b23      	ldr	r3, [pc, #140]	; (8006658 <prvAddNewTaskToReadyList+0xc0>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d109      	bne.n	80065e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80065d2:	4b20      	ldr	r3, [pc, #128]	; (8006654 <prvAddNewTaskToReadyList+0xbc>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065dc:	429a      	cmp	r2, r3
 80065de:	d802      	bhi.n	80065e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80065e0:	4a1c      	ldr	r2, [pc, #112]	; (8006654 <prvAddNewTaskToReadyList+0xbc>)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80065e6:	4b1d      	ldr	r3, [pc, #116]	; (800665c <prvAddNewTaskToReadyList+0xc4>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	3301      	adds	r3, #1
 80065ec:	4a1b      	ldr	r2, [pc, #108]	; (800665c <prvAddNewTaskToReadyList+0xc4>)
 80065ee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f4:	2201      	movs	r2, #1
 80065f6:	409a      	lsls	r2, r3
 80065f8:	4b19      	ldr	r3, [pc, #100]	; (8006660 <prvAddNewTaskToReadyList+0xc8>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	4a18      	ldr	r2, [pc, #96]	; (8006660 <prvAddNewTaskToReadyList+0xc8>)
 8006600:	6013      	str	r3, [r2, #0]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006606:	4613      	mov	r3, r2
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4413      	add	r3, r2
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	4a15      	ldr	r2, [pc, #84]	; (8006664 <prvAddNewTaskToReadyList+0xcc>)
 8006610:	441a      	add	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	3304      	adds	r3, #4
 8006616:	4619      	mov	r1, r3
 8006618:	4610      	mov	r0, r2
 800661a:	f7ff f886 	bl	800572a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800661e:	f000 ffdd 	bl	80075dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006622:	4b0d      	ldr	r3, [pc, #52]	; (8006658 <prvAddNewTaskToReadyList+0xc0>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00e      	beq.n	8006648 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800662a:	4b0a      	ldr	r3, [pc, #40]	; (8006654 <prvAddNewTaskToReadyList+0xbc>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006634:	429a      	cmp	r2, r3
 8006636:	d207      	bcs.n	8006648 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006638:	4b0b      	ldr	r3, [pc, #44]	; (8006668 <prvAddNewTaskToReadyList+0xd0>)
 800663a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800663e:	601a      	str	r2, [r3, #0]
 8006640:	f3bf 8f4f 	dsb	sy
 8006644:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006648:	bf00      	nop
 800664a:	3708      	adds	r7, #8
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}
 8006650:	200005b8 	.word	0x200005b8
 8006654:	200004b8 	.word	0x200004b8
 8006658:	200005c4 	.word	0x200005c4
 800665c:	200005d4 	.word	0x200005d4
 8006660:	200005c0 	.word	0x200005c0
 8006664:	200004bc 	.word	0x200004bc
 8006668:	e000ed04 	.word	0xe000ed04

0800666c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006674:	2300      	movs	r3, #0
 8006676:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d017      	beq.n	80066ae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800667e:	4b13      	ldr	r3, [pc, #76]	; (80066cc <vTaskDelay+0x60>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d00a      	beq.n	800669c <vTaskDelay+0x30>
	__asm volatile
 8006686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800668a:	f383 8811 	msr	BASEPRI, r3
 800668e:	f3bf 8f6f 	isb	sy
 8006692:	f3bf 8f4f 	dsb	sy
 8006696:	60bb      	str	r3, [r7, #8]
}
 8006698:	bf00      	nop
 800669a:	e7fe      	b.n	800669a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800669c:	f000 f884 	bl	80067a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80066a0:	2100      	movs	r1, #0
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 fe10 	bl	80072c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80066a8:	f000 f88c 	bl	80067c4 <xTaskResumeAll>
 80066ac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d107      	bne.n	80066c4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80066b4:	4b06      	ldr	r3, [pc, #24]	; (80066d0 <vTaskDelay+0x64>)
 80066b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066ba:	601a      	str	r2, [r3, #0]
 80066bc:	f3bf 8f4f 	dsb	sy
 80066c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80066c4:	bf00      	nop
 80066c6:	3710      	adds	r7, #16
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	200005e0 	.word	0x200005e0
 80066d0:	e000ed04 	.word	0xe000ed04

080066d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b08a      	sub	sp, #40	; 0x28
 80066d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80066da:	2300      	movs	r3, #0
 80066dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80066de:	2300      	movs	r3, #0
 80066e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80066e2:	463a      	mov	r2, r7
 80066e4:	1d39      	adds	r1, r7, #4
 80066e6:	f107 0308 	add.w	r3, r7, #8
 80066ea:	4618      	mov	r0, r3
 80066ec:	f7fa fb8a 	bl	8000e04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80066f0:	6839      	ldr	r1, [r7, #0]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	68ba      	ldr	r2, [r7, #8]
 80066f6:	9202      	str	r2, [sp, #8]
 80066f8:	9301      	str	r3, [sp, #4]
 80066fa:	2300      	movs	r3, #0
 80066fc:	9300      	str	r3, [sp, #0]
 80066fe:	2300      	movs	r3, #0
 8006700:	460a      	mov	r2, r1
 8006702:	4921      	ldr	r1, [pc, #132]	; (8006788 <vTaskStartScheduler+0xb4>)
 8006704:	4821      	ldr	r0, [pc, #132]	; (800678c <vTaskStartScheduler+0xb8>)
 8006706:	f7ff fe10 	bl	800632a <xTaskCreateStatic>
 800670a:	4603      	mov	r3, r0
 800670c:	4a20      	ldr	r2, [pc, #128]	; (8006790 <vTaskStartScheduler+0xbc>)
 800670e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006710:	4b1f      	ldr	r3, [pc, #124]	; (8006790 <vTaskStartScheduler+0xbc>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d002      	beq.n	800671e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006718:	2301      	movs	r3, #1
 800671a:	617b      	str	r3, [r7, #20]
 800671c:	e001      	b.n	8006722 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800671e:	2300      	movs	r3, #0
 8006720:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	2b01      	cmp	r3, #1
 8006726:	d11b      	bne.n	8006760 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800672c:	f383 8811 	msr	BASEPRI, r3
 8006730:	f3bf 8f6f 	isb	sy
 8006734:	f3bf 8f4f 	dsb	sy
 8006738:	613b      	str	r3, [r7, #16]
}
 800673a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800673c:	4b15      	ldr	r3, [pc, #84]	; (8006794 <vTaskStartScheduler+0xc0>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	334c      	adds	r3, #76	; 0x4c
 8006742:	4a15      	ldr	r2, [pc, #84]	; (8006798 <vTaskStartScheduler+0xc4>)
 8006744:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006746:	4b15      	ldr	r3, [pc, #84]	; (800679c <vTaskStartScheduler+0xc8>)
 8006748:	f04f 32ff 	mov.w	r2, #4294967295
 800674c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800674e:	4b14      	ldr	r3, [pc, #80]	; (80067a0 <vTaskStartScheduler+0xcc>)
 8006750:	2201      	movs	r2, #1
 8006752:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006754:	4b13      	ldr	r3, [pc, #76]	; (80067a4 <vTaskStartScheduler+0xd0>)
 8006756:	2200      	movs	r2, #0
 8006758:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800675a:	f000 fe9d 	bl	8007498 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800675e:	e00e      	b.n	800677e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006766:	d10a      	bne.n	800677e <vTaskStartScheduler+0xaa>
	__asm volatile
 8006768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800676c:	f383 8811 	msr	BASEPRI, r3
 8006770:	f3bf 8f6f 	isb	sy
 8006774:	f3bf 8f4f 	dsb	sy
 8006778:	60fb      	str	r3, [r7, #12]
}
 800677a:	bf00      	nop
 800677c:	e7fe      	b.n	800677c <vTaskStartScheduler+0xa8>
}
 800677e:	bf00      	nop
 8006780:	3718      	adds	r7, #24
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	080087b4 	.word	0x080087b4
 800678c:	08006d51 	.word	0x08006d51
 8006790:	200005dc 	.word	0x200005dc
 8006794:	200004b8 	.word	0x200004b8
 8006798:	20000014 	.word	0x20000014
 800679c:	200005d8 	.word	0x200005d8
 80067a0:	200005c4 	.word	0x200005c4
 80067a4:	200005bc 	.word	0x200005bc

080067a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80067a8:	b480      	push	{r7}
 80067aa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80067ac:	4b04      	ldr	r3, [pc, #16]	; (80067c0 <vTaskSuspendAll+0x18>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	3301      	adds	r3, #1
 80067b2:	4a03      	ldr	r2, [pc, #12]	; (80067c0 <vTaskSuspendAll+0x18>)
 80067b4:	6013      	str	r3, [r2, #0]
}
 80067b6:	bf00      	nop
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bc80      	pop	{r7}
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop
 80067c0:	200005e0 	.word	0x200005e0

080067c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80067ca:	2300      	movs	r3, #0
 80067cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80067ce:	2300      	movs	r3, #0
 80067d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80067d2:	4b41      	ldr	r3, [pc, #260]	; (80068d8 <xTaskResumeAll+0x114>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d10a      	bne.n	80067f0 <xTaskResumeAll+0x2c>
	__asm volatile
 80067da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067de:	f383 8811 	msr	BASEPRI, r3
 80067e2:	f3bf 8f6f 	isb	sy
 80067e6:	f3bf 8f4f 	dsb	sy
 80067ea:	603b      	str	r3, [r7, #0]
}
 80067ec:	bf00      	nop
 80067ee:	e7fe      	b.n	80067ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80067f0:	f000 fec4 	bl	800757c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80067f4:	4b38      	ldr	r3, [pc, #224]	; (80068d8 <xTaskResumeAll+0x114>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	3b01      	subs	r3, #1
 80067fa:	4a37      	ldr	r2, [pc, #220]	; (80068d8 <xTaskResumeAll+0x114>)
 80067fc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067fe:	4b36      	ldr	r3, [pc, #216]	; (80068d8 <xTaskResumeAll+0x114>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d161      	bne.n	80068ca <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006806:	4b35      	ldr	r3, [pc, #212]	; (80068dc <xTaskResumeAll+0x118>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d05d      	beq.n	80068ca <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800680e:	e02e      	b.n	800686e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006810:	4b33      	ldr	r3, [pc, #204]	; (80068e0 <xTaskResumeAll+0x11c>)
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	3318      	adds	r3, #24
 800681c:	4618      	mov	r0, r3
 800681e:	f7fe ffdf 	bl	80057e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	3304      	adds	r3, #4
 8006826:	4618      	mov	r0, r3
 8006828:	f7fe ffda 	bl	80057e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006830:	2201      	movs	r2, #1
 8006832:	409a      	lsls	r2, r3
 8006834:	4b2b      	ldr	r3, [pc, #172]	; (80068e4 <xTaskResumeAll+0x120>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4313      	orrs	r3, r2
 800683a:	4a2a      	ldr	r2, [pc, #168]	; (80068e4 <xTaskResumeAll+0x120>)
 800683c:	6013      	str	r3, [r2, #0]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006842:	4613      	mov	r3, r2
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	4413      	add	r3, r2
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	4a27      	ldr	r2, [pc, #156]	; (80068e8 <xTaskResumeAll+0x124>)
 800684c:	441a      	add	r2, r3
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	3304      	adds	r3, #4
 8006852:	4619      	mov	r1, r3
 8006854:	4610      	mov	r0, r2
 8006856:	f7fe ff68 	bl	800572a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800685e:	4b23      	ldr	r3, [pc, #140]	; (80068ec <xTaskResumeAll+0x128>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006864:	429a      	cmp	r2, r3
 8006866:	d302      	bcc.n	800686e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006868:	4b21      	ldr	r3, [pc, #132]	; (80068f0 <xTaskResumeAll+0x12c>)
 800686a:	2201      	movs	r2, #1
 800686c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800686e:	4b1c      	ldr	r3, [pc, #112]	; (80068e0 <xTaskResumeAll+0x11c>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1cc      	bne.n	8006810 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d001      	beq.n	8006880 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800687c:	f000 fb22 	bl	8006ec4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006880:	4b1c      	ldr	r3, [pc, #112]	; (80068f4 <xTaskResumeAll+0x130>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d010      	beq.n	80068ae <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800688c:	f000 f836 	bl	80068fc <xTaskIncrementTick>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d002      	beq.n	800689c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006896:	4b16      	ldr	r3, [pc, #88]	; (80068f0 <xTaskResumeAll+0x12c>)
 8006898:	2201      	movs	r2, #1
 800689a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	3b01      	subs	r3, #1
 80068a0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d1f1      	bne.n	800688c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80068a8:	4b12      	ldr	r3, [pc, #72]	; (80068f4 <xTaskResumeAll+0x130>)
 80068aa:	2200      	movs	r2, #0
 80068ac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80068ae:	4b10      	ldr	r3, [pc, #64]	; (80068f0 <xTaskResumeAll+0x12c>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d009      	beq.n	80068ca <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80068b6:	2301      	movs	r3, #1
 80068b8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80068ba:	4b0f      	ldr	r3, [pc, #60]	; (80068f8 <xTaskResumeAll+0x134>)
 80068bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068c0:	601a      	str	r2, [r3, #0]
 80068c2:	f3bf 8f4f 	dsb	sy
 80068c6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80068ca:	f000 fe87 	bl	80075dc <vPortExitCritical>

	return xAlreadyYielded;
 80068ce:	68bb      	ldr	r3, [r7, #8]
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3710      	adds	r7, #16
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	200005e0 	.word	0x200005e0
 80068dc:	200005b8 	.word	0x200005b8
 80068e0:	20000578 	.word	0x20000578
 80068e4:	200005c0 	.word	0x200005c0
 80068e8:	200004bc 	.word	0x200004bc
 80068ec:	200004b8 	.word	0x200004b8
 80068f0:	200005cc 	.word	0x200005cc
 80068f4:	200005c8 	.word	0x200005c8
 80068f8:	e000ed04 	.word	0xe000ed04

080068fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b086      	sub	sp, #24
 8006900:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006902:	2300      	movs	r3, #0
 8006904:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006906:	4b51      	ldr	r3, [pc, #324]	; (8006a4c <xTaskIncrementTick+0x150>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	f040 808d 	bne.w	8006a2a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006910:	4b4f      	ldr	r3, [pc, #316]	; (8006a50 <xTaskIncrementTick+0x154>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	3301      	adds	r3, #1
 8006916:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006918:	4a4d      	ldr	r2, [pc, #308]	; (8006a50 <xTaskIncrementTick+0x154>)
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d120      	bne.n	8006966 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006924:	4b4b      	ldr	r3, [pc, #300]	; (8006a54 <xTaskIncrementTick+0x158>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00a      	beq.n	8006944 <xTaskIncrementTick+0x48>
	__asm volatile
 800692e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006932:	f383 8811 	msr	BASEPRI, r3
 8006936:	f3bf 8f6f 	isb	sy
 800693a:	f3bf 8f4f 	dsb	sy
 800693e:	603b      	str	r3, [r7, #0]
}
 8006940:	bf00      	nop
 8006942:	e7fe      	b.n	8006942 <xTaskIncrementTick+0x46>
 8006944:	4b43      	ldr	r3, [pc, #268]	; (8006a54 <xTaskIncrementTick+0x158>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	60fb      	str	r3, [r7, #12]
 800694a:	4b43      	ldr	r3, [pc, #268]	; (8006a58 <xTaskIncrementTick+0x15c>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a41      	ldr	r2, [pc, #260]	; (8006a54 <xTaskIncrementTick+0x158>)
 8006950:	6013      	str	r3, [r2, #0]
 8006952:	4a41      	ldr	r2, [pc, #260]	; (8006a58 <xTaskIncrementTick+0x15c>)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6013      	str	r3, [r2, #0]
 8006958:	4b40      	ldr	r3, [pc, #256]	; (8006a5c <xTaskIncrementTick+0x160>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	3301      	adds	r3, #1
 800695e:	4a3f      	ldr	r2, [pc, #252]	; (8006a5c <xTaskIncrementTick+0x160>)
 8006960:	6013      	str	r3, [r2, #0]
 8006962:	f000 faaf 	bl	8006ec4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006966:	4b3e      	ldr	r3, [pc, #248]	; (8006a60 <xTaskIncrementTick+0x164>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	693a      	ldr	r2, [r7, #16]
 800696c:	429a      	cmp	r2, r3
 800696e:	d34d      	bcc.n	8006a0c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006970:	4b38      	ldr	r3, [pc, #224]	; (8006a54 <xTaskIncrementTick+0x158>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d101      	bne.n	800697e <xTaskIncrementTick+0x82>
 800697a:	2301      	movs	r3, #1
 800697c:	e000      	b.n	8006980 <xTaskIncrementTick+0x84>
 800697e:	2300      	movs	r3, #0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d004      	beq.n	800698e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006984:	4b36      	ldr	r3, [pc, #216]	; (8006a60 <xTaskIncrementTick+0x164>)
 8006986:	f04f 32ff 	mov.w	r2, #4294967295
 800698a:	601a      	str	r2, [r3, #0]
					break;
 800698c:	e03e      	b.n	8006a0c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800698e:	4b31      	ldr	r3, [pc, #196]	; (8006a54 <xTaskIncrementTick+0x158>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800699e:	693a      	ldr	r2, [r7, #16]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d203      	bcs.n	80069ae <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80069a6:	4a2e      	ldr	r2, [pc, #184]	; (8006a60 <xTaskIncrementTick+0x164>)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6013      	str	r3, [r2, #0]
						break;
 80069ac:	e02e      	b.n	8006a0c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	3304      	adds	r3, #4
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7fe ff14 	bl	80057e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d004      	beq.n	80069ca <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	3318      	adds	r3, #24
 80069c4:	4618      	mov	r0, r3
 80069c6:	f7fe ff0b 	bl	80057e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ce:	2201      	movs	r2, #1
 80069d0:	409a      	lsls	r2, r3
 80069d2:	4b24      	ldr	r3, [pc, #144]	; (8006a64 <xTaskIncrementTick+0x168>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	4a22      	ldr	r2, [pc, #136]	; (8006a64 <xTaskIncrementTick+0x168>)
 80069da:	6013      	str	r3, [r2, #0]
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069e0:	4613      	mov	r3, r2
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	4413      	add	r3, r2
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	4a1f      	ldr	r2, [pc, #124]	; (8006a68 <xTaskIncrementTick+0x16c>)
 80069ea:	441a      	add	r2, r3
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	3304      	adds	r3, #4
 80069f0:	4619      	mov	r1, r3
 80069f2:	4610      	mov	r0, r2
 80069f4:	f7fe fe99 	bl	800572a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069fc:	4b1b      	ldr	r3, [pc, #108]	; (8006a6c <xTaskIncrementTick+0x170>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d3b4      	bcc.n	8006970 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006a06:	2301      	movs	r3, #1
 8006a08:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a0a:	e7b1      	b.n	8006970 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006a0c:	4b17      	ldr	r3, [pc, #92]	; (8006a6c <xTaskIncrementTick+0x170>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a12:	4915      	ldr	r1, [pc, #84]	; (8006a68 <xTaskIncrementTick+0x16c>)
 8006a14:	4613      	mov	r3, r2
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	4413      	add	r3, r2
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	440b      	add	r3, r1
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d907      	bls.n	8006a34 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006a24:	2301      	movs	r3, #1
 8006a26:	617b      	str	r3, [r7, #20]
 8006a28:	e004      	b.n	8006a34 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006a2a:	4b11      	ldr	r3, [pc, #68]	; (8006a70 <xTaskIncrementTick+0x174>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	4a0f      	ldr	r2, [pc, #60]	; (8006a70 <xTaskIncrementTick+0x174>)
 8006a32:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006a34:	4b0f      	ldr	r3, [pc, #60]	; (8006a74 <xTaskIncrementTick+0x178>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d001      	beq.n	8006a40 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006a40:	697b      	ldr	r3, [r7, #20]
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3718      	adds	r7, #24
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	200005e0 	.word	0x200005e0
 8006a50:	200005bc 	.word	0x200005bc
 8006a54:	20000570 	.word	0x20000570
 8006a58:	20000574 	.word	0x20000574
 8006a5c:	200005d0 	.word	0x200005d0
 8006a60:	200005d8 	.word	0x200005d8
 8006a64:	200005c0 	.word	0x200005c0
 8006a68:	200004bc 	.word	0x200004bc
 8006a6c:	200004b8 	.word	0x200004b8
 8006a70:	200005c8 	.word	0x200005c8
 8006a74:	200005cc 	.word	0x200005cc

08006a78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b087      	sub	sp, #28
 8006a7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006a7e:	4b29      	ldr	r3, [pc, #164]	; (8006b24 <vTaskSwitchContext+0xac>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d003      	beq.n	8006a8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006a86:	4b28      	ldr	r3, [pc, #160]	; (8006b28 <vTaskSwitchContext+0xb0>)
 8006a88:	2201      	movs	r2, #1
 8006a8a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006a8c:	e044      	b.n	8006b18 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006a8e:	4b26      	ldr	r3, [pc, #152]	; (8006b28 <vTaskSwitchContext+0xb0>)
 8006a90:	2200      	movs	r2, #0
 8006a92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006a94:	4b25      	ldr	r3, [pc, #148]	; (8006b2c <vTaskSwitchContext+0xb4>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	fab3 f383 	clz	r3, r3
 8006aa0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006aa2:	7afb      	ldrb	r3, [r7, #11]
 8006aa4:	f1c3 031f 	rsb	r3, r3, #31
 8006aa8:	617b      	str	r3, [r7, #20]
 8006aaa:	4921      	ldr	r1, [pc, #132]	; (8006b30 <vTaskSwitchContext+0xb8>)
 8006aac:	697a      	ldr	r2, [r7, #20]
 8006aae:	4613      	mov	r3, r2
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4413      	add	r3, r2
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	440b      	add	r3, r1
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d10a      	bne.n	8006ad4 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac2:	f383 8811 	msr	BASEPRI, r3
 8006ac6:	f3bf 8f6f 	isb	sy
 8006aca:	f3bf 8f4f 	dsb	sy
 8006ace:	607b      	str	r3, [r7, #4]
}
 8006ad0:	bf00      	nop
 8006ad2:	e7fe      	b.n	8006ad2 <vTaskSwitchContext+0x5a>
 8006ad4:	697a      	ldr	r2, [r7, #20]
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	4413      	add	r3, r2
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	4a14      	ldr	r2, [pc, #80]	; (8006b30 <vTaskSwitchContext+0xb8>)
 8006ae0:	4413      	add	r3, r2
 8006ae2:	613b      	str	r3, [r7, #16]
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	685a      	ldr	r2, [r3, #4]
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	605a      	str	r2, [r3, #4]
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	685a      	ldr	r2, [r3, #4]
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	3308      	adds	r3, #8
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d104      	bne.n	8006b04 <vTaskSwitchContext+0x8c>
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	685a      	ldr	r2, [r3, #4]
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	605a      	str	r2, [r3, #4]
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	4a0a      	ldr	r2, [pc, #40]	; (8006b34 <vTaskSwitchContext+0xbc>)
 8006b0c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006b0e:	4b09      	ldr	r3, [pc, #36]	; (8006b34 <vTaskSwitchContext+0xbc>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	334c      	adds	r3, #76	; 0x4c
 8006b14:	4a08      	ldr	r2, [pc, #32]	; (8006b38 <vTaskSwitchContext+0xc0>)
 8006b16:	6013      	str	r3, [r2, #0]
}
 8006b18:	bf00      	nop
 8006b1a:	371c      	adds	r7, #28
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bc80      	pop	{r7}
 8006b20:	4770      	bx	lr
 8006b22:	bf00      	nop
 8006b24:	200005e0 	.word	0x200005e0
 8006b28:	200005cc 	.word	0x200005cc
 8006b2c:	200005c0 	.word	0x200005c0
 8006b30:	200004bc 	.word	0x200004bc
 8006b34:	200004b8 	.word	0x200004b8
 8006b38:	20000014 	.word	0x20000014

08006b3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d10a      	bne.n	8006b62 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b50:	f383 8811 	msr	BASEPRI, r3
 8006b54:	f3bf 8f6f 	isb	sy
 8006b58:	f3bf 8f4f 	dsb	sy
 8006b5c:	60fb      	str	r3, [r7, #12]
}
 8006b5e:	bf00      	nop
 8006b60:	e7fe      	b.n	8006b60 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006b62:	4b07      	ldr	r3, [pc, #28]	; (8006b80 <vTaskPlaceOnEventList+0x44>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	3318      	adds	r3, #24
 8006b68:	4619      	mov	r1, r3
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f7fe fe00 	bl	8005770 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006b70:	2101      	movs	r1, #1
 8006b72:	6838      	ldr	r0, [r7, #0]
 8006b74:	f000 fba8 	bl	80072c8 <prvAddCurrentTaskToDelayedList>
}
 8006b78:	bf00      	nop
 8006b7a:	3710      	adds	r7, #16
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	200004b8 	.word	0x200004b8

08006b84 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b086      	sub	sp, #24
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d10a      	bne.n	8006bb0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9e:	f383 8811 	msr	BASEPRI, r3
 8006ba2:	f3bf 8f6f 	isb	sy
 8006ba6:	f3bf 8f4f 	dsb	sy
 8006baa:	60fb      	str	r3, [r7, #12]
}
 8006bac:	bf00      	nop
 8006bae:	e7fe      	b.n	8006bae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	3318      	adds	r3, #24
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f7fe fe13 	bl	80057e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bba:	4b1d      	ldr	r3, [pc, #116]	; (8006c30 <xTaskRemoveFromEventList+0xac>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d11c      	bne.n	8006bfc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	3304      	adds	r3, #4
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7fe fe0a 	bl	80057e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	409a      	lsls	r2, r3
 8006bd4:	4b17      	ldr	r3, [pc, #92]	; (8006c34 <xTaskRemoveFromEventList+0xb0>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	4a16      	ldr	r2, [pc, #88]	; (8006c34 <xTaskRemoveFromEventList+0xb0>)
 8006bdc:	6013      	str	r3, [r2, #0]
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006be2:	4613      	mov	r3, r2
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	4413      	add	r3, r2
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	4a13      	ldr	r2, [pc, #76]	; (8006c38 <xTaskRemoveFromEventList+0xb4>)
 8006bec:	441a      	add	r2, r3
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	3304      	adds	r3, #4
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	4610      	mov	r0, r2
 8006bf6:	f7fe fd98 	bl	800572a <vListInsertEnd>
 8006bfa:	e005      	b.n	8006c08 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	3318      	adds	r3, #24
 8006c00:	4619      	mov	r1, r3
 8006c02:	480e      	ldr	r0, [pc, #56]	; (8006c3c <xTaskRemoveFromEventList+0xb8>)
 8006c04:	f7fe fd91 	bl	800572a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c0c:	4b0c      	ldr	r3, [pc, #48]	; (8006c40 <xTaskRemoveFromEventList+0xbc>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d905      	bls.n	8006c22 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006c16:	2301      	movs	r3, #1
 8006c18:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006c1a:	4b0a      	ldr	r3, [pc, #40]	; (8006c44 <xTaskRemoveFromEventList+0xc0>)
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	601a      	str	r2, [r3, #0]
 8006c20:	e001      	b.n	8006c26 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006c22:	2300      	movs	r3, #0
 8006c24:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006c26:	697b      	ldr	r3, [r7, #20]
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3718      	adds	r7, #24
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	200005e0 	.word	0x200005e0
 8006c34:	200005c0 	.word	0x200005c0
 8006c38:	200004bc 	.word	0x200004bc
 8006c3c:	20000578 	.word	0x20000578
 8006c40:	200004b8 	.word	0x200004b8
 8006c44:	200005cc 	.word	0x200005cc

08006c48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006c50:	4b06      	ldr	r3, [pc, #24]	; (8006c6c <vTaskInternalSetTimeOutState+0x24>)
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006c58:	4b05      	ldr	r3, [pc, #20]	; (8006c70 <vTaskInternalSetTimeOutState+0x28>)
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	605a      	str	r2, [r3, #4]
}
 8006c60:	bf00      	nop
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bc80      	pop	{r7}
 8006c68:	4770      	bx	lr
 8006c6a:	bf00      	nop
 8006c6c:	200005d0 	.word	0x200005d0
 8006c70:	200005bc 	.word	0x200005bc

08006c74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b088      	sub	sp, #32
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d10a      	bne.n	8006c9a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c88:	f383 8811 	msr	BASEPRI, r3
 8006c8c:	f3bf 8f6f 	isb	sy
 8006c90:	f3bf 8f4f 	dsb	sy
 8006c94:	613b      	str	r3, [r7, #16]
}
 8006c96:	bf00      	nop
 8006c98:	e7fe      	b.n	8006c98 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d10a      	bne.n	8006cb6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca4:	f383 8811 	msr	BASEPRI, r3
 8006ca8:	f3bf 8f6f 	isb	sy
 8006cac:	f3bf 8f4f 	dsb	sy
 8006cb0:	60fb      	str	r3, [r7, #12]
}
 8006cb2:	bf00      	nop
 8006cb4:	e7fe      	b.n	8006cb4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006cb6:	f000 fc61 	bl	800757c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006cba:	4b1d      	ldr	r3, [pc, #116]	; (8006d30 <xTaskCheckForTimeOut+0xbc>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	69ba      	ldr	r2, [r7, #24]
 8006cc6:	1ad3      	subs	r3, r2, r3
 8006cc8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cd2:	d102      	bne.n	8006cda <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	61fb      	str	r3, [r7, #28]
 8006cd8:	e023      	b.n	8006d22 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	4b15      	ldr	r3, [pc, #84]	; (8006d34 <xTaskCheckForTimeOut+0xc0>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d007      	beq.n	8006cf6 <xTaskCheckForTimeOut+0x82>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	69ba      	ldr	r2, [r7, #24]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d302      	bcc.n	8006cf6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	61fb      	str	r3, [r7, #28]
 8006cf4:	e015      	b.n	8006d22 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	697a      	ldr	r2, [r7, #20]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d20b      	bcs.n	8006d18 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	1ad2      	subs	r2, r2, r3
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f7ff ff9b 	bl	8006c48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006d12:	2300      	movs	r3, #0
 8006d14:	61fb      	str	r3, [r7, #28]
 8006d16:	e004      	b.n	8006d22 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006d22:	f000 fc5b 	bl	80075dc <vPortExitCritical>

	return xReturn;
 8006d26:	69fb      	ldr	r3, [r7, #28]
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3720      	adds	r7, #32
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	200005bc 	.word	0x200005bc
 8006d34:	200005d0 	.word	0x200005d0

08006d38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006d38:	b480      	push	{r7}
 8006d3a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006d3c:	4b03      	ldr	r3, [pc, #12]	; (8006d4c <vTaskMissedYield+0x14>)
 8006d3e:	2201      	movs	r2, #1
 8006d40:	601a      	str	r2, [r3, #0]
}
 8006d42:	bf00      	nop
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bc80      	pop	{r7}
 8006d48:	4770      	bx	lr
 8006d4a:	bf00      	nop
 8006d4c:	200005cc 	.word	0x200005cc

08006d50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006d58:	f000 f852 	bl	8006e00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006d5c:	4b06      	ldr	r3, [pc, #24]	; (8006d78 <prvIdleTask+0x28>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d9f9      	bls.n	8006d58 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006d64:	4b05      	ldr	r3, [pc, #20]	; (8006d7c <prvIdleTask+0x2c>)
 8006d66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d6a:	601a      	str	r2, [r3, #0]
 8006d6c:	f3bf 8f4f 	dsb	sy
 8006d70:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006d74:	e7f0      	b.n	8006d58 <prvIdleTask+0x8>
 8006d76:	bf00      	nop
 8006d78:	200004bc 	.word	0x200004bc
 8006d7c:	e000ed04 	.word	0xe000ed04

08006d80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d86:	2300      	movs	r3, #0
 8006d88:	607b      	str	r3, [r7, #4]
 8006d8a:	e00c      	b.n	8006da6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	4613      	mov	r3, r2
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	4413      	add	r3, r2
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	4a12      	ldr	r2, [pc, #72]	; (8006de0 <prvInitialiseTaskLists+0x60>)
 8006d98:	4413      	add	r3, r2
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f7fe fc9a 	bl	80056d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	3301      	adds	r3, #1
 8006da4:	607b      	str	r3, [r7, #4]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2b06      	cmp	r3, #6
 8006daa:	d9ef      	bls.n	8006d8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006dac:	480d      	ldr	r0, [pc, #52]	; (8006de4 <prvInitialiseTaskLists+0x64>)
 8006dae:	f7fe fc91 	bl	80056d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006db2:	480d      	ldr	r0, [pc, #52]	; (8006de8 <prvInitialiseTaskLists+0x68>)
 8006db4:	f7fe fc8e 	bl	80056d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006db8:	480c      	ldr	r0, [pc, #48]	; (8006dec <prvInitialiseTaskLists+0x6c>)
 8006dba:	f7fe fc8b 	bl	80056d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006dbe:	480c      	ldr	r0, [pc, #48]	; (8006df0 <prvInitialiseTaskLists+0x70>)
 8006dc0:	f7fe fc88 	bl	80056d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006dc4:	480b      	ldr	r0, [pc, #44]	; (8006df4 <prvInitialiseTaskLists+0x74>)
 8006dc6:	f7fe fc85 	bl	80056d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006dca:	4b0b      	ldr	r3, [pc, #44]	; (8006df8 <prvInitialiseTaskLists+0x78>)
 8006dcc:	4a05      	ldr	r2, [pc, #20]	; (8006de4 <prvInitialiseTaskLists+0x64>)
 8006dce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006dd0:	4b0a      	ldr	r3, [pc, #40]	; (8006dfc <prvInitialiseTaskLists+0x7c>)
 8006dd2:	4a05      	ldr	r2, [pc, #20]	; (8006de8 <prvInitialiseTaskLists+0x68>)
 8006dd4:	601a      	str	r2, [r3, #0]
}
 8006dd6:	bf00      	nop
 8006dd8:	3708      	adds	r7, #8
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	200004bc 	.word	0x200004bc
 8006de4:	20000548 	.word	0x20000548
 8006de8:	2000055c 	.word	0x2000055c
 8006dec:	20000578 	.word	0x20000578
 8006df0:	2000058c 	.word	0x2000058c
 8006df4:	200005a4 	.word	0x200005a4
 8006df8:	20000570 	.word	0x20000570
 8006dfc:	20000574 	.word	0x20000574

08006e00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e06:	e019      	b.n	8006e3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006e08:	f000 fbb8 	bl	800757c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006e0c:	4b10      	ldr	r3, [pc, #64]	; (8006e50 <prvCheckTasksWaitingTermination+0x50>)
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	3304      	adds	r3, #4
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f7fe fce1 	bl	80057e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006e1e:	4b0d      	ldr	r3, [pc, #52]	; (8006e54 <prvCheckTasksWaitingTermination+0x54>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	3b01      	subs	r3, #1
 8006e24:	4a0b      	ldr	r2, [pc, #44]	; (8006e54 <prvCheckTasksWaitingTermination+0x54>)
 8006e26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006e28:	4b0b      	ldr	r3, [pc, #44]	; (8006e58 <prvCheckTasksWaitingTermination+0x58>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	3b01      	subs	r3, #1
 8006e2e:	4a0a      	ldr	r2, [pc, #40]	; (8006e58 <prvCheckTasksWaitingTermination+0x58>)
 8006e30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006e32:	f000 fbd3 	bl	80075dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f810 	bl	8006e5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e3c:	4b06      	ldr	r3, [pc, #24]	; (8006e58 <prvCheckTasksWaitingTermination+0x58>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1e1      	bne.n	8006e08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006e44:	bf00      	nop
 8006e46:	bf00      	nop
 8006e48:	3708      	adds	r7, #8
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	2000058c 	.word	0x2000058c
 8006e54:	200005b8 	.word	0x200005b8
 8006e58:	200005a0 	.word	0x200005a0

08006e5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	334c      	adds	r3, #76	; 0x4c
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f000 ff47 	bl	8007cfc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d108      	bne.n	8006e8a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f000 fd41 	bl	8007904 <vPortFree>
				vPortFree( pxTCB );
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 fd3e 	bl	8007904 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006e88:	e018      	b.n	8006ebc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d103      	bne.n	8006e9c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 fd35 	bl	8007904 <vPortFree>
	}
 8006e9a:	e00f      	b.n	8006ebc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006ea2:	2b02      	cmp	r3, #2
 8006ea4:	d00a      	beq.n	8006ebc <prvDeleteTCB+0x60>
	__asm volatile
 8006ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eaa:	f383 8811 	msr	BASEPRI, r3
 8006eae:	f3bf 8f6f 	isb	sy
 8006eb2:	f3bf 8f4f 	dsb	sy
 8006eb6:	60fb      	str	r3, [r7, #12]
}
 8006eb8:	bf00      	nop
 8006eba:	e7fe      	b.n	8006eba <prvDeleteTCB+0x5e>
	}
 8006ebc:	bf00      	nop
 8006ebe:	3710      	adds	r7, #16
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006eca:	4b0e      	ldr	r3, [pc, #56]	; (8006f04 <prvResetNextTaskUnblockTime+0x40>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d101      	bne.n	8006ed8 <prvResetNextTaskUnblockTime+0x14>
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e000      	b.n	8006eda <prvResetNextTaskUnblockTime+0x16>
 8006ed8:	2300      	movs	r3, #0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d004      	beq.n	8006ee8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ede:	4b0a      	ldr	r3, [pc, #40]	; (8006f08 <prvResetNextTaskUnblockTime+0x44>)
 8006ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ee4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006ee6:	e008      	b.n	8006efa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006ee8:	4b06      	ldr	r3, [pc, #24]	; (8006f04 <prvResetNextTaskUnblockTime+0x40>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	4a04      	ldr	r2, [pc, #16]	; (8006f08 <prvResetNextTaskUnblockTime+0x44>)
 8006ef8:	6013      	str	r3, [r2, #0]
}
 8006efa:	bf00      	nop
 8006efc:	370c      	adds	r7, #12
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bc80      	pop	{r7}
 8006f02:	4770      	bx	lr
 8006f04:	20000570 	.word	0x20000570
 8006f08:	200005d8 	.word	0x200005d8

08006f0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006f12:	4b0b      	ldr	r3, [pc, #44]	; (8006f40 <xTaskGetSchedulerState+0x34>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d102      	bne.n	8006f20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	607b      	str	r3, [r7, #4]
 8006f1e:	e008      	b.n	8006f32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f20:	4b08      	ldr	r3, [pc, #32]	; (8006f44 <xTaskGetSchedulerState+0x38>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d102      	bne.n	8006f2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006f28:	2302      	movs	r3, #2
 8006f2a:	607b      	str	r3, [r7, #4]
 8006f2c:	e001      	b.n	8006f32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006f32:	687b      	ldr	r3, [r7, #4]
	}
 8006f34:	4618      	mov	r0, r3
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bc80      	pop	{r7}
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	200005c4 	.word	0x200005c4
 8006f44:	200005e0 	.word	0x200005e0

08006f48 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006f54:	2300      	movs	r3, #0
 8006f56:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d06e      	beq.n	800703c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f62:	4b39      	ldr	r3, [pc, #228]	; (8007048 <xTaskPriorityInherit+0x100>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d25e      	bcs.n	800702a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	699b      	ldr	r3, [r3, #24]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	db06      	blt.n	8006f82 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f74:	4b34      	ldr	r3, [pc, #208]	; (8007048 <xTaskPriorityInherit+0x100>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f7a:	f1c3 0207 	rsb	r2, r3, #7
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	6959      	ldr	r1, [r3, #20]
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4413      	add	r3, r2
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	4a2e      	ldr	r2, [pc, #184]	; (800704c <xTaskPriorityInherit+0x104>)
 8006f94:	4413      	add	r3, r2
 8006f96:	4299      	cmp	r1, r3
 8006f98:	d101      	bne.n	8006f9e <xTaskPriorityInherit+0x56>
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e000      	b.n	8006fa0 <xTaskPriorityInherit+0x58>
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d03a      	beq.n	800701a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	3304      	adds	r3, #4
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f7fe fc19 	bl	80057e0 <uxListRemove>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d115      	bne.n	8006fe0 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb8:	4924      	ldr	r1, [pc, #144]	; (800704c <xTaskPriorityInherit+0x104>)
 8006fba:	4613      	mov	r3, r2
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	4413      	add	r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	440b      	add	r3, r1
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d10a      	bne.n	8006fe0 <xTaskPriorityInherit+0x98>
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fce:	2201      	movs	r2, #1
 8006fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fd4:	43da      	mvns	r2, r3
 8006fd6:	4b1e      	ldr	r3, [pc, #120]	; (8007050 <xTaskPriorityInherit+0x108>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4013      	ands	r3, r2
 8006fdc:	4a1c      	ldr	r2, [pc, #112]	; (8007050 <xTaskPriorityInherit+0x108>)
 8006fde:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006fe0:	4b19      	ldr	r3, [pc, #100]	; (8007048 <xTaskPriorityInherit+0x100>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fee:	2201      	movs	r2, #1
 8006ff0:	409a      	lsls	r2, r3
 8006ff2:	4b17      	ldr	r3, [pc, #92]	; (8007050 <xTaskPriorityInherit+0x108>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	4a15      	ldr	r2, [pc, #84]	; (8007050 <xTaskPriorityInherit+0x108>)
 8006ffa:	6013      	str	r3, [r2, #0]
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007000:	4613      	mov	r3, r2
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	4413      	add	r3, r2
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	4a10      	ldr	r2, [pc, #64]	; (800704c <xTaskPriorityInherit+0x104>)
 800700a:	441a      	add	r2, r3
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	3304      	adds	r3, #4
 8007010:	4619      	mov	r1, r3
 8007012:	4610      	mov	r0, r2
 8007014:	f7fe fb89 	bl	800572a <vListInsertEnd>
 8007018:	e004      	b.n	8007024 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800701a:	4b0b      	ldr	r3, [pc, #44]	; (8007048 <xTaskPriorityInherit+0x100>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007024:	2301      	movs	r3, #1
 8007026:	60fb      	str	r3, [r7, #12]
 8007028:	e008      	b.n	800703c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800702e:	4b06      	ldr	r3, [pc, #24]	; (8007048 <xTaskPriorityInherit+0x100>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007034:	429a      	cmp	r2, r3
 8007036:	d201      	bcs.n	800703c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007038:	2301      	movs	r3, #1
 800703a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800703c:	68fb      	ldr	r3, [r7, #12]
	}
 800703e:	4618      	mov	r0, r3
 8007040:	3710      	adds	r7, #16
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	200004b8 	.word	0x200004b8
 800704c:	200004bc 	.word	0x200004bc
 8007050:	200005c0 	.word	0x200005c0

08007054 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007054:	b580      	push	{r7, lr}
 8007056:	b086      	sub	sp, #24
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007060:	2300      	movs	r3, #0
 8007062:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d06e      	beq.n	8007148 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800706a:	4b3a      	ldr	r3, [pc, #232]	; (8007154 <xTaskPriorityDisinherit+0x100>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	693a      	ldr	r2, [r7, #16]
 8007070:	429a      	cmp	r2, r3
 8007072:	d00a      	beq.n	800708a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007078:	f383 8811 	msr	BASEPRI, r3
 800707c:	f3bf 8f6f 	isb	sy
 8007080:	f3bf 8f4f 	dsb	sy
 8007084:	60fb      	str	r3, [r7, #12]
}
 8007086:	bf00      	nop
 8007088:	e7fe      	b.n	8007088 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800708e:	2b00      	cmp	r3, #0
 8007090:	d10a      	bne.n	80070a8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007096:	f383 8811 	msr	BASEPRI, r3
 800709a:	f3bf 8f6f 	isb	sy
 800709e:	f3bf 8f4f 	dsb	sy
 80070a2:	60bb      	str	r3, [r7, #8]
}
 80070a4:	bf00      	nop
 80070a6:	e7fe      	b.n	80070a6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070ac:	1e5a      	subs	r2, r3, #1
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d044      	beq.n	8007148 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d140      	bne.n	8007148 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	3304      	adds	r3, #4
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7fe fb88 	bl	80057e0 <uxListRemove>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d115      	bne.n	8007102 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070da:	491f      	ldr	r1, [pc, #124]	; (8007158 <xTaskPriorityDisinherit+0x104>)
 80070dc:	4613      	mov	r3, r2
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	4413      	add	r3, r2
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	440b      	add	r3, r1
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d10a      	bne.n	8007102 <xTaskPriorityDisinherit+0xae>
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f0:	2201      	movs	r2, #1
 80070f2:	fa02 f303 	lsl.w	r3, r2, r3
 80070f6:	43da      	mvns	r2, r3
 80070f8:	4b18      	ldr	r3, [pc, #96]	; (800715c <xTaskPriorityDisinherit+0x108>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4013      	ands	r3, r2
 80070fe:	4a17      	ldr	r2, [pc, #92]	; (800715c <xTaskPriorityDisinherit+0x108>)
 8007100:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710e:	f1c3 0207 	rsb	r2, r3, #7
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800711a:	2201      	movs	r2, #1
 800711c:	409a      	lsls	r2, r3
 800711e:	4b0f      	ldr	r3, [pc, #60]	; (800715c <xTaskPriorityDisinherit+0x108>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4313      	orrs	r3, r2
 8007124:	4a0d      	ldr	r2, [pc, #52]	; (800715c <xTaskPriorityDisinherit+0x108>)
 8007126:	6013      	str	r3, [r2, #0]
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800712c:	4613      	mov	r3, r2
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	4413      	add	r3, r2
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	4a08      	ldr	r2, [pc, #32]	; (8007158 <xTaskPriorityDisinherit+0x104>)
 8007136:	441a      	add	r2, r3
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	3304      	adds	r3, #4
 800713c:	4619      	mov	r1, r3
 800713e:	4610      	mov	r0, r2
 8007140:	f7fe faf3 	bl	800572a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007144:	2301      	movs	r3, #1
 8007146:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007148:	697b      	ldr	r3, [r7, #20]
	}
 800714a:	4618      	mov	r0, r3
 800714c:	3718      	adds	r7, #24
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	200004b8 	.word	0x200004b8
 8007158:	200004bc 	.word	0x200004bc
 800715c:	200005c0 	.word	0x200005c0

08007160 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007160:	b580      	push	{r7, lr}
 8007162:	b088      	sub	sp, #32
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800716e:	2301      	movs	r3, #1
 8007170:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2b00      	cmp	r3, #0
 8007176:	f000 8088 	beq.w	800728a <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800717e:	2b00      	cmp	r3, #0
 8007180:	d10a      	bne.n	8007198 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007186:	f383 8811 	msr	BASEPRI, r3
 800718a:	f3bf 8f6f 	isb	sy
 800718e:	f3bf 8f4f 	dsb	sy
 8007192:	60fb      	str	r3, [r7, #12]
}
 8007194:	bf00      	nop
 8007196:	e7fe      	b.n	8007196 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800719c:	683a      	ldr	r2, [r7, #0]
 800719e:	429a      	cmp	r2, r3
 80071a0:	d902      	bls.n	80071a8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	61fb      	str	r3, [r7, #28]
 80071a6:	e002      	b.n	80071ae <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ac:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b2:	69fa      	ldr	r2, [r7, #28]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d068      	beq.n	800728a <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071bc:	697a      	ldr	r2, [r7, #20]
 80071be:	429a      	cmp	r2, r3
 80071c0:	d163      	bne.n	800728a <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80071c2:	4b34      	ldr	r3, [pc, #208]	; (8007294 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	69ba      	ldr	r2, [r7, #24]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d10a      	bne.n	80071e2 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 80071cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d0:	f383 8811 	msr	BASEPRI, r3
 80071d4:	f3bf 8f6f 	isb	sy
 80071d8:	f3bf 8f4f 	dsb	sy
 80071dc:	60bb      	str	r3, [r7, #8]
}
 80071de:	bf00      	nop
 80071e0:	e7fe      	b.n	80071e0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80071e2:	69bb      	ldr	r3, [r7, #24]
 80071e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80071e8:	69bb      	ldr	r3, [r7, #24]
 80071ea:	69fa      	ldr	r2, [r7, #28]
 80071ec:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80071ee:	69bb      	ldr	r3, [r7, #24]
 80071f0:	699b      	ldr	r3, [r3, #24]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	db04      	blt.n	8007200 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	f1c3 0207 	rsb	r2, r3, #7
 80071fc:	69bb      	ldr	r3, [r7, #24]
 80071fe:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	6959      	ldr	r1, [r3, #20]
 8007204:	693a      	ldr	r2, [r7, #16]
 8007206:	4613      	mov	r3, r2
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	4413      	add	r3, r2
 800720c:	009b      	lsls	r3, r3, #2
 800720e:	4a22      	ldr	r2, [pc, #136]	; (8007298 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007210:	4413      	add	r3, r2
 8007212:	4299      	cmp	r1, r3
 8007214:	d101      	bne.n	800721a <vTaskPriorityDisinheritAfterTimeout+0xba>
 8007216:	2301      	movs	r3, #1
 8007218:	e000      	b.n	800721c <vTaskPriorityDisinheritAfterTimeout+0xbc>
 800721a:	2300      	movs	r3, #0
 800721c:	2b00      	cmp	r3, #0
 800721e:	d034      	beq.n	800728a <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007220:	69bb      	ldr	r3, [r7, #24]
 8007222:	3304      	adds	r3, #4
 8007224:	4618      	mov	r0, r3
 8007226:	f7fe fadb 	bl	80057e0 <uxListRemove>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d115      	bne.n	800725c <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007230:	69bb      	ldr	r3, [r7, #24]
 8007232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007234:	4918      	ldr	r1, [pc, #96]	; (8007298 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007236:	4613      	mov	r3, r2
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	4413      	add	r3, r2
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	440b      	add	r3, r1
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d10a      	bne.n	800725c <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800724a:	2201      	movs	r2, #1
 800724c:	fa02 f303 	lsl.w	r3, r2, r3
 8007250:	43da      	mvns	r2, r3
 8007252:	4b12      	ldr	r3, [pc, #72]	; (800729c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4013      	ands	r3, r2
 8007258:	4a10      	ldr	r2, [pc, #64]	; (800729c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800725a:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800725c:	69bb      	ldr	r3, [r7, #24]
 800725e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007260:	2201      	movs	r2, #1
 8007262:	409a      	lsls	r2, r3
 8007264:	4b0d      	ldr	r3, [pc, #52]	; (800729c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4313      	orrs	r3, r2
 800726a:	4a0c      	ldr	r2, [pc, #48]	; (800729c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800726c:	6013      	str	r3, [r2, #0]
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007272:	4613      	mov	r3, r2
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	4413      	add	r3, r2
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	4a07      	ldr	r2, [pc, #28]	; (8007298 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800727c:	441a      	add	r2, r3
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	3304      	adds	r3, #4
 8007282:	4619      	mov	r1, r3
 8007284:	4610      	mov	r0, r2
 8007286:	f7fe fa50 	bl	800572a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800728a:	bf00      	nop
 800728c:	3720      	adds	r7, #32
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	200004b8 	.word	0x200004b8
 8007298:	200004bc 	.word	0x200004bc
 800729c:	200005c0 	.word	0x200005c0

080072a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80072a0:	b480      	push	{r7}
 80072a2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80072a4:	4b07      	ldr	r3, [pc, #28]	; (80072c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d004      	beq.n	80072b6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80072ac:	4b05      	ldr	r3, [pc, #20]	; (80072c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80072b2:	3201      	adds	r2, #1
 80072b4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80072b6:	4b03      	ldr	r3, [pc, #12]	; (80072c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80072b8:	681b      	ldr	r3, [r3, #0]
	}
 80072ba:	4618      	mov	r0, r3
 80072bc:	46bd      	mov	sp, r7
 80072be:	bc80      	pop	{r7}
 80072c0:	4770      	bx	lr
 80072c2:	bf00      	nop
 80072c4:	200004b8 	.word	0x200004b8

080072c8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80072d2:	4b29      	ldr	r3, [pc, #164]	; (8007378 <prvAddCurrentTaskToDelayedList+0xb0>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80072d8:	4b28      	ldr	r3, [pc, #160]	; (800737c <prvAddCurrentTaskToDelayedList+0xb4>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	3304      	adds	r3, #4
 80072de:	4618      	mov	r0, r3
 80072e0:	f7fe fa7e 	bl	80057e0 <uxListRemove>
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d10b      	bne.n	8007302 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80072ea:	4b24      	ldr	r3, [pc, #144]	; (800737c <prvAddCurrentTaskToDelayedList+0xb4>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f0:	2201      	movs	r2, #1
 80072f2:	fa02 f303 	lsl.w	r3, r2, r3
 80072f6:	43da      	mvns	r2, r3
 80072f8:	4b21      	ldr	r3, [pc, #132]	; (8007380 <prvAddCurrentTaskToDelayedList+0xb8>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4013      	ands	r3, r2
 80072fe:	4a20      	ldr	r2, [pc, #128]	; (8007380 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007300:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007308:	d10a      	bne.n	8007320 <prvAddCurrentTaskToDelayedList+0x58>
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d007      	beq.n	8007320 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007310:	4b1a      	ldr	r3, [pc, #104]	; (800737c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	3304      	adds	r3, #4
 8007316:	4619      	mov	r1, r3
 8007318:	481a      	ldr	r0, [pc, #104]	; (8007384 <prvAddCurrentTaskToDelayedList+0xbc>)
 800731a:	f7fe fa06 	bl	800572a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800731e:	e026      	b.n	800736e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007320:	68fa      	ldr	r2, [r7, #12]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4413      	add	r3, r2
 8007326:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007328:	4b14      	ldr	r3, [pc, #80]	; (800737c <prvAddCurrentTaskToDelayedList+0xb4>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	68ba      	ldr	r2, [r7, #8]
 800732e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007330:	68ba      	ldr	r2, [r7, #8]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	429a      	cmp	r2, r3
 8007336:	d209      	bcs.n	800734c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007338:	4b13      	ldr	r3, [pc, #76]	; (8007388 <prvAddCurrentTaskToDelayedList+0xc0>)
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	4b0f      	ldr	r3, [pc, #60]	; (800737c <prvAddCurrentTaskToDelayedList+0xb4>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	3304      	adds	r3, #4
 8007342:	4619      	mov	r1, r3
 8007344:	4610      	mov	r0, r2
 8007346:	f7fe fa13 	bl	8005770 <vListInsert>
}
 800734a:	e010      	b.n	800736e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800734c:	4b0f      	ldr	r3, [pc, #60]	; (800738c <prvAddCurrentTaskToDelayedList+0xc4>)
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	4b0a      	ldr	r3, [pc, #40]	; (800737c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	3304      	adds	r3, #4
 8007356:	4619      	mov	r1, r3
 8007358:	4610      	mov	r0, r2
 800735a:	f7fe fa09 	bl	8005770 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800735e:	4b0c      	ldr	r3, [pc, #48]	; (8007390 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	68ba      	ldr	r2, [r7, #8]
 8007364:	429a      	cmp	r2, r3
 8007366:	d202      	bcs.n	800736e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007368:	4a09      	ldr	r2, [pc, #36]	; (8007390 <prvAddCurrentTaskToDelayedList+0xc8>)
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	6013      	str	r3, [r2, #0]
}
 800736e:	bf00      	nop
 8007370:	3710      	adds	r7, #16
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	200005bc 	.word	0x200005bc
 800737c:	200004b8 	.word	0x200004b8
 8007380:	200005c0 	.word	0x200005c0
 8007384:	200005a4 	.word	0x200005a4
 8007388:	20000574 	.word	0x20000574
 800738c:	20000570 	.word	0x20000570
 8007390:	200005d8 	.word	0x200005d8

08007394 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007394:	b480      	push	{r7}
 8007396:	b085      	sub	sp, #20
 8007398:	af00      	add	r7, sp, #0
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	3b04      	subs	r3, #4
 80073a4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80073ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	3b04      	subs	r3, #4
 80073b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	f023 0201 	bic.w	r2, r3, #1
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	3b04      	subs	r3, #4
 80073c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80073c4:	4a08      	ldr	r2, [pc, #32]	; (80073e8 <pxPortInitialiseStack+0x54>)
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	3b14      	subs	r3, #20
 80073ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	3b20      	subs	r3, #32
 80073da:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80073dc:	68fb      	ldr	r3, [r7, #12]
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3714      	adds	r7, #20
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bc80      	pop	{r7}
 80073e6:	4770      	bx	lr
 80073e8:	080073ed 	.word	0x080073ed

080073ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80073ec:	b480      	push	{r7}
 80073ee:	b085      	sub	sp, #20
 80073f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80073f2:	2300      	movs	r3, #0
 80073f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80073f6:	4b12      	ldr	r3, [pc, #72]	; (8007440 <prvTaskExitError+0x54>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073fe:	d00a      	beq.n	8007416 <prvTaskExitError+0x2a>
	__asm volatile
 8007400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007404:	f383 8811 	msr	BASEPRI, r3
 8007408:	f3bf 8f6f 	isb	sy
 800740c:	f3bf 8f4f 	dsb	sy
 8007410:	60fb      	str	r3, [r7, #12]
}
 8007412:	bf00      	nop
 8007414:	e7fe      	b.n	8007414 <prvTaskExitError+0x28>
	__asm volatile
 8007416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800741a:	f383 8811 	msr	BASEPRI, r3
 800741e:	f3bf 8f6f 	isb	sy
 8007422:	f3bf 8f4f 	dsb	sy
 8007426:	60bb      	str	r3, [r7, #8]
}
 8007428:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800742a:	bf00      	nop
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d0fc      	beq.n	800742c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007432:	bf00      	nop
 8007434:	bf00      	nop
 8007436:	3714      	adds	r7, #20
 8007438:	46bd      	mov	sp, r7
 800743a:	bc80      	pop	{r7}
 800743c:	4770      	bx	lr
 800743e:	bf00      	nop
 8007440:	20000010 	.word	0x20000010
	...

08007450 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007450:	4b07      	ldr	r3, [pc, #28]	; (8007470 <pxCurrentTCBConst2>)
 8007452:	6819      	ldr	r1, [r3, #0]
 8007454:	6808      	ldr	r0, [r1, #0]
 8007456:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800745a:	f380 8809 	msr	PSP, r0
 800745e:	f3bf 8f6f 	isb	sy
 8007462:	f04f 0000 	mov.w	r0, #0
 8007466:	f380 8811 	msr	BASEPRI, r0
 800746a:	f04e 0e0d 	orr.w	lr, lr, #13
 800746e:	4770      	bx	lr

08007470 <pxCurrentTCBConst2>:
 8007470:	200004b8 	.word	0x200004b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007474:	bf00      	nop
 8007476:	bf00      	nop

08007478 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007478:	4806      	ldr	r0, [pc, #24]	; (8007494 <prvPortStartFirstTask+0x1c>)
 800747a:	6800      	ldr	r0, [r0, #0]
 800747c:	6800      	ldr	r0, [r0, #0]
 800747e:	f380 8808 	msr	MSP, r0
 8007482:	b662      	cpsie	i
 8007484:	b661      	cpsie	f
 8007486:	f3bf 8f4f 	dsb	sy
 800748a:	f3bf 8f6f 	isb	sy
 800748e:	df00      	svc	0
 8007490:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007492:	bf00      	nop
 8007494:	e000ed08 	.word	0xe000ed08

08007498 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800749e:	4b32      	ldr	r3, [pc, #200]	; (8007568 <xPortStartScheduler+0xd0>)
 80074a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	22ff      	movs	r2, #255	; 0xff
 80074ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80074b8:	78fb      	ldrb	r3, [r7, #3]
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80074c0:	b2da      	uxtb	r2, r3
 80074c2:	4b2a      	ldr	r3, [pc, #168]	; (800756c <xPortStartScheduler+0xd4>)
 80074c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80074c6:	4b2a      	ldr	r3, [pc, #168]	; (8007570 <xPortStartScheduler+0xd8>)
 80074c8:	2207      	movs	r2, #7
 80074ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80074cc:	e009      	b.n	80074e2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80074ce:	4b28      	ldr	r3, [pc, #160]	; (8007570 <xPortStartScheduler+0xd8>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	3b01      	subs	r3, #1
 80074d4:	4a26      	ldr	r2, [pc, #152]	; (8007570 <xPortStartScheduler+0xd8>)
 80074d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80074d8:	78fb      	ldrb	r3, [r7, #3]
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	005b      	lsls	r3, r3, #1
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80074e2:	78fb      	ldrb	r3, [r7, #3]
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074ea:	2b80      	cmp	r3, #128	; 0x80
 80074ec:	d0ef      	beq.n	80074ce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80074ee:	4b20      	ldr	r3, [pc, #128]	; (8007570 <xPortStartScheduler+0xd8>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f1c3 0307 	rsb	r3, r3, #7
 80074f6:	2b04      	cmp	r3, #4
 80074f8:	d00a      	beq.n	8007510 <xPortStartScheduler+0x78>
	__asm volatile
 80074fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fe:	f383 8811 	msr	BASEPRI, r3
 8007502:	f3bf 8f6f 	isb	sy
 8007506:	f3bf 8f4f 	dsb	sy
 800750a:	60bb      	str	r3, [r7, #8]
}
 800750c:	bf00      	nop
 800750e:	e7fe      	b.n	800750e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007510:	4b17      	ldr	r3, [pc, #92]	; (8007570 <xPortStartScheduler+0xd8>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	021b      	lsls	r3, r3, #8
 8007516:	4a16      	ldr	r2, [pc, #88]	; (8007570 <xPortStartScheduler+0xd8>)
 8007518:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800751a:	4b15      	ldr	r3, [pc, #84]	; (8007570 <xPortStartScheduler+0xd8>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007522:	4a13      	ldr	r2, [pc, #76]	; (8007570 <xPortStartScheduler+0xd8>)
 8007524:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	b2da      	uxtb	r2, r3
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800752e:	4b11      	ldr	r3, [pc, #68]	; (8007574 <xPortStartScheduler+0xdc>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a10      	ldr	r2, [pc, #64]	; (8007574 <xPortStartScheduler+0xdc>)
 8007534:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007538:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800753a:	4b0e      	ldr	r3, [pc, #56]	; (8007574 <xPortStartScheduler+0xdc>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a0d      	ldr	r2, [pc, #52]	; (8007574 <xPortStartScheduler+0xdc>)
 8007540:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007544:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007546:	f000 f8b9 	bl	80076bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800754a:	4b0b      	ldr	r3, [pc, #44]	; (8007578 <xPortStartScheduler+0xe0>)
 800754c:	2200      	movs	r2, #0
 800754e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007550:	f7ff ff92 	bl	8007478 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007554:	f7ff fa90 	bl	8006a78 <vTaskSwitchContext>
	prvTaskExitError();
 8007558:	f7ff ff48 	bl	80073ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800755c:	2300      	movs	r3, #0
}
 800755e:	4618      	mov	r0, r3
 8007560:	3710      	adds	r7, #16
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	e000e400 	.word	0xe000e400
 800756c:	200005e4 	.word	0x200005e4
 8007570:	200005e8 	.word	0x200005e8
 8007574:	e000ed20 	.word	0xe000ed20
 8007578:	20000010 	.word	0x20000010

0800757c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
	__asm volatile
 8007582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007586:	f383 8811 	msr	BASEPRI, r3
 800758a:	f3bf 8f6f 	isb	sy
 800758e:	f3bf 8f4f 	dsb	sy
 8007592:	607b      	str	r3, [r7, #4]
}
 8007594:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007596:	4b0f      	ldr	r3, [pc, #60]	; (80075d4 <vPortEnterCritical+0x58>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	3301      	adds	r3, #1
 800759c:	4a0d      	ldr	r2, [pc, #52]	; (80075d4 <vPortEnterCritical+0x58>)
 800759e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80075a0:	4b0c      	ldr	r3, [pc, #48]	; (80075d4 <vPortEnterCritical+0x58>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d10f      	bne.n	80075c8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80075a8:	4b0b      	ldr	r3, [pc, #44]	; (80075d8 <vPortEnterCritical+0x5c>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d00a      	beq.n	80075c8 <vPortEnterCritical+0x4c>
	__asm volatile
 80075b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b6:	f383 8811 	msr	BASEPRI, r3
 80075ba:	f3bf 8f6f 	isb	sy
 80075be:	f3bf 8f4f 	dsb	sy
 80075c2:	603b      	str	r3, [r7, #0]
}
 80075c4:	bf00      	nop
 80075c6:	e7fe      	b.n	80075c6 <vPortEnterCritical+0x4a>
	}
}
 80075c8:	bf00      	nop
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bc80      	pop	{r7}
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	20000010 	.word	0x20000010
 80075d8:	e000ed04 	.word	0xe000ed04

080075dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80075e2:	4b11      	ldr	r3, [pc, #68]	; (8007628 <vPortExitCritical+0x4c>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d10a      	bne.n	8007600 <vPortExitCritical+0x24>
	__asm volatile
 80075ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ee:	f383 8811 	msr	BASEPRI, r3
 80075f2:	f3bf 8f6f 	isb	sy
 80075f6:	f3bf 8f4f 	dsb	sy
 80075fa:	607b      	str	r3, [r7, #4]
}
 80075fc:	bf00      	nop
 80075fe:	e7fe      	b.n	80075fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007600:	4b09      	ldr	r3, [pc, #36]	; (8007628 <vPortExitCritical+0x4c>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	3b01      	subs	r3, #1
 8007606:	4a08      	ldr	r2, [pc, #32]	; (8007628 <vPortExitCritical+0x4c>)
 8007608:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800760a:	4b07      	ldr	r3, [pc, #28]	; (8007628 <vPortExitCritical+0x4c>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d105      	bne.n	800761e <vPortExitCritical+0x42>
 8007612:	2300      	movs	r3, #0
 8007614:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	f383 8811 	msr	BASEPRI, r3
}
 800761c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800761e:	bf00      	nop
 8007620:	370c      	adds	r7, #12
 8007622:	46bd      	mov	sp, r7
 8007624:	bc80      	pop	{r7}
 8007626:	4770      	bx	lr
 8007628:	20000010 	.word	0x20000010
 800762c:	00000000 	.word	0x00000000

08007630 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007630:	f3ef 8009 	mrs	r0, PSP
 8007634:	f3bf 8f6f 	isb	sy
 8007638:	4b0d      	ldr	r3, [pc, #52]	; (8007670 <pxCurrentTCBConst>)
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007640:	6010      	str	r0, [r2, #0]
 8007642:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007646:	f04f 0050 	mov.w	r0, #80	; 0x50
 800764a:	f380 8811 	msr	BASEPRI, r0
 800764e:	f7ff fa13 	bl	8006a78 <vTaskSwitchContext>
 8007652:	f04f 0000 	mov.w	r0, #0
 8007656:	f380 8811 	msr	BASEPRI, r0
 800765a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800765e:	6819      	ldr	r1, [r3, #0]
 8007660:	6808      	ldr	r0, [r1, #0]
 8007662:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007666:	f380 8809 	msr	PSP, r0
 800766a:	f3bf 8f6f 	isb	sy
 800766e:	4770      	bx	lr

08007670 <pxCurrentTCBConst>:
 8007670:	200004b8 	.word	0x200004b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007674:	bf00      	nop
 8007676:	bf00      	nop

08007678 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
	__asm volatile
 800767e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007682:	f383 8811 	msr	BASEPRI, r3
 8007686:	f3bf 8f6f 	isb	sy
 800768a:	f3bf 8f4f 	dsb	sy
 800768e:	607b      	str	r3, [r7, #4]
}
 8007690:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007692:	f7ff f933 	bl	80068fc <xTaskIncrementTick>
 8007696:	4603      	mov	r3, r0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d003      	beq.n	80076a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800769c:	4b06      	ldr	r3, [pc, #24]	; (80076b8 <xPortSysTickHandler+0x40>)
 800769e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076a2:	601a      	str	r2, [r3, #0]
 80076a4:	2300      	movs	r3, #0
 80076a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	f383 8811 	msr	BASEPRI, r3
}
 80076ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80076b0:	bf00      	nop
 80076b2:	3708      	adds	r7, #8
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	e000ed04 	.word	0xe000ed04

080076bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80076bc:	b480      	push	{r7}
 80076be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80076c0:	4b0a      	ldr	r3, [pc, #40]	; (80076ec <vPortSetupTimerInterrupt+0x30>)
 80076c2:	2200      	movs	r2, #0
 80076c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80076c6:	4b0a      	ldr	r3, [pc, #40]	; (80076f0 <vPortSetupTimerInterrupt+0x34>)
 80076c8:	2200      	movs	r2, #0
 80076ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80076cc:	4b09      	ldr	r3, [pc, #36]	; (80076f4 <vPortSetupTimerInterrupt+0x38>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a09      	ldr	r2, [pc, #36]	; (80076f8 <vPortSetupTimerInterrupt+0x3c>)
 80076d2:	fba2 2303 	umull	r2, r3, r2, r3
 80076d6:	099b      	lsrs	r3, r3, #6
 80076d8:	4a08      	ldr	r2, [pc, #32]	; (80076fc <vPortSetupTimerInterrupt+0x40>)
 80076da:	3b01      	subs	r3, #1
 80076dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80076de:	4b03      	ldr	r3, [pc, #12]	; (80076ec <vPortSetupTimerInterrupt+0x30>)
 80076e0:	2207      	movs	r2, #7
 80076e2:	601a      	str	r2, [r3, #0]
}
 80076e4:	bf00      	nop
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bc80      	pop	{r7}
 80076ea:	4770      	bx	lr
 80076ec:	e000e010 	.word	0xe000e010
 80076f0:	e000e018 	.word	0xe000e018
 80076f4:	20000004 	.word	0x20000004
 80076f8:	10624dd3 	.word	0x10624dd3
 80076fc:	e000e014 	.word	0xe000e014

08007700 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007700:	b480      	push	{r7}
 8007702:	b085      	sub	sp, #20
 8007704:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007706:	f3ef 8305 	mrs	r3, IPSR
 800770a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2b0f      	cmp	r3, #15
 8007710:	d914      	bls.n	800773c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007712:	4a16      	ldr	r2, [pc, #88]	; (800776c <vPortValidateInterruptPriority+0x6c>)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	4413      	add	r3, r2
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800771c:	4b14      	ldr	r3, [pc, #80]	; (8007770 <vPortValidateInterruptPriority+0x70>)
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	7afa      	ldrb	r2, [r7, #11]
 8007722:	429a      	cmp	r2, r3
 8007724:	d20a      	bcs.n	800773c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800772a:	f383 8811 	msr	BASEPRI, r3
 800772e:	f3bf 8f6f 	isb	sy
 8007732:	f3bf 8f4f 	dsb	sy
 8007736:	607b      	str	r3, [r7, #4]
}
 8007738:	bf00      	nop
 800773a:	e7fe      	b.n	800773a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800773c:	4b0d      	ldr	r3, [pc, #52]	; (8007774 <vPortValidateInterruptPriority+0x74>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007744:	4b0c      	ldr	r3, [pc, #48]	; (8007778 <vPortValidateInterruptPriority+0x78>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	429a      	cmp	r2, r3
 800774a:	d90a      	bls.n	8007762 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800774c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007750:	f383 8811 	msr	BASEPRI, r3
 8007754:	f3bf 8f6f 	isb	sy
 8007758:	f3bf 8f4f 	dsb	sy
 800775c:	603b      	str	r3, [r7, #0]
}
 800775e:	bf00      	nop
 8007760:	e7fe      	b.n	8007760 <vPortValidateInterruptPriority+0x60>
	}
 8007762:	bf00      	nop
 8007764:	3714      	adds	r7, #20
 8007766:	46bd      	mov	sp, r7
 8007768:	bc80      	pop	{r7}
 800776a:	4770      	bx	lr
 800776c:	e000e3f0 	.word	0xe000e3f0
 8007770:	200005e4 	.word	0x200005e4
 8007774:	e000ed0c 	.word	0xe000ed0c
 8007778:	200005e8 	.word	0x200005e8

0800777c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b08a      	sub	sp, #40	; 0x28
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007784:	2300      	movs	r3, #0
 8007786:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007788:	f7ff f80e 	bl	80067a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800778c:	4b58      	ldr	r3, [pc, #352]	; (80078f0 <pvPortMalloc+0x174>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d101      	bne.n	8007798 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007794:	f000 f910 	bl	80079b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007798:	4b56      	ldr	r3, [pc, #344]	; (80078f4 <pvPortMalloc+0x178>)
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	4013      	ands	r3, r2
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	f040 808e 	bne.w	80078c2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d01d      	beq.n	80077e8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80077ac:	2208      	movs	r2, #8
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4413      	add	r3, r2
 80077b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f003 0307 	and.w	r3, r3, #7
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d014      	beq.n	80077e8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f023 0307 	bic.w	r3, r3, #7
 80077c4:	3308      	adds	r3, #8
 80077c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f003 0307 	and.w	r3, r3, #7
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d00a      	beq.n	80077e8 <pvPortMalloc+0x6c>
	__asm volatile
 80077d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d6:	f383 8811 	msr	BASEPRI, r3
 80077da:	f3bf 8f6f 	isb	sy
 80077de:	f3bf 8f4f 	dsb	sy
 80077e2:	617b      	str	r3, [r7, #20]
}
 80077e4:	bf00      	nop
 80077e6:	e7fe      	b.n	80077e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d069      	beq.n	80078c2 <pvPortMalloc+0x146>
 80077ee:	4b42      	ldr	r3, [pc, #264]	; (80078f8 <pvPortMalloc+0x17c>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d864      	bhi.n	80078c2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80077f8:	4b40      	ldr	r3, [pc, #256]	; (80078fc <pvPortMalloc+0x180>)
 80077fa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80077fc:	4b3f      	ldr	r3, [pc, #252]	; (80078fc <pvPortMalloc+0x180>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007802:	e004      	b.n	800780e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007806:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800780e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	687a      	ldr	r2, [r7, #4]
 8007814:	429a      	cmp	r2, r3
 8007816:	d903      	bls.n	8007820 <pvPortMalloc+0xa4>
 8007818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d1f1      	bne.n	8007804 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007820:	4b33      	ldr	r3, [pc, #204]	; (80078f0 <pvPortMalloc+0x174>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007826:	429a      	cmp	r2, r3
 8007828:	d04b      	beq.n	80078c2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800782a:	6a3b      	ldr	r3, [r7, #32]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	2208      	movs	r2, #8
 8007830:	4413      	add	r3, r2
 8007832:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	6a3b      	ldr	r3, [r7, #32]
 800783a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800783c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783e:	685a      	ldr	r2, [r3, #4]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	1ad2      	subs	r2, r2, r3
 8007844:	2308      	movs	r3, #8
 8007846:	005b      	lsls	r3, r3, #1
 8007848:	429a      	cmp	r2, r3
 800784a:	d91f      	bls.n	800788c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800784c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4413      	add	r3, r2
 8007852:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007854:	69bb      	ldr	r3, [r7, #24]
 8007856:	f003 0307 	and.w	r3, r3, #7
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00a      	beq.n	8007874 <pvPortMalloc+0xf8>
	__asm volatile
 800785e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007862:	f383 8811 	msr	BASEPRI, r3
 8007866:	f3bf 8f6f 	isb	sy
 800786a:	f3bf 8f4f 	dsb	sy
 800786e:	613b      	str	r3, [r7, #16]
}
 8007870:	bf00      	nop
 8007872:	e7fe      	b.n	8007872 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007876:	685a      	ldr	r2, [r3, #4]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	1ad2      	subs	r2, r2, r3
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007886:	69b8      	ldr	r0, [r7, #24]
 8007888:	f000 f8f8 	bl	8007a7c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800788c:	4b1a      	ldr	r3, [pc, #104]	; (80078f8 <pvPortMalloc+0x17c>)
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	1ad3      	subs	r3, r2, r3
 8007896:	4a18      	ldr	r2, [pc, #96]	; (80078f8 <pvPortMalloc+0x17c>)
 8007898:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800789a:	4b17      	ldr	r3, [pc, #92]	; (80078f8 <pvPortMalloc+0x17c>)
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	4b18      	ldr	r3, [pc, #96]	; (8007900 <pvPortMalloc+0x184>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d203      	bcs.n	80078ae <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80078a6:	4b14      	ldr	r3, [pc, #80]	; (80078f8 <pvPortMalloc+0x17c>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a15      	ldr	r2, [pc, #84]	; (8007900 <pvPortMalloc+0x184>)
 80078ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80078ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b0:	685a      	ldr	r2, [r3, #4]
 80078b2:	4b10      	ldr	r3, [pc, #64]	; (80078f4 <pvPortMalloc+0x178>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	431a      	orrs	r2, r3
 80078b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80078bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078be:	2200      	movs	r2, #0
 80078c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80078c2:	f7fe ff7f 	bl	80067c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	f003 0307 	and.w	r3, r3, #7
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d00a      	beq.n	80078e6 <pvPortMalloc+0x16a>
	__asm volatile
 80078d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d4:	f383 8811 	msr	BASEPRI, r3
 80078d8:	f3bf 8f6f 	isb	sy
 80078dc:	f3bf 8f4f 	dsb	sy
 80078e0:	60fb      	str	r3, [r7, #12]
}
 80078e2:	bf00      	nop
 80078e4:	e7fe      	b.n	80078e4 <pvPortMalloc+0x168>
	return pvReturn;
 80078e6:	69fb      	ldr	r3, [r7, #28]
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3728      	adds	r7, #40	; 0x28
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}
 80078f0:	200019f4 	.word	0x200019f4
 80078f4:	20001a00 	.word	0x20001a00
 80078f8:	200019f8 	.word	0x200019f8
 80078fc:	200019ec 	.word	0x200019ec
 8007900:	200019fc 	.word	0x200019fc

08007904 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b086      	sub	sp, #24
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d048      	beq.n	80079a8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007916:	2308      	movs	r3, #8
 8007918:	425b      	negs	r3, r3
 800791a:	697a      	ldr	r2, [r7, #20]
 800791c:	4413      	add	r3, r2
 800791e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	685a      	ldr	r2, [r3, #4]
 8007928:	4b21      	ldr	r3, [pc, #132]	; (80079b0 <vPortFree+0xac>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4013      	ands	r3, r2
 800792e:	2b00      	cmp	r3, #0
 8007930:	d10a      	bne.n	8007948 <vPortFree+0x44>
	__asm volatile
 8007932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007936:	f383 8811 	msr	BASEPRI, r3
 800793a:	f3bf 8f6f 	isb	sy
 800793e:	f3bf 8f4f 	dsb	sy
 8007942:	60fb      	str	r3, [r7, #12]
}
 8007944:	bf00      	nop
 8007946:	e7fe      	b.n	8007946 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d00a      	beq.n	8007966 <vPortFree+0x62>
	__asm volatile
 8007950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007954:	f383 8811 	msr	BASEPRI, r3
 8007958:	f3bf 8f6f 	isb	sy
 800795c:	f3bf 8f4f 	dsb	sy
 8007960:	60bb      	str	r3, [r7, #8]
}
 8007962:	bf00      	nop
 8007964:	e7fe      	b.n	8007964 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	685a      	ldr	r2, [r3, #4]
 800796a:	4b11      	ldr	r3, [pc, #68]	; (80079b0 <vPortFree+0xac>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4013      	ands	r3, r2
 8007970:	2b00      	cmp	r3, #0
 8007972:	d019      	beq.n	80079a8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d115      	bne.n	80079a8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	685a      	ldr	r2, [r3, #4]
 8007980:	4b0b      	ldr	r3, [pc, #44]	; (80079b0 <vPortFree+0xac>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	43db      	mvns	r3, r3
 8007986:	401a      	ands	r2, r3
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800798c:	f7fe ff0c 	bl	80067a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	685a      	ldr	r2, [r3, #4]
 8007994:	4b07      	ldr	r3, [pc, #28]	; (80079b4 <vPortFree+0xb0>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4413      	add	r3, r2
 800799a:	4a06      	ldr	r2, [pc, #24]	; (80079b4 <vPortFree+0xb0>)
 800799c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800799e:	6938      	ldr	r0, [r7, #16]
 80079a0:	f000 f86c 	bl	8007a7c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80079a4:	f7fe ff0e 	bl	80067c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80079a8:	bf00      	nop
 80079aa:	3718      	adds	r7, #24
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}
 80079b0:	20001a00 	.word	0x20001a00
 80079b4:	200019f8 	.word	0x200019f8

080079b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80079b8:	b480      	push	{r7}
 80079ba:	b085      	sub	sp, #20
 80079bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80079be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80079c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80079c4:	4b27      	ldr	r3, [pc, #156]	; (8007a64 <prvHeapInit+0xac>)
 80079c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f003 0307 	and.w	r3, r3, #7
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00c      	beq.n	80079ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	3307      	adds	r3, #7
 80079d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f023 0307 	bic.w	r3, r3, #7
 80079de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80079e0:	68ba      	ldr	r2, [r7, #8]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	1ad3      	subs	r3, r2, r3
 80079e6:	4a1f      	ldr	r2, [pc, #124]	; (8007a64 <prvHeapInit+0xac>)
 80079e8:	4413      	add	r3, r2
 80079ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80079f0:	4a1d      	ldr	r2, [pc, #116]	; (8007a68 <prvHeapInit+0xb0>)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80079f6:	4b1c      	ldr	r3, [pc, #112]	; (8007a68 <prvHeapInit+0xb0>)
 80079f8:	2200      	movs	r2, #0
 80079fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	68ba      	ldr	r2, [r7, #8]
 8007a00:	4413      	add	r3, r2
 8007a02:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007a04:	2208      	movs	r2, #8
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	1a9b      	subs	r3, r3, r2
 8007a0a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f023 0307 	bic.w	r3, r3, #7
 8007a12:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	4a15      	ldr	r2, [pc, #84]	; (8007a6c <prvHeapInit+0xb4>)
 8007a18:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007a1a:	4b14      	ldr	r3, [pc, #80]	; (8007a6c <prvHeapInit+0xb4>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007a22:	4b12      	ldr	r3, [pc, #72]	; (8007a6c <prvHeapInit+0xb4>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	2200      	movs	r2, #0
 8007a28:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	68fa      	ldr	r2, [r7, #12]
 8007a32:	1ad2      	subs	r2, r2, r3
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007a38:	4b0c      	ldr	r3, [pc, #48]	; (8007a6c <prvHeapInit+0xb4>)
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	4a0a      	ldr	r2, [pc, #40]	; (8007a70 <prvHeapInit+0xb8>)
 8007a46:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	4a09      	ldr	r2, [pc, #36]	; (8007a74 <prvHeapInit+0xbc>)
 8007a4e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007a50:	4b09      	ldr	r3, [pc, #36]	; (8007a78 <prvHeapInit+0xc0>)
 8007a52:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007a56:	601a      	str	r2, [r3, #0]
}
 8007a58:	bf00      	nop
 8007a5a:	3714      	adds	r7, #20
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bc80      	pop	{r7}
 8007a60:	4770      	bx	lr
 8007a62:	bf00      	nop
 8007a64:	200005ec 	.word	0x200005ec
 8007a68:	200019ec 	.word	0x200019ec
 8007a6c:	200019f4 	.word	0x200019f4
 8007a70:	200019fc 	.word	0x200019fc
 8007a74:	200019f8 	.word	0x200019f8
 8007a78:	20001a00 	.word	0x20001a00

08007a7c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b085      	sub	sp, #20
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007a84:	4b27      	ldr	r3, [pc, #156]	; (8007b24 <prvInsertBlockIntoFreeList+0xa8>)
 8007a86:	60fb      	str	r3, [r7, #12]
 8007a88:	e002      	b.n	8007a90 <prvInsertBlockIntoFreeList+0x14>
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	60fb      	str	r3, [r7, #12]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d8f7      	bhi.n	8007a8a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	68ba      	ldr	r2, [r7, #8]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d108      	bne.n	8007abe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	685a      	ldr	r2, [r3, #4]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	441a      	add	r2, r3
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	68ba      	ldr	r2, [r7, #8]
 8007ac8:	441a      	add	r2, r3
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d118      	bne.n	8007b04 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	4b14      	ldr	r3, [pc, #80]	; (8007b28 <prvInsertBlockIntoFreeList+0xac>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d00d      	beq.n	8007afa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	685a      	ldr	r2, [r3, #4]
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	441a      	add	r2, r3
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	601a      	str	r2, [r3, #0]
 8007af8:	e008      	b.n	8007b0c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007afa:	4b0b      	ldr	r3, [pc, #44]	; (8007b28 <prvInsertBlockIntoFreeList+0xac>)
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	601a      	str	r2, [r3, #0]
 8007b02:	e003      	b.n	8007b0c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007b0c:	68fa      	ldr	r2, [r7, #12]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d002      	beq.n	8007b1a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b1a:	bf00      	nop
 8007b1c:	3714      	adds	r7, #20
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bc80      	pop	{r7}
 8007b22:	4770      	bx	lr
 8007b24:	200019ec 	.word	0x200019ec
 8007b28:	200019f4 	.word	0x200019f4

08007b2c <atoi>:
 8007b2c:	220a      	movs	r2, #10
 8007b2e:	2100      	movs	r1, #0
 8007b30:	f000 ba00 	b.w	8007f34 <strtol>

08007b34 <__errno>:
 8007b34:	4b01      	ldr	r3, [pc, #4]	; (8007b3c <__errno+0x8>)
 8007b36:	6818      	ldr	r0, [r3, #0]
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop
 8007b3c:	20000014 	.word	0x20000014

08007b40 <__libc_init_array>:
 8007b40:	b570      	push	{r4, r5, r6, lr}
 8007b42:	2600      	movs	r6, #0
 8007b44:	4d0c      	ldr	r5, [pc, #48]	; (8007b78 <__libc_init_array+0x38>)
 8007b46:	4c0d      	ldr	r4, [pc, #52]	; (8007b7c <__libc_init_array+0x3c>)
 8007b48:	1b64      	subs	r4, r4, r5
 8007b4a:	10a4      	asrs	r4, r4, #2
 8007b4c:	42a6      	cmp	r6, r4
 8007b4e:	d109      	bne.n	8007b64 <__libc_init_array+0x24>
 8007b50:	f000 fda0 	bl	8008694 <_init>
 8007b54:	2600      	movs	r6, #0
 8007b56:	4d0a      	ldr	r5, [pc, #40]	; (8007b80 <__libc_init_array+0x40>)
 8007b58:	4c0a      	ldr	r4, [pc, #40]	; (8007b84 <__libc_init_array+0x44>)
 8007b5a:	1b64      	subs	r4, r4, r5
 8007b5c:	10a4      	asrs	r4, r4, #2
 8007b5e:	42a6      	cmp	r6, r4
 8007b60:	d105      	bne.n	8007b6e <__libc_init_array+0x2e>
 8007b62:	bd70      	pop	{r4, r5, r6, pc}
 8007b64:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b68:	4798      	blx	r3
 8007b6a:	3601      	adds	r6, #1
 8007b6c:	e7ee      	b.n	8007b4c <__libc_init_array+0xc>
 8007b6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b72:	4798      	blx	r3
 8007b74:	3601      	adds	r6, #1
 8007b76:	e7f2      	b.n	8007b5e <__libc_init_array+0x1e>
 8007b78:	08008968 	.word	0x08008968
 8007b7c:	08008968 	.word	0x08008968
 8007b80:	08008968 	.word	0x08008968
 8007b84:	0800896c 	.word	0x0800896c

08007b88 <__retarget_lock_acquire_recursive>:
 8007b88:	4770      	bx	lr

08007b8a <__retarget_lock_release_recursive>:
 8007b8a:	4770      	bx	lr

08007b8c <memcpy>:
 8007b8c:	440a      	add	r2, r1
 8007b8e:	4291      	cmp	r1, r2
 8007b90:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b94:	d100      	bne.n	8007b98 <memcpy+0xc>
 8007b96:	4770      	bx	lr
 8007b98:	b510      	push	{r4, lr}
 8007b9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b9e:	4291      	cmp	r1, r2
 8007ba0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ba4:	d1f9      	bne.n	8007b9a <memcpy+0xe>
 8007ba6:	bd10      	pop	{r4, pc}

08007ba8 <memset>:
 8007ba8:	4603      	mov	r3, r0
 8007baa:	4402      	add	r2, r0
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d100      	bne.n	8007bb2 <memset+0xa>
 8007bb0:	4770      	bx	lr
 8007bb2:	f803 1b01 	strb.w	r1, [r3], #1
 8007bb6:	e7f9      	b.n	8007bac <memset+0x4>

08007bb8 <sbrk_aligned>:
 8007bb8:	b570      	push	{r4, r5, r6, lr}
 8007bba:	4e0e      	ldr	r6, [pc, #56]	; (8007bf4 <sbrk_aligned+0x3c>)
 8007bbc:	460c      	mov	r4, r1
 8007bbe:	6831      	ldr	r1, [r6, #0]
 8007bc0:	4605      	mov	r5, r0
 8007bc2:	b911      	cbnz	r1, 8007bca <sbrk_aligned+0x12>
 8007bc4:	f000 f8f6 	bl	8007db4 <_sbrk_r>
 8007bc8:	6030      	str	r0, [r6, #0]
 8007bca:	4621      	mov	r1, r4
 8007bcc:	4628      	mov	r0, r5
 8007bce:	f000 f8f1 	bl	8007db4 <_sbrk_r>
 8007bd2:	1c43      	adds	r3, r0, #1
 8007bd4:	d00a      	beq.n	8007bec <sbrk_aligned+0x34>
 8007bd6:	1cc4      	adds	r4, r0, #3
 8007bd8:	f024 0403 	bic.w	r4, r4, #3
 8007bdc:	42a0      	cmp	r0, r4
 8007bde:	d007      	beq.n	8007bf0 <sbrk_aligned+0x38>
 8007be0:	1a21      	subs	r1, r4, r0
 8007be2:	4628      	mov	r0, r5
 8007be4:	f000 f8e6 	bl	8007db4 <_sbrk_r>
 8007be8:	3001      	adds	r0, #1
 8007bea:	d101      	bne.n	8007bf0 <sbrk_aligned+0x38>
 8007bec:	f04f 34ff 	mov.w	r4, #4294967295
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	bd70      	pop	{r4, r5, r6, pc}
 8007bf4:	20001a0c 	.word	0x20001a0c

08007bf8 <_malloc_r>:
 8007bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bfc:	1ccd      	adds	r5, r1, #3
 8007bfe:	f025 0503 	bic.w	r5, r5, #3
 8007c02:	3508      	adds	r5, #8
 8007c04:	2d0c      	cmp	r5, #12
 8007c06:	bf38      	it	cc
 8007c08:	250c      	movcc	r5, #12
 8007c0a:	2d00      	cmp	r5, #0
 8007c0c:	4607      	mov	r7, r0
 8007c0e:	db01      	blt.n	8007c14 <_malloc_r+0x1c>
 8007c10:	42a9      	cmp	r1, r5
 8007c12:	d905      	bls.n	8007c20 <_malloc_r+0x28>
 8007c14:	230c      	movs	r3, #12
 8007c16:	2600      	movs	r6, #0
 8007c18:	603b      	str	r3, [r7, #0]
 8007c1a:	4630      	mov	r0, r6
 8007c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c20:	4e2e      	ldr	r6, [pc, #184]	; (8007cdc <_malloc_r+0xe4>)
 8007c22:	f000 f991 	bl	8007f48 <__malloc_lock>
 8007c26:	6833      	ldr	r3, [r6, #0]
 8007c28:	461c      	mov	r4, r3
 8007c2a:	bb34      	cbnz	r4, 8007c7a <_malloc_r+0x82>
 8007c2c:	4629      	mov	r1, r5
 8007c2e:	4638      	mov	r0, r7
 8007c30:	f7ff ffc2 	bl	8007bb8 <sbrk_aligned>
 8007c34:	1c43      	adds	r3, r0, #1
 8007c36:	4604      	mov	r4, r0
 8007c38:	d14d      	bne.n	8007cd6 <_malloc_r+0xde>
 8007c3a:	6834      	ldr	r4, [r6, #0]
 8007c3c:	4626      	mov	r6, r4
 8007c3e:	2e00      	cmp	r6, #0
 8007c40:	d140      	bne.n	8007cc4 <_malloc_r+0xcc>
 8007c42:	6823      	ldr	r3, [r4, #0]
 8007c44:	4631      	mov	r1, r6
 8007c46:	4638      	mov	r0, r7
 8007c48:	eb04 0803 	add.w	r8, r4, r3
 8007c4c:	f000 f8b2 	bl	8007db4 <_sbrk_r>
 8007c50:	4580      	cmp	r8, r0
 8007c52:	d13a      	bne.n	8007cca <_malloc_r+0xd2>
 8007c54:	6821      	ldr	r1, [r4, #0]
 8007c56:	3503      	adds	r5, #3
 8007c58:	1a6d      	subs	r5, r5, r1
 8007c5a:	f025 0503 	bic.w	r5, r5, #3
 8007c5e:	3508      	adds	r5, #8
 8007c60:	2d0c      	cmp	r5, #12
 8007c62:	bf38      	it	cc
 8007c64:	250c      	movcc	r5, #12
 8007c66:	4638      	mov	r0, r7
 8007c68:	4629      	mov	r1, r5
 8007c6a:	f7ff ffa5 	bl	8007bb8 <sbrk_aligned>
 8007c6e:	3001      	adds	r0, #1
 8007c70:	d02b      	beq.n	8007cca <_malloc_r+0xd2>
 8007c72:	6823      	ldr	r3, [r4, #0]
 8007c74:	442b      	add	r3, r5
 8007c76:	6023      	str	r3, [r4, #0]
 8007c78:	e00e      	b.n	8007c98 <_malloc_r+0xa0>
 8007c7a:	6822      	ldr	r2, [r4, #0]
 8007c7c:	1b52      	subs	r2, r2, r5
 8007c7e:	d41e      	bmi.n	8007cbe <_malloc_r+0xc6>
 8007c80:	2a0b      	cmp	r2, #11
 8007c82:	d916      	bls.n	8007cb2 <_malloc_r+0xba>
 8007c84:	1961      	adds	r1, r4, r5
 8007c86:	42a3      	cmp	r3, r4
 8007c88:	6025      	str	r5, [r4, #0]
 8007c8a:	bf18      	it	ne
 8007c8c:	6059      	strne	r1, [r3, #4]
 8007c8e:	6863      	ldr	r3, [r4, #4]
 8007c90:	bf08      	it	eq
 8007c92:	6031      	streq	r1, [r6, #0]
 8007c94:	5162      	str	r2, [r4, r5]
 8007c96:	604b      	str	r3, [r1, #4]
 8007c98:	4638      	mov	r0, r7
 8007c9a:	f104 060b 	add.w	r6, r4, #11
 8007c9e:	f000 f959 	bl	8007f54 <__malloc_unlock>
 8007ca2:	f026 0607 	bic.w	r6, r6, #7
 8007ca6:	1d23      	adds	r3, r4, #4
 8007ca8:	1af2      	subs	r2, r6, r3
 8007caa:	d0b6      	beq.n	8007c1a <_malloc_r+0x22>
 8007cac:	1b9b      	subs	r3, r3, r6
 8007cae:	50a3      	str	r3, [r4, r2]
 8007cb0:	e7b3      	b.n	8007c1a <_malloc_r+0x22>
 8007cb2:	6862      	ldr	r2, [r4, #4]
 8007cb4:	42a3      	cmp	r3, r4
 8007cb6:	bf0c      	ite	eq
 8007cb8:	6032      	streq	r2, [r6, #0]
 8007cba:	605a      	strne	r2, [r3, #4]
 8007cbc:	e7ec      	b.n	8007c98 <_malloc_r+0xa0>
 8007cbe:	4623      	mov	r3, r4
 8007cc0:	6864      	ldr	r4, [r4, #4]
 8007cc2:	e7b2      	b.n	8007c2a <_malloc_r+0x32>
 8007cc4:	4634      	mov	r4, r6
 8007cc6:	6876      	ldr	r6, [r6, #4]
 8007cc8:	e7b9      	b.n	8007c3e <_malloc_r+0x46>
 8007cca:	230c      	movs	r3, #12
 8007ccc:	4638      	mov	r0, r7
 8007cce:	603b      	str	r3, [r7, #0]
 8007cd0:	f000 f940 	bl	8007f54 <__malloc_unlock>
 8007cd4:	e7a1      	b.n	8007c1a <_malloc_r+0x22>
 8007cd6:	6025      	str	r5, [r4, #0]
 8007cd8:	e7de      	b.n	8007c98 <_malloc_r+0xa0>
 8007cda:	bf00      	nop
 8007cdc:	20001a08 	.word	0x20001a08

08007ce0 <cleanup_glue>:
 8007ce0:	b538      	push	{r3, r4, r5, lr}
 8007ce2:	460c      	mov	r4, r1
 8007ce4:	6809      	ldr	r1, [r1, #0]
 8007ce6:	4605      	mov	r5, r0
 8007ce8:	b109      	cbz	r1, 8007cee <cleanup_glue+0xe>
 8007cea:	f7ff fff9 	bl	8007ce0 <cleanup_glue>
 8007cee:	4621      	mov	r1, r4
 8007cf0:	4628      	mov	r0, r5
 8007cf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cf6:	f000 b933 	b.w	8007f60 <_free_r>
	...

08007cfc <_reclaim_reent>:
 8007cfc:	4b2c      	ldr	r3, [pc, #176]	; (8007db0 <_reclaim_reent+0xb4>)
 8007cfe:	b570      	push	{r4, r5, r6, lr}
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4604      	mov	r4, r0
 8007d04:	4283      	cmp	r3, r0
 8007d06:	d051      	beq.n	8007dac <_reclaim_reent+0xb0>
 8007d08:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007d0a:	b143      	cbz	r3, 8007d1e <_reclaim_reent+0x22>
 8007d0c:	68db      	ldr	r3, [r3, #12]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d14a      	bne.n	8007da8 <_reclaim_reent+0xac>
 8007d12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d14:	6819      	ldr	r1, [r3, #0]
 8007d16:	b111      	cbz	r1, 8007d1e <_reclaim_reent+0x22>
 8007d18:	4620      	mov	r0, r4
 8007d1a:	f000 f921 	bl	8007f60 <_free_r>
 8007d1e:	6961      	ldr	r1, [r4, #20]
 8007d20:	b111      	cbz	r1, 8007d28 <_reclaim_reent+0x2c>
 8007d22:	4620      	mov	r0, r4
 8007d24:	f000 f91c 	bl	8007f60 <_free_r>
 8007d28:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007d2a:	b111      	cbz	r1, 8007d32 <_reclaim_reent+0x36>
 8007d2c:	4620      	mov	r0, r4
 8007d2e:	f000 f917 	bl	8007f60 <_free_r>
 8007d32:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007d34:	b111      	cbz	r1, 8007d3c <_reclaim_reent+0x40>
 8007d36:	4620      	mov	r0, r4
 8007d38:	f000 f912 	bl	8007f60 <_free_r>
 8007d3c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007d3e:	b111      	cbz	r1, 8007d46 <_reclaim_reent+0x4a>
 8007d40:	4620      	mov	r0, r4
 8007d42:	f000 f90d 	bl	8007f60 <_free_r>
 8007d46:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007d48:	b111      	cbz	r1, 8007d50 <_reclaim_reent+0x54>
 8007d4a:	4620      	mov	r0, r4
 8007d4c:	f000 f908 	bl	8007f60 <_free_r>
 8007d50:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007d52:	b111      	cbz	r1, 8007d5a <_reclaim_reent+0x5e>
 8007d54:	4620      	mov	r0, r4
 8007d56:	f000 f903 	bl	8007f60 <_free_r>
 8007d5a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007d5c:	b111      	cbz	r1, 8007d64 <_reclaim_reent+0x68>
 8007d5e:	4620      	mov	r0, r4
 8007d60:	f000 f8fe 	bl	8007f60 <_free_r>
 8007d64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d66:	b111      	cbz	r1, 8007d6e <_reclaim_reent+0x72>
 8007d68:	4620      	mov	r0, r4
 8007d6a:	f000 f8f9 	bl	8007f60 <_free_r>
 8007d6e:	69a3      	ldr	r3, [r4, #24]
 8007d70:	b1e3      	cbz	r3, 8007dac <_reclaim_reent+0xb0>
 8007d72:	4620      	mov	r0, r4
 8007d74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007d76:	4798      	blx	r3
 8007d78:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007d7a:	b1b9      	cbz	r1, 8007dac <_reclaim_reent+0xb0>
 8007d7c:	4620      	mov	r0, r4
 8007d7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007d82:	f7ff bfad 	b.w	8007ce0 <cleanup_glue>
 8007d86:	5949      	ldr	r1, [r1, r5]
 8007d88:	b941      	cbnz	r1, 8007d9c <_reclaim_reent+0xa0>
 8007d8a:	3504      	adds	r5, #4
 8007d8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d8e:	2d80      	cmp	r5, #128	; 0x80
 8007d90:	68d9      	ldr	r1, [r3, #12]
 8007d92:	d1f8      	bne.n	8007d86 <_reclaim_reent+0x8a>
 8007d94:	4620      	mov	r0, r4
 8007d96:	f000 f8e3 	bl	8007f60 <_free_r>
 8007d9a:	e7ba      	b.n	8007d12 <_reclaim_reent+0x16>
 8007d9c:	680e      	ldr	r6, [r1, #0]
 8007d9e:	4620      	mov	r0, r4
 8007da0:	f000 f8de 	bl	8007f60 <_free_r>
 8007da4:	4631      	mov	r1, r6
 8007da6:	e7ef      	b.n	8007d88 <_reclaim_reent+0x8c>
 8007da8:	2500      	movs	r5, #0
 8007daa:	e7ef      	b.n	8007d8c <_reclaim_reent+0x90>
 8007dac:	bd70      	pop	{r4, r5, r6, pc}
 8007dae:	bf00      	nop
 8007db0:	20000014 	.word	0x20000014

08007db4 <_sbrk_r>:
 8007db4:	b538      	push	{r3, r4, r5, lr}
 8007db6:	2300      	movs	r3, #0
 8007db8:	4d05      	ldr	r5, [pc, #20]	; (8007dd0 <_sbrk_r+0x1c>)
 8007dba:	4604      	mov	r4, r0
 8007dbc:	4608      	mov	r0, r1
 8007dbe:	602b      	str	r3, [r5, #0]
 8007dc0:	f7fa f862 	bl	8001e88 <_sbrk>
 8007dc4:	1c43      	adds	r3, r0, #1
 8007dc6:	d102      	bne.n	8007dce <_sbrk_r+0x1a>
 8007dc8:	682b      	ldr	r3, [r5, #0]
 8007dca:	b103      	cbz	r3, 8007dce <_sbrk_r+0x1a>
 8007dcc:	6023      	str	r3, [r4, #0]
 8007dce:	bd38      	pop	{r3, r4, r5, pc}
 8007dd0:	20001a10 	.word	0x20001a10

08007dd4 <siprintf>:
 8007dd4:	b40e      	push	{r1, r2, r3}
 8007dd6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007dda:	b500      	push	{lr}
 8007ddc:	b09c      	sub	sp, #112	; 0x70
 8007dde:	ab1d      	add	r3, sp, #116	; 0x74
 8007de0:	9002      	str	r0, [sp, #8]
 8007de2:	9006      	str	r0, [sp, #24]
 8007de4:	9107      	str	r1, [sp, #28]
 8007de6:	9104      	str	r1, [sp, #16]
 8007de8:	4808      	ldr	r0, [pc, #32]	; (8007e0c <siprintf+0x38>)
 8007dea:	4909      	ldr	r1, [pc, #36]	; (8007e10 <siprintf+0x3c>)
 8007dec:	f853 2b04 	ldr.w	r2, [r3], #4
 8007df0:	9105      	str	r1, [sp, #20]
 8007df2:	6800      	ldr	r0, [r0, #0]
 8007df4:	a902      	add	r1, sp, #8
 8007df6:	9301      	str	r3, [sp, #4]
 8007df8:	f000 f956 	bl	80080a8 <_svfiprintf_r>
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	9b02      	ldr	r3, [sp, #8]
 8007e00:	701a      	strb	r2, [r3, #0]
 8007e02:	b01c      	add	sp, #112	; 0x70
 8007e04:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e08:	b003      	add	sp, #12
 8007e0a:	4770      	bx	lr
 8007e0c:	20000014 	.word	0x20000014
 8007e10:	ffff0208 	.word	0xffff0208

08007e14 <strncpy>:
 8007e14:	4603      	mov	r3, r0
 8007e16:	b510      	push	{r4, lr}
 8007e18:	3901      	subs	r1, #1
 8007e1a:	b132      	cbz	r2, 8007e2a <strncpy+0x16>
 8007e1c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007e20:	3a01      	subs	r2, #1
 8007e22:	f803 4b01 	strb.w	r4, [r3], #1
 8007e26:	2c00      	cmp	r4, #0
 8007e28:	d1f7      	bne.n	8007e1a <strncpy+0x6>
 8007e2a:	2100      	movs	r1, #0
 8007e2c:	441a      	add	r2, r3
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d100      	bne.n	8007e34 <strncpy+0x20>
 8007e32:	bd10      	pop	{r4, pc}
 8007e34:	f803 1b01 	strb.w	r1, [r3], #1
 8007e38:	e7f9      	b.n	8007e2e <strncpy+0x1a>
	...

08007e3c <_strtol_l.constprop.0>:
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e42:	4680      	mov	r8, r0
 8007e44:	d001      	beq.n	8007e4a <_strtol_l.constprop.0+0xe>
 8007e46:	2b24      	cmp	r3, #36	; 0x24
 8007e48:	d906      	bls.n	8007e58 <_strtol_l.constprop.0+0x1c>
 8007e4a:	f7ff fe73 	bl	8007b34 <__errno>
 8007e4e:	2316      	movs	r3, #22
 8007e50:	6003      	str	r3, [r0, #0]
 8007e52:	2000      	movs	r0, #0
 8007e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e58:	460d      	mov	r5, r1
 8007e5a:	4f35      	ldr	r7, [pc, #212]	; (8007f30 <_strtol_l.constprop.0+0xf4>)
 8007e5c:	4628      	mov	r0, r5
 8007e5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e62:	5de6      	ldrb	r6, [r4, r7]
 8007e64:	f016 0608 	ands.w	r6, r6, #8
 8007e68:	d1f8      	bne.n	8007e5c <_strtol_l.constprop.0+0x20>
 8007e6a:	2c2d      	cmp	r4, #45	; 0x2d
 8007e6c:	d12f      	bne.n	8007ece <_strtol_l.constprop.0+0x92>
 8007e6e:	2601      	movs	r6, #1
 8007e70:	782c      	ldrb	r4, [r5, #0]
 8007e72:	1c85      	adds	r5, r0, #2
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d057      	beq.n	8007f28 <_strtol_l.constprop.0+0xec>
 8007e78:	2b10      	cmp	r3, #16
 8007e7a:	d109      	bne.n	8007e90 <_strtol_l.constprop.0+0x54>
 8007e7c:	2c30      	cmp	r4, #48	; 0x30
 8007e7e:	d107      	bne.n	8007e90 <_strtol_l.constprop.0+0x54>
 8007e80:	7828      	ldrb	r0, [r5, #0]
 8007e82:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007e86:	2858      	cmp	r0, #88	; 0x58
 8007e88:	d149      	bne.n	8007f1e <_strtol_l.constprop.0+0xe2>
 8007e8a:	2310      	movs	r3, #16
 8007e8c:	786c      	ldrb	r4, [r5, #1]
 8007e8e:	3502      	adds	r5, #2
 8007e90:	2700      	movs	r7, #0
 8007e92:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8007e96:	f10e 3eff 	add.w	lr, lr, #4294967295
 8007e9a:	fbbe f9f3 	udiv	r9, lr, r3
 8007e9e:	4638      	mov	r0, r7
 8007ea0:	fb03 ea19 	mls	sl, r3, r9, lr
 8007ea4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007ea8:	f1bc 0f09 	cmp.w	ip, #9
 8007eac:	d814      	bhi.n	8007ed8 <_strtol_l.constprop.0+0x9c>
 8007eae:	4664      	mov	r4, ip
 8007eb0:	42a3      	cmp	r3, r4
 8007eb2:	dd22      	ble.n	8007efa <_strtol_l.constprop.0+0xbe>
 8007eb4:	2f00      	cmp	r7, #0
 8007eb6:	db1d      	blt.n	8007ef4 <_strtol_l.constprop.0+0xb8>
 8007eb8:	4581      	cmp	r9, r0
 8007eba:	d31b      	bcc.n	8007ef4 <_strtol_l.constprop.0+0xb8>
 8007ebc:	d101      	bne.n	8007ec2 <_strtol_l.constprop.0+0x86>
 8007ebe:	45a2      	cmp	sl, r4
 8007ec0:	db18      	blt.n	8007ef4 <_strtol_l.constprop.0+0xb8>
 8007ec2:	2701      	movs	r7, #1
 8007ec4:	fb00 4003 	mla	r0, r0, r3, r4
 8007ec8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007ecc:	e7ea      	b.n	8007ea4 <_strtol_l.constprop.0+0x68>
 8007ece:	2c2b      	cmp	r4, #43	; 0x2b
 8007ed0:	bf04      	itt	eq
 8007ed2:	782c      	ldrbeq	r4, [r5, #0]
 8007ed4:	1c85      	addeq	r5, r0, #2
 8007ed6:	e7cd      	b.n	8007e74 <_strtol_l.constprop.0+0x38>
 8007ed8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007edc:	f1bc 0f19 	cmp.w	ip, #25
 8007ee0:	d801      	bhi.n	8007ee6 <_strtol_l.constprop.0+0xaa>
 8007ee2:	3c37      	subs	r4, #55	; 0x37
 8007ee4:	e7e4      	b.n	8007eb0 <_strtol_l.constprop.0+0x74>
 8007ee6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007eea:	f1bc 0f19 	cmp.w	ip, #25
 8007eee:	d804      	bhi.n	8007efa <_strtol_l.constprop.0+0xbe>
 8007ef0:	3c57      	subs	r4, #87	; 0x57
 8007ef2:	e7dd      	b.n	8007eb0 <_strtol_l.constprop.0+0x74>
 8007ef4:	f04f 37ff 	mov.w	r7, #4294967295
 8007ef8:	e7e6      	b.n	8007ec8 <_strtol_l.constprop.0+0x8c>
 8007efa:	2f00      	cmp	r7, #0
 8007efc:	da07      	bge.n	8007f0e <_strtol_l.constprop.0+0xd2>
 8007efe:	2322      	movs	r3, #34	; 0x22
 8007f00:	4670      	mov	r0, lr
 8007f02:	f8c8 3000 	str.w	r3, [r8]
 8007f06:	2a00      	cmp	r2, #0
 8007f08:	d0a4      	beq.n	8007e54 <_strtol_l.constprop.0+0x18>
 8007f0a:	1e69      	subs	r1, r5, #1
 8007f0c:	e005      	b.n	8007f1a <_strtol_l.constprop.0+0xde>
 8007f0e:	b106      	cbz	r6, 8007f12 <_strtol_l.constprop.0+0xd6>
 8007f10:	4240      	negs	r0, r0
 8007f12:	2a00      	cmp	r2, #0
 8007f14:	d09e      	beq.n	8007e54 <_strtol_l.constprop.0+0x18>
 8007f16:	2f00      	cmp	r7, #0
 8007f18:	d1f7      	bne.n	8007f0a <_strtol_l.constprop.0+0xce>
 8007f1a:	6011      	str	r1, [r2, #0]
 8007f1c:	e79a      	b.n	8007e54 <_strtol_l.constprop.0+0x18>
 8007f1e:	2430      	movs	r4, #48	; 0x30
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d1b5      	bne.n	8007e90 <_strtol_l.constprop.0+0x54>
 8007f24:	2308      	movs	r3, #8
 8007f26:	e7b3      	b.n	8007e90 <_strtol_l.constprop.0+0x54>
 8007f28:	2c30      	cmp	r4, #48	; 0x30
 8007f2a:	d0a9      	beq.n	8007e80 <_strtol_l.constprop.0+0x44>
 8007f2c:	230a      	movs	r3, #10
 8007f2e:	e7af      	b.n	8007e90 <_strtol_l.constprop.0+0x54>
 8007f30:	08008835 	.word	0x08008835

08007f34 <strtol>:
 8007f34:	4613      	mov	r3, r2
 8007f36:	460a      	mov	r2, r1
 8007f38:	4601      	mov	r1, r0
 8007f3a:	4802      	ldr	r0, [pc, #8]	; (8007f44 <strtol+0x10>)
 8007f3c:	6800      	ldr	r0, [r0, #0]
 8007f3e:	f7ff bf7d 	b.w	8007e3c <_strtol_l.constprop.0>
 8007f42:	bf00      	nop
 8007f44:	20000014 	.word	0x20000014

08007f48 <__malloc_lock>:
 8007f48:	4801      	ldr	r0, [pc, #4]	; (8007f50 <__malloc_lock+0x8>)
 8007f4a:	f7ff be1d 	b.w	8007b88 <__retarget_lock_acquire_recursive>
 8007f4e:	bf00      	nop
 8007f50:	20001a04 	.word	0x20001a04

08007f54 <__malloc_unlock>:
 8007f54:	4801      	ldr	r0, [pc, #4]	; (8007f5c <__malloc_unlock+0x8>)
 8007f56:	f7ff be18 	b.w	8007b8a <__retarget_lock_release_recursive>
 8007f5a:	bf00      	nop
 8007f5c:	20001a04 	.word	0x20001a04

08007f60 <_free_r>:
 8007f60:	b538      	push	{r3, r4, r5, lr}
 8007f62:	4605      	mov	r5, r0
 8007f64:	2900      	cmp	r1, #0
 8007f66:	d040      	beq.n	8007fea <_free_r+0x8a>
 8007f68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f6c:	1f0c      	subs	r4, r1, #4
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	bfb8      	it	lt
 8007f72:	18e4      	addlt	r4, r4, r3
 8007f74:	f7ff ffe8 	bl	8007f48 <__malloc_lock>
 8007f78:	4a1c      	ldr	r2, [pc, #112]	; (8007fec <_free_r+0x8c>)
 8007f7a:	6813      	ldr	r3, [r2, #0]
 8007f7c:	b933      	cbnz	r3, 8007f8c <_free_r+0x2c>
 8007f7e:	6063      	str	r3, [r4, #4]
 8007f80:	6014      	str	r4, [r2, #0]
 8007f82:	4628      	mov	r0, r5
 8007f84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f88:	f7ff bfe4 	b.w	8007f54 <__malloc_unlock>
 8007f8c:	42a3      	cmp	r3, r4
 8007f8e:	d908      	bls.n	8007fa2 <_free_r+0x42>
 8007f90:	6820      	ldr	r0, [r4, #0]
 8007f92:	1821      	adds	r1, r4, r0
 8007f94:	428b      	cmp	r3, r1
 8007f96:	bf01      	itttt	eq
 8007f98:	6819      	ldreq	r1, [r3, #0]
 8007f9a:	685b      	ldreq	r3, [r3, #4]
 8007f9c:	1809      	addeq	r1, r1, r0
 8007f9e:	6021      	streq	r1, [r4, #0]
 8007fa0:	e7ed      	b.n	8007f7e <_free_r+0x1e>
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	b10b      	cbz	r3, 8007fac <_free_r+0x4c>
 8007fa8:	42a3      	cmp	r3, r4
 8007faa:	d9fa      	bls.n	8007fa2 <_free_r+0x42>
 8007fac:	6811      	ldr	r1, [r2, #0]
 8007fae:	1850      	adds	r0, r2, r1
 8007fb0:	42a0      	cmp	r0, r4
 8007fb2:	d10b      	bne.n	8007fcc <_free_r+0x6c>
 8007fb4:	6820      	ldr	r0, [r4, #0]
 8007fb6:	4401      	add	r1, r0
 8007fb8:	1850      	adds	r0, r2, r1
 8007fba:	4283      	cmp	r3, r0
 8007fbc:	6011      	str	r1, [r2, #0]
 8007fbe:	d1e0      	bne.n	8007f82 <_free_r+0x22>
 8007fc0:	6818      	ldr	r0, [r3, #0]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	4401      	add	r1, r0
 8007fc6:	6011      	str	r1, [r2, #0]
 8007fc8:	6053      	str	r3, [r2, #4]
 8007fca:	e7da      	b.n	8007f82 <_free_r+0x22>
 8007fcc:	d902      	bls.n	8007fd4 <_free_r+0x74>
 8007fce:	230c      	movs	r3, #12
 8007fd0:	602b      	str	r3, [r5, #0]
 8007fd2:	e7d6      	b.n	8007f82 <_free_r+0x22>
 8007fd4:	6820      	ldr	r0, [r4, #0]
 8007fd6:	1821      	adds	r1, r4, r0
 8007fd8:	428b      	cmp	r3, r1
 8007fda:	bf01      	itttt	eq
 8007fdc:	6819      	ldreq	r1, [r3, #0]
 8007fde:	685b      	ldreq	r3, [r3, #4]
 8007fe0:	1809      	addeq	r1, r1, r0
 8007fe2:	6021      	streq	r1, [r4, #0]
 8007fe4:	6063      	str	r3, [r4, #4]
 8007fe6:	6054      	str	r4, [r2, #4]
 8007fe8:	e7cb      	b.n	8007f82 <_free_r+0x22>
 8007fea:	bd38      	pop	{r3, r4, r5, pc}
 8007fec:	20001a08 	.word	0x20001a08

08007ff0 <__ssputs_r>:
 8007ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ff4:	688e      	ldr	r6, [r1, #8]
 8007ff6:	4682      	mov	sl, r0
 8007ff8:	429e      	cmp	r6, r3
 8007ffa:	460c      	mov	r4, r1
 8007ffc:	4690      	mov	r8, r2
 8007ffe:	461f      	mov	r7, r3
 8008000:	d838      	bhi.n	8008074 <__ssputs_r+0x84>
 8008002:	898a      	ldrh	r2, [r1, #12]
 8008004:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008008:	d032      	beq.n	8008070 <__ssputs_r+0x80>
 800800a:	6825      	ldr	r5, [r4, #0]
 800800c:	6909      	ldr	r1, [r1, #16]
 800800e:	3301      	adds	r3, #1
 8008010:	eba5 0901 	sub.w	r9, r5, r1
 8008014:	6965      	ldr	r5, [r4, #20]
 8008016:	444b      	add	r3, r9
 8008018:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800801c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008020:	106d      	asrs	r5, r5, #1
 8008022:	429d      	cmp	r5, r3
 8008024:	bf38      	it	cc
 8008026:	461d      	movcc	r5, r3
 8008028:	0553      	lsls	r3, r2, #21
 800802a:	d531      	bpl.n	8008090 <__ssputs_r+0xa0>
 800802c:	4629      	mov	r1, r5
 800802e:	f7ff fde3 	bl	8007bf8 <_malloc_r>
 8008032:	4606      	mov	r6, r0
 8008034:	b950      	cbnz	r0, 800804c <__ssputs_r+0x5c>
 8008036:	230c      	movs	r3, #12
 8008038:	f04f 30ff 	mov.w	r0, #4294967295
 800803c:	f8ca 3000 	str.w	r3, [sl]
 8008040:	89a3      	ldrh	r3, [r4, #12]
 8008042:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008046:	81a3      	strh	r3, [r4, #12]
 8008048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800804c:	464a      	mov	r2, r9
 800804e:	6921      	ldr	r1, [r4, #16]
 8008050:	f7ff fd9c 	bl	8007b8c <memcpy>
 8008054:	89a3      	ldrh	r3, [r4, #12]
 8008056:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800805a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800805e:	81a3      	strh	r3, [r4, #12]
 8008060:	6126      	str	r6, [r4, #16]
 8008062:	444e      	add	r6, r9
 8008064:	6026      	str	r6, [r4, #0]
 8008066:	463e      	mov	r6, r7
 8008068:	6165      	str	r5, [r4, #20]
 800806a:	eba5 0509 	sub.w	r5, r5, r9
 800806e:	60a5      	str	r5, [r4, #8]
 8008070:	42be      	cmp	r6, r7
 8008072:	d900      	bls.n	8008076 <__ssputs_r+0x86>
 8008074:	463e      	mov	r6, r7
 8008076:	4632      	mov	r2, r6
 8008078:	4641      	mov	r1, r8
 800807a:	6820      	ldr	r0, [r4, #0]
 800807c:	f000 fab8 	bl	80085f0 <memmove>
 8008080:	68a3      	ldr	r3, [r4, #8]
 8008082:	2000      	movs	r0, #0
 8008084:	1b9b      	subs	r3, r3, r6
 8008086:	60a3      	str	r3, [r4, #8]
 8008088:	6823      	ldr	r3, [r4, #0]
 800808a:	4433      	add	r3, r6
 800808c:	6023      	str	r3, [r4, #0]
 800808e:	e7db      	b.n	8008048 <__ssputs_r+0x58>
 8008090:	462a      	mov	r2, r5
 8008092:	f000 fac7 	bl	8008624 <_realloc_r>
 8008096:	4606      	mov	r6, r0
 8008098:	2800      	cmp	r0, #0
 800809a:	d1e1      	bne.n	8008060 <__ssputs_r+0x70>
 800809c:	4650      	mov	r0, sl
 800809e:	6921      	ldr	r1, [r4, #16]
 80080a0:	f7ff ff5e 	bl	8007f60 <_free_r>
 80080a4:	e7c7      	b.n	8008036 <__ssputs_r+0x46>
	...

080080a8 <_svfiprintf_r>:
 80080a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ac:	4698      	mov	r8, r3
 80080ae:	898b      	ldrh	r3, [r1, #12]
 80080b0:	4607      	mov	r7, r0
 80080b2:	061b      	lsls	r3, r3, #24
 80080b4:	460d      	mov	r5, r1
 80080b6:	4614      	mov	r4, r2
 80080b8:	b09d      	sub	sp, #116	; 0x74
 80080ba:	d50e      	bpl.n	80080da <_svfiprintf_r+0x32>
 80080bc:	690b      	ldr	r3, [r1, #16]
 80080be:	b963      	cbnz	r3, 80080da <_svfiprintf_r+0x32>
 80080c0:	2140      	movs	r1, #64	; 0x40
 80080c2:	f7ff fd99 	bl	8007bf8 <_malloc_r>
 80080c6:	6028      	str	r0, [r5, #0]
 80080c8:	6128      	str	r0, [r5, #16]
 80080ca:	b920      	cbnz	r0, 80080d6 <_svfiprintf_r+0x2e>
 80080cc:	230c      	movs	r3, #12
 80080ce:	603b      	str	r3, [r7, #0]
 80080d0:	f04f 30ff 	mov.w	r0, #4294967295
 80080d4:	e0d1      	b.n	800827a <_svfiprintf_r+0x1d2>
 80080d6:	2340      	movs	r3, #64	; 0x40
 80080d8:	616b      	str	r3, [r5, #20]
 80080da:	2300      	movs	r3, #0
 80080dc:	9309      	str	r3, [sp, #36]	; 0x24
 80080de:	2320      	movs	r3, #32
 80080e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080e4:	2330      	movs	r3, #48	; 0x30
 80080e6:	f04f 0901 	mov.w	r9, #1
 80080ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80080ee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008294 <_svfiprintf_r+0x1ec>
 80080f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080f6:	4623      	mov	r3, r4
 80080f8:	469a      	mov	sl, r3
 80080fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080fe:	b10a      	cbz	r2, 8008104 <_svfiprintf_r+0x5c>
 8008100:	2a25      	cmp	r2, #37	; 0x25
 8008102:	d1f9      	bne.n	80080f8 <_svfiprintf_r+0x50>
 8008104:	ebba 0b04 	subs.w	fp, sl, r4
 8008108:	d00b      	beq.n	8008122 <_svfiprintf_r+0x7a>
 800810a:	465b      	mov	r3, fp
 800810c:	4622      	mov	r2, r4
 800810e:	4629      	mov	r1, r5
 8008110:	4638      	mov	r0, r7
 8008112:	f7ff ff6d 	bl	8007ff0 <__ssputs_r>
 8008116:	3001      	adds	r0, #1
 8008118:	f000 80aa 	beq.w	8008270 <_svfiprintf_r+0x1c8>
 800811c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800811e:	445a      	add	r2, fp
 8008120:	9209      	str	r2, [sp, #36]	; 0x24
 8008122:	f89a 3000 	ldrb.w	r3, [sl]
 8008126:	2b00      	cmp	r3, #0
 8008128:	f000 80a2 	beq.w	8008270 <_svfiprintf_r+0x1c8>
 800812c:	2300      	movs	r3, #0
 800812e:	f04f 32ff 	mov.w	r2, #4294967295
 8008132:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008136:	f10a 0a01 	add.w	sl, sl, #1
 800813a:	9304      	str	r3, [sp, #16]
 800813c:	9307      	str	r3, [sp, #28]
 800813e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008142:	931a      	str	r3, [sp, #104]	; 0x68
 8008144:	4654      	mov	r4, sl
 8008146:	2205      	movs	r2, #5
 8008148:	f814 1b01 	ldrb.w	r1, [r4], #1
 800814c:	4851      	ldr	r0, [pc, #324]	; (8008294 <_svfiprintf_r+0x1ec>)
 800814e:	f000 fa41 	bl	80085d4 <memchr>
 8008152:	9a04      	ldr	r2, [sp, #16]
 8008154:	b9d8      	cbnz	r0, 800818e <_svfiprintf_r+0xe6>
 8008156:	06d0      	lsls	r0, r2, #27
 8008158:	bf44      	itt	mi
 800815a:	2320      	movmi	r3, #32
 800815c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008160:	0711      	lsls	r1, r2, #28
 8008162:	bf44      	itt	mi
 8008164:	232b      	movmi	r3, #43	; 0x2b
 8008166:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800816a:	f89a 3000 	ldrb.w	r3, [sl]
 800816e:	2b2a      	cmp	r3, #42	; 0x2a
 8008170:	d015      	beq.n	800819e <_svfiprintf_r+0xf6>
 8008172:	4654      	mov	r4, sl
 8008174:	2000      	movs	r0, #0
 8008176:	f04f 0c0a 	mov.w	ip, #10
 800817a:	9a07      	ldr	r2, [sp, #28]
 800817c:	4621      	mov	r1, r4
 800817e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008182:	3b30      	subs	r3, #48	; 0x30
 8008184:	2b09      	cmp	r3, #9
 8008186:	d94e      	bls.n	8008226 <_svfiprintf_r+0x17e>
 8008188:	b1b0      	cbz	r0, 80081b8 <_svfiprintf_r+0x110>
 800818a:	9207      	str	r2, [sp, #28]
 800818c:	e014      	b.n	80081b8 <_svfiprintf_r+0x110>
 800818e:	eba0 0308 	sub.w	r3, r0, r8
 8008192:	fa09 f303 	lsl.w	r3, r9, r3
 8008196:	4313      	orrs	r3, r2
 8008198:	46a2      	mov	sl, r4
 800819a:	9304      	str	r3, [sp, #16]
 800819c:	e7d2      	b.n	8008144 <_svfiprintf_r+0x9c>
 800819e:	9b03      	ldr	r3, [sp, #12]
 80081a0:	1d19      	adds	r1, r3, #4
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	9103      	str	r1, [sp, #12]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	bfbb      	ittet	lt
 80081aa:	425b      	neglt	r3, r3
 80081ac:	f042 0202 	orrlt.w	r2, r2, #2
 80081b0:	9307      	strge	r3, [sp, #28]
 80081b2:	9307      	strlt	r3, [sp, #28]
 80081b4:	bfb8      	it	lt
 80081b6:	9204      	strlt	r2, [sp, #16]
 80081b8:	7823      	ldrb	r3, [r4, #0]
 80081ba:	2b2e      	cmp	r3, #46	; 0x2e
 80081bc:	d10c      	bne.n	80081d8 <_svfiprintf_r+0x130>
 80081be:	7863      	ldrb	r3, [r4, #1]
 80081c0:	2b2a      	cmp	r3, #42	; 0x2a
 80081c2:	d135      	bne.n	8008230 <_svfiprintf_r+0x188>
 80081c4:	9b03      	ldr	r3, [sp, #12]
 80081c6:	3402      	adds	r4, #2
 80081c8:	1d1a      	adds	r2, r3, #4
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	9203      	str	r2, [sp, #12]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	bfb8      	it	lt
 80081d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80081d6:	9305      	str	r3, [sp, #20]
 80081d8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008298 <_svfiprintf_r+0x1f0>
 80081dc:	2203      	movs	r2, #3
 80081de:	4650      	mov	r0, sl
 80081e0:	7821      	ldrb	r1, [r4, #0]
 80081e2:	f000 f9f7 	bl	80085d4 <memchr>
 80081e6:	b140      	cbz	r0, 80081fa <_svfiprintf_r+0x152>
 80081e8:	2340      	movs	r3, #64	; 0x40
 80081ea:	eba0 000a 	sub.w	r0, r0, sl
 80081ee:	fa03 f000 	lsl.w	r0, r3, r0
 80081f2:	9b04      	ldr	r3, [sp, #16]
 80081f4:	3401      	adds	r4, #1
 80081f6:	4303      	orrs	r3, r0
 80081f8:	9304      	str	r3, [sp, #16]
 80081fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081fe:	2206      	movs	r2, #6
 8008200:	4826      	ldr	r0, [pc, #152]	; (800829c <_svfiprintf_r+0x1f4>)
 8008202:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008206:	f000 f9e5 	bl	80085d4 <memchr>
 800820a:	2800      	cmp	r0, #0
 800820c:	d038      	beq.n	8008280 <_svfiprintf_r+0x1d8>
 800820e:	4b24      	ldr	r3, [pc, #144]	; (80082a0 <_svfiprintf_r+0x1f8>)
 8008210:	bb1b      	cbnz	r3, 800825a <_svfiprintf_r+0x1b2>
 8008212:	9b03      	ldr	r3, [sp, #12]
 8008214:	3307      	adds	r3, #7
 8008216:	f023 0307 	bic.w	r3, r3, #7
 800821a:	3308      	adds	r3, #8
 800821c:	9303      	str	r3, [sp, #12]
 800821e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008220:	4433      	add	r3, r6
 8008222:	9309      	str	r3, [sp, #36]	; 0x24
 8008224:	e767      	b.n	80080f6 <_svfiprintf_r+0x4e>
 8008226:	460c      	mov	r4, r1
 8008228:	2001      	movs	r0, #1
 800822a:	fb0c 3202 	mla	r2, ip, r2, r3
 800822e:	e7a5      	b.n	800817c <_svfiprintf_r+0xd4>
 8008230:	2300      	movs	r3, #0
 8008232:	f04f 0c0a 	mov.w	ip, #10
 8008236:	4619      	mov	r1, r3
 8008238:	3401      	adds	r4, #1
 800823a:	9305      	str	r3, [sp, #20]
 800823c:	4620      	mov	r0, r4
 800823e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008242:	3a30      	subs	r2, #48	; 0x30
 8008244:	2a09      	cmp	r2, #9
 8008246:	d903      	bls.n	8008250 <_svfiprintf_r+0x1a8>
 8008248:	2b00      	cmp	r3, #0
 800824a:	d0c5      	beq.n	80081d8 <_svfiprintf_r+0x130>
 800824c:	9105      	str	r1, [sp, #20]
 800824e:	e7c3      	b.n	80081d8 <_svfiprintf_r+0x130>
 8008250:	4604      	mov	r4, r0
 8008252:	2301      	movs	r3, #1
 8008254:	fb0c 2101 	mla	r1, ip, r1, r2
 8008258:	e7f0      	b.n	800823c <_svfiprintf_r+0x194>
 800825a:	ab03      	add	r3, sp, #12
 800825c:	9300      	str	r3, [sp, #0]
 800825e:	462a      	mov	r2, r5
 8008260:	4638      	mov	r0, r7
 8008262:	4b10      	ldr	r3, [pc, #64]	; (80082a4 <_svfiprintf_r+0x1fc>)
 8008264:	a904      	add	r1, sp, #16
 8008266:	f3af 8000 	nop.w
 800826a:	1c42      	adds	r2, r0, #1
 800826c:	4606      	mov	r6, r0
 800826e:	d1d6      	bne.n	800821e <_svfiprintf_r+0x176>
 8008270:	89ab      	ldrh	r3, [r5, #12]
 8008272:	065b      	lsls	r3, r3, #25
 8008274:	f53f af2c 	bmi.w	80080d0 <_svfiprintf_r+0x28>
 8008278:	9809      	ldr	r0, [sp, #36]	; 0x24
 800827a:	b01d      	add	sp, #116	; 0x74
 800827c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008280:	ab03      	add	r3, sp, #12
 8008282:	9300      	str	r3, [sp, #0]
 8008284:	462a      	mov	r2, r5
 8008286:	4638      	mov	r0, r7
 8008288:	4b06      	ldr	r3, [pc, #24]	; (80082a4 <_svfiprintf_r+0x1fc>)
 800828a:	a904      	add	r1, sp, #16
 800828c:	f000 f87c 	bl	8008388 <_printf_i>
 8008290:	e7eb      	b.n	800826a <_svfiprintf_r+0x1c2>
 8008292:	bf00      	nop
 8008294:	08008935 	.word	0x08008935
 8008298:	0800893b 	.word	0x0800893b
 800829c:	0800893f 	.word	0x0800893f
 80082a0:	00000000 	.word	0x00000000
 80082a4:	08007ff1 	.word	0x08007ff1

080082a8 <_printf_common>:
 80082a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082ac:	4616      	mov	r6, r2
 80082ae:	4699      	mov	r9, r3
 80082b0:	688a      	ldr	r2, [r1, #8]
 80082b2:	690b      	ldr	r3, [r1, #16]
 80082b4:	4607      	mov	r7, r0
 80082b6:	4293      	cmp	r3, r2
 80082b8:	bfb8      	it	lt
 80082ba:	4613      	movlt	r3, r2
 80082bc:	6033      	str	r3, [r6, #0]
 80082be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80082c2:	460c      	mov	r4, r1
 80082c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80082c8:	b10a      	cbz	r2, 80082ce <_printf_common+0x26>
 80082ca:	3301      	adds	r3, #1
 80082cc:	6033      	str	r3, [r6, #0]
 80082ce:	6823      	ldr	r3, [r4, #0]
 80082d0:	0699      	lsls	r1, r3, #26
 80082d2:	bf42      	ittt	mi
 80082d4:	6833      	ldrmi	r3, [r6, #0]
 80082d6:	3302      	addmi	r3, #2
 80082d8:	6033      	strmi	r3, [r6, #0]
 80082da:	6825      	ldr	r5, [r4, #0]
 80082dc:	f015 0506 	ands.w	r5, r5, #6
 80082e0:	d106      	bne.n	80082f0 <_printf_common+0x48>
 80082e2:	f104 0a19 	add.w	sl, r4, #25
 80082e6:	68e3      	ldr	r3, [r4, #12]
 80082e8:	6832      	ldr	r2, [r6, #0]
 80082ea:	1a9b      	subs	r3, r3, r2
 80082ec:	42ab      	cmp	r3, r5
 80082ee:	dc28      	bgt.n	8008342 <_printf_common+0x9a>
 80082f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80082f4:	1e13      	subs	r3, r2, #0
 80082f6:	6822      	ldr	r2, [r4, #0]
 80082f8:	bf18      	it	ne
 80082fa:	2301      	movne	r3, #1
 80082fc:	0692      	lsls	r2, r2, #26
 80082fe:	d42d      	bmi.n	800835c <_printf_common+0xb4>
 8008300:	4649      	mov	r1, r9
 8008302:	4638      	mov	r0, r7
 8008304:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008308:	47c0      	blx	r8
 800830a:	3001      	adds	r0, #1
 800830c:	d020      	beq.n	8008350 <_printf_common+0xa8>
 800830e:	6823      	ldr	r3, [r4, #0]
 8008310:	68e5      	ldr	r5, [r4, #12]
 8008312:	f003 0306 	and.w	r3, r3, #6
 8008316:	2b04      	cmp	r3, #4
 8008318:	bf18      	it	ne
 800831a:	2500      	movne	r5, #0
 800831c:	6832      	ldr	r2, [r6, #0]
 800831e:	f04f 0600 	mov.w	r6, #0
 8008322:	68a3      	ldr	r3, [r4, #8]
 8008324:	bf08      	it	eq
 8008326:	1aad      	subeq	r5, r5, r2
 8008328:	6922      	ldr	r2, [r4, #16]
 800832a:	bf08      	it	eq
 800832c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008330:	4293      	cmp	r3, r2
 8008332:	bfc4      	itt	gt
 8008334:	1a9b      	subgt	r3, r3, r2
 8008336:	18ed      	addgt	r5, r5, r3
 8008338:	341a      	adds	r4, #26
 800833a:	42b5      	cmp	r5, r6
 800833c:	d11a      	bne.n	8008374 <_printf_common+0xcc>
 800833e:	2000      	movs	r0, #0
 8008340:	e008      	b.n	8008354 <_printf_common+0xac>
 8008342:	2301      	movs	r3, #1
 8008344:	4652      	mov	r2, sl
 8008346:	4649      	mov	r1, r9
 8008348:	4638      	mov	r0, r7
 800834a:	47c0      	blx	r8
 800834c:	3001      	adds	r0, #1
 800834e:	d103      	bne.n	8008358 <_printf_common+0xb0>
 8008350:	f04f 30ff 	mov.w	r0, #4294967295
 8008354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008358:	3501      	adds	r5, #1
 800835a:	e7c4      	b.n	80082e6 <_printf_common+0x3e>
 800835c:	2030      	movs	r0, #48	; 0x30
 800835e:	18e1      	adds	r1, r4, r3
 8008360:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008364:	1c5a      	adds	r2, r3, #1
 8008366:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800836a:	4422      	add	r2, r4
 800836c:	3302      	adds	r3, #2
 800836e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008372:	e7c5      	b.n	8008300 <_printf_common+0x58>
 8008374:	2301      	movs	r3, #1
 8008376:	4622      	mov	r2, r4
 8008378:	4649      	mov	r1, r9
 800837a:	4638      	mov	r0, r7
 800837c:	47c0      	blx	r8
 800837e:	3001      	adds	r0, #1
 8008380:	d0e6      	beq.n	8008350 <_printf_common+0xa8>
 8008382:	3601      	adds	r6, #1
 8008384:	e7d9      	b.n	800833a <_printf_common+0x92>
	...

08008388 <_printf_i>:
 8008388:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800838c:	7e0f      	ldrb	r7, [r1, #24]
 800838e:	4691      	mov	r9, r2
 8008390:	2f78      	cmp	r7, #120	; 0x78
 8008392:	4680      	mov	r8, r0
 8008394:	460c      	mov	r4, r1
 8008396:	469a      	mov	sl, r3
 8008398:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800839a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800839e:	d807      	bhi.n	80083b0 <_printf_i+0x28>
 80083a0:	2f62      	cmp	r7, #98	; 0x62
 80083a2:	d80a      	bhi.n	80083ba <_printf_i+0x32>
 80083a4:	2f00      	cmp	r7, #0
 80083a6:	f000 80d9 	beq.w	800855c <_printf_i+0x1d4>
 80083aa:	2f58      	cmp	r7, #88	; 0x58
 80083ac:	f000 80a4 	beq.w	80084f8 <_printf_i+0x170>
 80083b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80083b8:	e03a      	b.n	8008430 <_printf_i+0xa8>
 80083ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80083be:	2b15      	cmp	r3, #21
 80083c0:	d8f6      	bhi.n	80083b0 <_printf_i+0x28>
 80083c2:	a101      	add	r1, pc, #4	; (adr r1, 80083c8 <_printf_i+0x40>)
 80083c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80083c8:	08008421 	.word	0x08008421
 80083cc:	08008435 	.word	0x08008435
 80083d0:	080083b1 	.word	0x080083b1
 80083d4:	080083b1 	.word	0x080083b1
 80083d8:	080083b1 	.word	0x080083b1
 80083dc:	080083b1 	.word	0x080083b1
 80083e0:	08008435 	.word	0x08008435
 80083e4:	080083b1 	.word	0x080083b1
 80083e8:	080083b1 	.word	0x080083b1
 80083ec:	080083b1 	.word	0x080083b1
 80083f0:	080083b1 	.word	0x080083b1
 80083f4:	08008543 	.word	0x08008543
 80083f8:	08008465 	.word	0x08008465
 80083fc:	08008525 	.word	0x08008525
 8008400:	080083b1 	.word	0x080083b1
 8008404:	080083b1 	.word	0x080083b1
 8008408:	08008565 	.word	0x08008565
 800840c:	080083b1 	.word	0x080083b1
 8008410:	08008465 	.word	0x08008465
 8008414:	080083b1 	.word	0x080083b1
 8008418:	080083b1 	.word	0x080083b1
 800841c:	0800852d 	.word	0x0800852d
 8008420:	682b      	ldr	r3, [r5, #0]
 8008422:	1d1a      	adds	r2, r3, #4
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	602a      	str	r2, [r5, #0]
 8008428:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800842c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008430:	2301      	movs	r3, #1
 8008432:	e0a4      	b.n	800857e <_printf_i+0x1f6>
 8008434:	6820      	ldr	r0, [r4, #0]
 8008436:	6829      	ldr	r1, [r5, #0]
 8008438:	0606      	lsls	r6, r0, #24
 800843a:	f101 0304 	add.w	r3, r1, #4
 800843e:	d50a      	bpl.n	8008456 <_printf_i+0xce>
 8008440:	680e      	ldr	r6, [r1, #0]
 8008442:	602b      	str	r3, [r5, #0]
 8008444:	2e00      	cmp	r6, #0
 8008446:	da03      	bge.n	8008450 <_printf_i+0xc8>
 8008448:	232d      	movs	r3, #45	; 0x2d
 800844a:	4276      	negs	r6, r6
 800844c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008450:	230a      	movs	r3, #10
 8008452:	485e      	ldr	r0, [pc, #376]	; (80085cc <_printf_i+0x244>)
 8008454:	e019      	b.n	800848a <_printf_i+0x102>
 8008456:	680e      	ldr	r6, [r1, #0]
 8008458:	f010 0f40 	tst.w	r0, #64	; 0x40
 800845c:	602b      	str	r3, [r5, #0]
 800845e:	bf18      	it	ne
 8008460:	b236      	sxthne	r6, r6
 8008462:	e7ef      	b.n	8008444 <_printf_i+0xbc>
 8008464:	682b      	ldr	r3, [r5, #0]
 8008466:	6820      	ldr	r0, [r4, #0]
 8008468:	1d19      	adds	r1, r3, #4
 800846a:	6029      	str	r1, [r5, #0]
 800846c:	0601      	lsls	r1, r0, #24
 800846e:	d501      	bpl.n	8008474 <_printf_i+0xec>
 8008470:	681e      	ldr	r6, [r3, #0]
 8008472:	e002      	b.n	800847a <_printf_i+0xf2>
 8008474:	0646      	lsls	r6, r0, #25
 8008476:	d5fb      	bpl.n	8008470 <_printf_i+0xe8>
 8008478:	881e      	ldrh	r6, [r3, #0]
 800847a:	2f6f      	cmp	r7, #111	; 0x6f
 800847c:	bf0c      	ite	eq
 800847e:	2308      	moveq	r3, #8
 8008480:	230a      	movne	r3, #10
 8008482:	4852      	ldr	r0, [pc, #328]	; (80085cc <_printf_i+0x244>)
 8008484:	2100      	movs	r1, #0
 8008486:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800848a:	6865      	ldr	r5, [r4, #4]
 800848c:	2d00      	cmp	r5, #0
 800848e:	bfa8      	it	ge
 8008490:	6821      	ldrge	r1, [r4, #0]
 8008492:	60a5      	str	r5, [r4, #8]
 8008494:	bfa4      	itt	ge
 8008496:	f021 0104 	bicge.w	r1, r1, #4
 800849a:	6021      	strge	r1, [r4, #0]
 800849c:	b90e      	cbnz	r6, 80084a2 <_printf_i+0x11a>
 800849e:	2d00      	cmp	r5, #0
 80084a0:	d04d      	beq.n	800853e <_printf_i+0x1b6>
 80084a2:	4615      	mov	r5, r2
 80084a4:	fbb6 f1f3 	udiv	r1, r6, r3
 80084a8:	fb03 6711 	mls	r7, r3, r1, r6
 80084ac:	5dc7      	ldrb	r7, [r0, r7]
 80084ae:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80084b2:	4637      	mov	r7, r6
 80084b4:	42bb      	cmp	r3, r7
 80084b6:	460e      	mov	r6, r1
 80084b8:	d9f4      	bls.n	80084a4 <_printf_i+0x11c>
 80084ba:	2b08      	cmp	r3, #8
 80084bc:	d10b      	bne.n	80084d6 <_printf_i+0x14e>
 80084be:	6823      	ldr	r3, [r4, #0]
 80084c0:	07de      	lsls	r6, r3, #31
 80084c2:	d508      	bpl.n	80084d6 <_printf_i+0x14e>
 80084c4:	6923      	ldr	r3, [r4, #16]
 80084c6:	6861      	ldr	r1, [r4, #4]
 80084c8:	4299      	cmp	r1, r3
 80084ca:	bfde      	ittt	le
 80084cc:	2330      	movle	r3, #48	; 0x30
 80084ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 80084d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80084d6:	1b52      	subs	r2, r2, r5
 80084d8:	6122      	str	r2, [r4, #16]
 80084da:	464b      	mov	r3, r9
 80084dc:	4621      	mov	r1, r4
 80084de:	4640      	mov	r0, r8
 80084e0:	f8cd a000 	str.w	sl, [sp]
 80084e4:	aa03      	add	r2, sp, #12
 80084e6:	f7ff fedf 	bl	80082a8 <_printf_common>
 80084ea:	3001      	adds	r0, #1
 80084ec:	d14c      	bne.n	8008588 <_printf_i+0x200>
 80084ee:	f04f 30ff 	mov.w	r0, #4294967295
 80084f2:	b004      	add	sp, #16
 80084f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084f8:	4834      	ldr	r0, [pc, #208]	; (80085cc <_printf_i+0x244>)
 80084fa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80084fe:	6829      	ldr	r1, [r5, #0]
 8008500:	6823      	ldr	r3, [r4, #0]
 8008502:	f851 6b04 	ldr.w	r6, [r1], #4
 8008506:	6029      	str	r1, [r5, #0]
 8008508:	061d      	lsls	r5, r3, #24
 800850a:	d514      	bpl.n	8008536 <_printf_i+0x1ae>
 800850c:	07df      	lsls	r7, r3, #31
 800850e:	bf44      	itt	mi
 8008510:	f043 0320 	orrmi.w	r3, r3, #32
 8008514:	6023      	strmi	r3, [r4, #0]
 8008516:	b91e      	cbnz	r6, 8008520 <_printf_i+0x198>
 8008518:	6823      	ldr	r3, [r4, #0]
 800851a:	f023 0320 	bic.w	r3, r3, #32
 800851e:	6023      	str	r3, [r4, #0]
 8008520:	2310      	movs	r3, #16
 8008522:	e7af      	b.n	8008484 <_printf_i+0xfc>
 8008524:	6823      	ldr	r3, [r4, #0]
 8008526:	f043 0320 	orr.w	r3, r3, #32
 800852a:	6023      	str	r3, [r4, #0]
 800852c:	2378      	movs	r3, #120	; 0x78
 800852e:	4828      	ldr	r0, [pc, #160]	; (80085d0 <_printf_i+0x248>)
 8008530:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008534:	e7e3      	b.n	80084fe <_printf_i+0x176>
 8008536:	0659      	lsls	r1, r3, #25
 8008538:	bf48      	it	mi
 800853a:	b2b6      	uxthmi	r6, r6
 800853c:	e7e6      	b.n	800850c <_printf_i+0x184>
 800853e:	4615      	mov	r5, r2
 8008540:	e7bb      	b.n	80084ba <_printf_i+0x132>
 8008542:	682b      	ldr	r3, [r5, #0]
 8008544:	6826      	ldr	r6, [r4, #0]
 8008546:	1d18      	adds	r0, r3, #4
 8008548:	6961      	ldr	r1, [r4, #20]
 800854a:	6028      	str	r0, [r5, #0]
 800854c:	0635      	lsls	r5, r6, #24
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	d501      	bpl.n	8008556 <_printf_i+0x1ce>
 8008552:	6019      	str	r1, [r3, #0]
 8008554:	e002      	b.n	800855c <_printf_i+0x1d4>
 8008556:	0670      	lsls	r0, r6, #25
 8008558:	d5fb      	bpl.n	8008552 <_printf_i+0x1ca>
 800855a:	8019      	strh	r1, [r3, #0]
 800855c:	2300      	movs	r3, #0
 800855e:	4615      	mov	r5, r2
 8008560:	6123      	str	r3, [r4, #16]
 8008562:	e7ba      	b.n	80084da <_printf_i+0x152>
 8008564:	682b      	ldr	r3, [r5, #0]
 8008566:	2100      	movs	r1, #0
 8008568:	1d1a      	adds	r2, r3, #4
 800856a:	602a      	str	r2, [r5, #0]
 800856c:	681d      	ldr	r5, [r3, #0]
 800856e:	6862      	ldr	r2, [r4, #4]
 8008570:	4628      	mov	r0, r5
 8008572:	f000 f82f 	bl	80085d4 <memchr>
 8008576:	b108      	cbz	r0, 800857c <_printf_i+0x1f4>
 8008578:	1b40      	subs	r0, r0, r5
 800857a:	6060      	str	r0, [r4, #4]
 800857c:	6863      	ldr	r3, [r4, #4]
 800857e:	6123      	str	r3, [r4, #16]
 8008580:	2300      	movs	r3, #0
 8008582:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008586:	e7a8      	b.n	80084da <_printf_i+0x152>
 8008588:	462a      	mov	r2, r5
 800858a:	4649      	mov	r1, r9
 800858c:	4640      	mov	r0, r8
 800858e:	6923      	ldr	r3, [r4, #16]
 8008590:	47d0      	blx	sl
 8008592:	3001      	adds	r0, #1
 8008594:	d0ab      	beq.n	80084ee <_printf_i+0x166>
 8008596:	6823      	ldr	r3, [r4, #0]
 8008598:	079b      	lsls	r3, r3, #30
 800859a:	d413      	bmi.n	80085c4 <_printf_i+0x23c>
 800859c:	68e0      	ldr	r0, [r4, #12]
 800859e:	9b03      	ldr	r3, [sp, #12]
 80085a0:	4298      	cmp	r0, r3
 80085a2:	bfb8      	it	lt
 80085a4:	4618      	movlt	r0, r3
 80085a6:	e7a4      	b.n	80084f2 <_printf_i+0x16a>
 80085a8:	2301      	movs	r3, #1
 80085aa:	4632      	mov	r2, r6
 80085ac:	4649      	mov	r1, r9
 80085ae:	4640      	mov	r0, r8
 80085b0:	47d0      	blx	sl
 80085b2:	3001      	adds	r0, #1
 80085b4:	d09b      	beq.n	80084ee <_printf_i+0x166>
 80085b6:	3501      	adds	r5, #1
 80085b8:	68e3      	ldr	r3, [r4, #12]
 80085ba:	9903      	ldr	r1, [sp, #12]
 80085bc:	1a5b      	subs	r3, r3, r1
 80085be:	42ab      	cmp	r3, r5
 80085c0:	dcf2      	bgt.n	80085a8 <_printf_i+0x220>
 80085c2:	e7eb      	b.n	800859c <_printf_i+0x214>
 80085c4:	2500      	movs	r5, #0
 80085c6:	f104 0619 	add.w	r6, r4, #25
 80085ca:	e7f5      	b.n	80085b8 <_printf_i+0x230>
 80085cc:	08008946 	.word	0x08008946
 80085d0:	08008957 	.word	0x08008957

080085d4 <memchr>:
 80085d4:	4603      	mov	r3, r0
 80085d6:	b510      	push	{r4, lr}
 80085d8:	b2c9      	uxtb	r1, r1
 80085da:	4402      	add	r2, r0
 80085dc:	4293      	cmp	r3, r2
 80085de:	4618      	mov	r0, r3
 80085e0:	d101      	bne.n	80085e6 <memchr+0x12>
 80085e2:	2000      	movs	r0, #0
 80085e4:	e003      	b.n	80085ee <memchr+0x1a>
 80085e6:	7804      	ldrb	r4, [r0, #0]
 80085e8:	3301      	adds	r3, #1
 80085ea:	428c      	cmp	r4, r1
 80085ec:	d1f6      	bne.n	80085dc <memchr+0x8>
 80085ee:	bd10      	pop	{r4, pc}

080085f0 <memmove>:
 80085f0:	4288      	cmp	r0, r1
 80085f2:	b510      	push	{r4, lr}
 80085f4:	eb01 0402 	add.w	r4, r1, r2
 80085f8:	d902      	bls.n	8008600 <memmove+0x10>
 80085fa:	4284      	cmp	r4, r0
 80085fc:	4623      	mov	r3, r4
 80085fe:	d807      	bhi.n	8008610 <memmove+0x20>
 8008600:	1e43      	subs	r3, r0, #1
 8008602:	42a1      	cmp	r1, r4
 8008604:	d008      	beq.n	8008618 <memmove+0x28>
 8008606:	f811 2b01 	ldrb.w	r2, [r1], #1
 800860a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800860e:	e7f8      	b.n	8008602 <memmove+0x12>
 8008610:	4601      	mov	r1, r0
 8008612:	4402      	add	r2, r0
 8008614:	428a      	cmp	r2, r1
 8008616:	d100      	bne.n	800861a <memmove+0x2a>
 8008618:	bd10      	pop	{r4, pc}
 800861a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800861e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008622:	e7f7      	b.n	8008614 <memmove+0x24>

08008624 <_realloc_r>:
 8008624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008628:	4680      	mov	r8, r0
 800862a:	4614      	mov	r4, r2
 800862c:	460e      	mov	r6, r1
 800862e:	b921      	cbnz	r1, 800863a <_realloc_r+0x16>
 8008630:	4611      	mov	r1, r2
 8008632:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008636:	f7ff badf 	b.w	8007bf8 <_malloc_r>
 800863a:	b92a      	cbnz	r2, 8008648 <_realloc_r+0x24>
 800863c:	f7ff fc90 	bl	8007f60 <_free_r>
 8008640:	4625      	mov	r5, r4
 8008642:	4628      	mov	r0, r5
 8008644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008648:	f000 f81b 	bl	8008682 <_malloc_usable_size_r>
 800864c:	4284      	cmp	r4, r0
 800864e:	4607      	mov	r7, r0
 8008650:	d802      	bhi.n	8008658 <_realloc_r+0x34>
 8008652:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008656:	d812      	bhi.n	800867e <_realloc_r+0x5a>
 8008658:	4621      	mov	r1, r4
 800865a:	4640      	mov	r0, r8
 800865c:	f7ff facc 	bl	8007bf8 <_malloc_r>
 8008660:	4605      	mov	r5, r0
 8008662:	2800      	cmp	r0, #0
 8008664:	d0ed      	beq.n	8008642 <_realloc_r+0x1e>
 8008666:	42bc      	cmp	r4, r7
 8008668:	4622      	mov	r2, r4
 800866a:	4631      	mov	r1, r6
 800866c:	bf28      	it	cs
 800866e:	463a      	movcs	r2, r7
 8008670:	f7ff fa8c 	bl	8007b8c <memcpy>
 8008674:	4631      	mov	r1, r6
 8008676:	4640      	mov	r0, r8
 8008678:	f7ff fc72 	bl	8007f60 <_free_r>
 800867c:	e7e1      	b.n	8008642 <_realloc_r+0x1e>
 800867e:	4635      	mov	r5, r6
 8008680:	e7df      	b.n	8008642 <_realloc_r+0x1e>

08008682 <_malloc_usable_size_r>:
 8008682:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008686:	1f18      	subs	r0, r3, #4
 8008688:	2b00      	cmp	r3, #0
 800868a:	bfbc      	itt	lt
 800868c:	580b      	ldrlt	r3, [r1, r0]
 800868e:	18c0      	addlt	r0, r0, r3
 8008690:	4770      	bx	lr
	...

08008694 <_init>:
 8008694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008696:	bf00      	nop
 8008698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800869a:	bc08      	pop	{r3}
 800869c:	469e      	mov	lr, r3
 800869e:	4770      	bx	lr

080086a0 <_fini>:
 80086a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086a2:	bf00      	nop
 80086a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086a6:	bc08      	pop	{r3}
 80086a8:	469e      	mov	lr, r3
 80086aa:	4770      	bx	lr
